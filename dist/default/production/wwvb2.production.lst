

HI-TECH Software LITE Macro Assembler (PIC18) V9.66 build 8870 
                                                       Sun Mar 11 09:53:26 2012

HI-TECH Software Omniscient Code Generator build 8870
     1  000000                     opt subtitle "HI-TECH Software Omniscient Code G
                                 enerator build 8870"
     2                           
     3                           	processor	18F2420
     4  000000                     porta	equ	0F80h
     5  000000                     portb	equ	0F81h
     6  000000                     portc	equ	0F82h
     7  000000                     portd	equ	0F83h
     8  000000                     porte	equ	0F84h
     9  000000                     lata	equ	0F89h
    10  000000                     latb	equ	0F8Ah
    11  000000                     latc	equ	0F8Bh
    12  000000                     latd	equ	0F8Ch
    13  000000                     late	equ	0F8Dh
    14  000000                     trisa	equ	0F92h
    15  000000                     trisb	equ	0F93h
    16  000000                     trisc	equ	0F94h
    17  000000                     trisd	equ	0F95h
    18  000000                     trise	equ	0F96h
    19  000000                     pie1	equ	0F9Dh
    20  000000                     pir1	equ	0F9Eh
    21  000000                     ipr1	equ	0F9Fh
    22  000000                     pie2	equ	0FA0h
    23  000000                     pir2	equ	0FA1h
    24  000000                     ipr2	equ	0FA2h
    25  000000                     t3con	equ	0FB1h
    26  000000                     tmr3l	equ	0FB2h
    27  000000                     tmr3h	equ	0FB3h
    28  000000                     ccp1con	equ	0FBDh
    29  000000                     ccpr1l	equ	0FBEh
    30  000000                     ccpr1h	equ	0FBFh
    31  000000                     adcon1	equ	0FC1h
    32  000000                     adcon0	equ	0FC2h
    33  000000                     adresl	equ	0FC3h
    34  000000                     adresh	equ	0FC4h
    35  000000                     sspcon2	equ	0FC5h
    36  000000                     sspcon1	equ	0FC6h
    37  000000                     sspstat	equ	0FC7h
    38  000000                     sspadd	equ	0FC8h
    39  000000                     sspbuf	equ	0FC9h
    40  000000                     t2con	equ	0FCAh
    41  000000                     pr2	equ	0FCBh
    42  000000                     tmr2	equ	0FCCh
    43  000000                     t1con	equ	0FCDh
    44  000000                     tmr1l	equ	0FCEh
    45  000000                     tmr1h	equ	0FCFh
    46  000000                     rcon	equ	0FD0h
    47  000000                     wdtcon	equ	0FD1h
    48  000000                     lvdcon	equ	0FD2h
    49  000000                     osccon	equ	0FD3h
    50  000000                     t0con	equ	0FD5h
    51  000000                     tmr0l	equ	0FD6h
    52  000000                     tmr0h	equ	0FD7h
    53  000000                     status	equ	0FD8h
    54  000000                     fsr2	equ	0FD9h
    55  000000                     fsr2l	equ	0FD9h
    56  000000                     fsr2h	equ	0FDAh
    57  000000                     plusw2	equ	0FDBh
    58  000000                     preinc2	equ	0FDCh
    59  000000                     postdec2	equ	0FDDh
    60  000000                     postinc2	equ	0FDEh
    61  000000                     indf2	equ	0FDFh
    62  000000                     bsr	equ	0FE0h
    63  000000                     fsr1	equ	0FE1h
    64  000000                     fsr1l	equ	0FE1h
    65  000000                     fsr1h	equ	0FE2h
    66  000000                     plusw1	equ	0FE3h
    67  000000                     preinc1	equ	0FE4h
    68  000000                     postdec1	equ	0FE5h
    69  000000                     postinc1	equ	0FE6h
    70  000000                     indf1	equ	0FE7h
    71  000000                     wreg	equ	0FE8h
    72  000000                     fsr0	equ	0FE9h
    73  000000                     fsr0l	equ	0FE9h
    74  000000                     fsr0h	equ	0FEAh
    75  000000                     plusw0	equ	0FEBh
    76  000000                     preinc0	equ	0FECh
    77  000000                     postdec0	equ	0FEDh
    78  000000                     postinc0	equ	0FEEh
    79  000000                     indf0	equ	0FEFh
    80  000000                     intcon3	equ	0FF0h
    81  000000                     intcon2	equ	0FF1h
    82  000000                     intcon	equ	0FF2h
    83  000000                     prod	equ	0FF3h
    84  000000                     prodl	equ	0FF3h
    85  000000                     prodh	equ	0FF4h
    86  000000                     tablat	equ	0FF5h
    87  000000                     tblptr	equ	0FF6h
    88  000000                     tblptrl	equ	0FF6h
    89  000000                     tblptrh	equ	0FF7h
    90  000000                     tblptru	equ	0FF8h
    91  000000                     pcl	equ	0FF9h
    92  000000                     pclat	equ	0FFAh
    93  000000                     pclath	equ	0FFAh
    94  000000                     pclatu	equ	0FFBh
    95  000000                     stkptr	equ	0FFCh
    96  000000                     tosl	equ	0FFDh
    97  000000                     tosh	equ	0FFEh
    98  000000                     tosu	equ	0FFFh
    99                           	global	__ramtop
   100                           	global	__accesstop
   101                           # 34 "main.c"
   102                           	global __config1 ;#
   103                           # 34 "main.c"
   104  000000                     	__config1 equ 0xFFFF & 0xFFFF & 0xF0FF ;#
   105                           # 36 "main.c"
   106                           	global __config2 ;#
   107                           # 36 "main.c"
   108  000000                     	__config2 equ 0xFFF9 & 0xFFFE & 0xFEFF ;#
   109                           # 38 "main.c"
   110                           	global __config3 ;#
   111                           # 38 "main.c"
   112  000000                     	__config3 equ 0xFFFF & 0xFFFF & 0xFFFF & 0xFDFF
                                  ;#
   113                           # 40 "main.c"
   114                           	global __config4 ;#
   115                           # 40 "main.c"
   116  000000                     	__config4 equ 0xFFFF & 0xFFFF & 0xFFFB ;#
   117                           # 42 "main.c"
   118                           	global __config5 ;#
   119                           # 42 "main.c"
   120  000000                     	__config5 equ 0xFFFF ;#
   121                           	GLOBAL	__activetblptr
   122  000000                     __activetblptr	EQU	2
   123                           	GLOBAL	__smallconst,__Lsmallconst
   124  000000                     __smallconst	EQU	__Lsmallconst
   125                           	GLOBAL	__mediumconst,__Lmediumconst
   126  000000                     __mediumconst	EQU	__Lmediumconst
   127                           	GLOBAL	__Ldata
   128  000000                     __Ldata	EQU	0
   129  000000                     main@tt	equ	??_main+0
   130                           	global	main@tt
   131  000000                     rtcGetClock@pTime	equ	?_rtcGetClock+0
   132                           	global	rtcGetClock@pTime
   133  000000                     glcdInit@y	equ	??_glcdInit+0
   134                           	global	glcdInit@y
   135  000000                     DisplayTime@yPM	equ	??_DisplayTime+0
   136                           	global	DisplayTime@yPM
   137  000000                     DisplayTime@yHr	equ	??_DisplayTime+1
   138                           	global	DisplayTime@yHr
   139  000000                     DisplayTime@yUpdateHr	equ	??_DisplayTime+2
   140                           	global	DisplayTime@yUpdateHr
   141  000000                     DisplayTime@yUpdateMin	equ	??_DisplayTime+3
   142                           	global	DisplayTime@yUpdateMin
   143  000000                     DisplayTime@yUpdateSec	equ	??_DisplayTime+4
   144                           	global	DisplayTime@yUpdateSec
   145  000000                     DisplayTime@yTZ	equ	??_DisplayTime+5
   146                           	global	DisplayTime@yTZ
   147  000000                     DisplayTime@y	equ	??_DisplayTime+6
   148                           	global	DisplayTime@y
   149  000000                     DisplayTime@sz	equ	??_DisplayTime+7
   150                           	global	DisplayTime@sz
   151  000000                     DisplayTime@ptt	equ	?_DisplayTime+0
   152                           	global	DisplayTime@ptt
   153  000000                     DisplayTime@yAll	equ	?_DisplayTime+2
   154                           	global	DisplayTime@yAll
   155  000000                     ButtonDown@yZone	equ	??_ButtonDown+0
   156                           	global	ButtonDown@yZone
   157  000000                     ButtonDown@y	equ	??_ButtonDown+1
   158                           	global	ButtonDown@y
   159  000000                     _wwvGetTime$1280	equ	??_wwvGetTime+0
   160                           	global	_wwvGetTime$1280
   161  000000                     _wwvGetTime$1281	equ	??_wwvGetTime+1
   162                           	global	_wwvGetTime$1281
   163  000000                     _wwvGetTime$1282	equ	??_wwvGetTime+2
   164                           	global	_wwvGetTime$1282
   165  000000                     _wwvGetTime$1283	equ	??_wwvGetTime+3
   166                           	global	_wwvGetTime$1283
   167  000000                     _wwvGetTime$1284	equ	??_wwvGetTime+4
   168                           	global	_wwvGetTime$1284
   169  000000                     _wwvGetTime$1285	equ	??_wwvGetTime+5
   170                           	global	_wwvGetTime$1285
   171  000000                     wwvGetTime@yDays2	equ	??_wwvGetTime+6
   172                           	global	wwvGetTime@yDays2
   173  000000                     wwvGetTime@yTZ	equ	??_wwvGetTime+7
   174                           	global	wwvGetTime@yTZ
   175  000000                     wwvGetTime@y	equ	??_wwvGetTime+8
   176                           	global	wwvGetTime@y
   177  000000                     wwvGetTime@yLeap	equ	??_wwvGetTime+9
   178                           	global	wwvGetTime@yLeap
   179  000000                     wwvGetTime@yYears1	equ	??_wwvGetTime+10
   180                           	global	wwvGetTime@yYears1
   181  000000                     wwvGetTime@yYears2	equ	??_wwvGetTime+11
   182                           	global	wwvGetTime@yYears2
   183  000000                     wwvGetTime@yDays1	equ	??_wwvGetTime+12
   184                           	global	wwvGetTime@yDays1
   185  000000                     wwvGetTime@yMin	equ	??_wwvGetTime+13
   186                           	global	wwvGetTime@yMin
   187  000000                     wwvGetTime@yUpper	equ	??_wwvGetTime+14
   188                           	global	wwvGetTime@yUpper
   189  000000                     wwvGetTime@yDST	equ	??_wwvGetTime+15
   190                           	global	wwvGetTime@yDST
   191  000000                     wwvGetTime@yHour	equ	??_wwvGetTime+16
   192                           	global	wwvGetTime@yHour
   193  000000                     wwvGetTime@yLower	equ	??_wwvGetTime+17
   194                           	global	wwvGetTime@yLower
   195  000000                     wwvGetTime@wDays	equ	??_wwvGetTime+18
   196                           	global	wwvGetTime@wDays
   197  000000                     wwvGetTime@sz	equ	??_wwvGetTime+20
   198                           	global	wwvGetTime@sz
   199  000000                     wwvGetTime@pt	equ	?_wwvGetTime+0
   200                           	global	wwvGetTime@pt
   201  000000                     memcpy@d	equ	??_memcpy+0
   202                           	global	memcpy@d
   203  000000                     memcpy@s	equ	??_memcpy+2
   204                           	global	memcpy@s
   205  000000                     memcpy@d1	equ	?_memcpy+0
   206                           	global	memcpy@d1
   207  000000                     memcpy@s1	equ	?_memcpy+2
   208                           	global	memcpy@s1
   209  000000                     memcpy@n	equ	?_memcpy+4
   210                           	global	memcpy@n
   211  000000                     rtcInit@y	equ	??_rtcInit+0
   212                           	global	rtcInit@y
   213  000000                     rtcInit@tt	equ	??_rtcInit+1
   214                           	global	rtcInit@tt
   215  000000                     glcdMakeLastSyncString@yChar	equ	??_glcdMakeLast
                                 SyncString+0
   216                           	global	glcdMakeLastSyncString@yChar
   217  000000                     glcdMakeLastSyncString@yPos	equ	??_glcdMakeLastS
                                 yncString+1
   218                           	global	glcdMakeLastSyncString@yPos
   219  000000                     glcdMakeLastSyncString@pBuffer	equ	?_glcdMakeLas
                                 tSyncString+0
   220                           	global	glcdMakeLastSyncString@pBuffer
   221  000000                     glcdMakeLastSyncString@yMonth	equ	?_glcdMakeLast
                                 SyncString+2
   222                           	global	glcdMakeLastSyncString@yMonth
   223  000000                     glcdMakeLastSyncString@yDate	equ	?_glcdMakeLastS
                                 yncString+3
   224                           	global	glcdMakeLastSyncString@yDate
   225  000000                     glcdMakeLastSyncString@yHour	equ	?_glcdMakeLastS
                                 yncString+4
   226                           	global	glcdMakeLastSyncString@yHour
   227  000000                     glcdMakeLastSyncString@yMin	equ	?_glcdMakeLastSy
                                 ncString+5
   228                           	global	glcdMakeLastSyncString@yMin
   229  000000                     glcdDrawImage@yH	equ	??_glcdDrawImage+0
   230                           	global	glcdDrawImage@yH
   231  000000                     glcdDrawImage@yW	equ	??_glcdDrawImage+1
   232                           	global	glcdDrawImage@yW
   233  000000                     glcdDrawImage@py	equ	??_glcdDrawImage+2
   234                           	global	glcdDrawImage@py
   235  000000                     glcdDrawImage@yNum	equ	?_glcdDrawImage+0
   236                           	global	glcdDrawImage@yNum
   237  000000                     rtc24to12Hour@yHr	equ	??_rtc24to12Hour+0
   238                           	global	rtc24to12Hour@yHr
   239  000000                     rtc24to12Hour@yBin	equ	??_rtc24to12Hour+1
   240                           	global	rtc24to12Hour@yBin
   241  000000                     rtc24to12Hour@yHour	equ	?_rtc24to12Hour+0
   242                           	global	rtc24to12Hour@yHour
   243  000000                     rtc24to12Hour@pPM	equ	?_rtc24to12Hour+1
   244                           	global	rtc24to12Hour@pPM
   245  000000                     MakeDateString@yChar	equ	??_MakeDateString+0
   246                           	global	MakeDateString@yChar
   247  000000                     MakeDateString@yPos	equ	??_MakeDateString+1
   248                           	global	MakeDateString@yPos
   249  000000                     MakeDateString@sz	equ	??_MakeDateString+2
   250                           	global	MakeDateString@sz
   251  000000                     MakeDateString@ptt	equ	?_MakeDateString+0
   252                           	global	MakeDateString@ptt
   253  000000                     MakeDateString@pszBuffer	equ	?_MakeDateString+2
   254                           	global	MakeDateString@pszBuffer
   255  000000                     wwvMakeTimeStruct@wDD	equ	??_wwvMakeTimeStruct+0
   256                           	global	wwvMakeTimeStruct@wDD
   257  000000                     wwvMakeTimeStruct@nEndMonth	equ	??_wwvMakeTimeSt
                                 ruct+2
   258                           	global	wwvMakeTimeStruct@nEndMonth
   259  000000                     wwvMakeTimeStruct@pt	equ	?_wwvMakeTimeStruct+0
   260                           	global	wwvMakeTimeStruct@pt
   261  000000                     wwvMakeTimeStruct@yMin	equ	?_wwvMakeTimeStruct+2
   262                           	global	wwvMakeTimeStruct@yMin
   263  000000                     wwvMakeTimeStruct@yHour	equ	?_wwvMakeTimeStruct+
                                 3
   264                           	global	wwvMakeTimeStruct@yHour
   265  000000                     wwvMakeTimeStruct@wDays	equ	?_wwvMakeTimeStruct+
                                 4
   266                           	global	wwvMakeTimeStruct@wDays
   267  000000                     wwvMakeTimeStruct@yYears	equ	?_wwvMakeTimeStruct
                                 +6
   268                           	global	wwvMakeTimeStruct@yYears
   269  000000                     wwvMakeTimeStruct@yLeap	equ	?_wwvMakeTimeStruct+
                                 7
   270                           	global	wwvMakeTimeStruct@yLeap
   271  000000                     wwvMakeTimeStruct@yDST	equ	?_wwvMakeTimeStruct+8
   272                           	global	wwvMakeTimeStruct@yDST
   273  000000                     wwvMakeTimeStruct@yTZ	equ	?_wwvMakeTimeStruct+9
   274                           	global	wwvMakeTimeStruct@yTZ
   275  000000                     rtcBumpLastSync@yDate	equ	??_rtcBumpLastSync+0
   276                           	global	rtcBumpLastSync@yDate
   277  000000                     rtcBumpLastSync@yHr	equ	??_rtcBumpLastSync+1
   278                           	global	rtcBumpLastSync@yHr
   279  000000                     rtcBumpLastSync@yMin	equ	??_rtcBumpLastSync+2
   280                           	global	rtcBumpLastSync@yMin
   281  000000                     rtcBumpLastSync@yMonth	equ	??_rtcBumpLastSync+3
   282                           	global	rtcBumpLastSync@yMonth
   283  000000                     DrawTZSetting@y	equ	??_DrawTZSetting+0
   284                           	global	DrawTZSetting@y
   285  000000                     DrawTZSetting@yTZ	equ	?_DrawTZSetting+0
   286                           	global	DrawTZSetting@yTZ
   287  000000                     wwvRead8BitFrame@yCode	equ	??_wwvRead8BitFrame+0
   288                           	global	wwvRead8BitFrame@yCode
   289  000000                     wwvRead8BitFrame@y	equ	??_wwvRead8BitFrame+1
   290                           	global	wwvRead8BitFrame@y
   291  000000                     wwvRead8BitFrame@pResult	equ	?_wwvRead8BitFrame+
                                 0
   292                           	global	wwvRead8BitFrame@pResult
   293  000000                     glcdClearScreen@yY	equ	??_glcdClearScreen+0
   294                           	global	glcdClearScreen@yY
   295  000000                     glcdClearScreen@yX	equ	??_glcdClearScreen+1
   296                           	global	glcdClearScreen@yX
   297  000000                     glcdClearScreen@ySeg	equ	??_glcdClearScreen+2
   298                           	global	glcdClearScreen@ySeg
   299  000000                     rtcSetClock@pTime	equ	?_rtcSetClock+0
   300                           	global	rtcSetClock@pTime
   301  000000                     rtcSaveLastSync@pt	equ	?_rtcSaveLastSync+0
   302                           	global	rtcSaveLastSync@pt
   303  000000                     rtcSaveLastSync@ySet	equ	?_rtcSaveLastSync+2
   304                           	global	rtcSaveLastSync@ySet
   305  000000                     strcpy@cp	equ	??_strcpy+0
   306                           	global	strcpy@cp
   307  000000                     strcpy@to	equ	?_strcpy+0
   308                           	global	strcpy@to
   309  000000                     strcpy@from	equ	?_strcpy+2
   310                           	global	strcpy@from
   311  000000                     wwvGetBit@yHighMax	equ	??_wwvGetBit+0
   312                           	global	wwvGetBit@yHighMax
   313  000000                     wwvGetBit@yHighMin	equ	??_wwvGetBit+1
   314                           	global	wwvGetBit@yHighMin
   315  000000                     wwvGetBit@yLowMax	equ	??_wwvGetBit+2
   316                           	global	wwvGetBit@yLowMax
   317  000000                     wwvGetBit@yLowMin	equ	??_wwvGetBit+3
   318                           	global	wwvGetBit@yLowMin
   319  000000                     wwvGetBit@ySyncMin	equ	??_wwvGetBit+4
   320                           	global	wwvGetBit@ySyncMin
   321  000000                     wwvGetBit@ySyncMax	equ	??_wwvGetBit+5
   322                           	global	wwvGetBit@ySyncMax
   323  000000                     wwvGetBit@y25Count	equ	??_wwvGetBit+6
   324                           	global	wwvGetBit@y25Count
   325  000000                     strcat@cp	equ	??_strcat+0
   326                           	global	strcat@cp
   327  000000                     strcat@to	equ	?_strcat+0
   328                           	global	strcat@to
   329  000000                     strcat@from	equ	?_strcat+2
   330                           	global	strcat@from
   331  000000                     rtcWriteRam@yAddress	equ	?_rtcWriteRam+0
   332                           	global	rtcWriteRam@yAddress
   333  000000                     rtcWriteRam@yData	equ	?_rtcWriteRam+1
   334                           	global	rtcWriteRam@yData
   335  000000                     glcdWriteString@pString	equ	?_glcdWriteString+0
   336                           	global	glcdWriteString@pString
   337  000000                     Vdelay_ms@wCount	equ	??_Vdelay_ms+0
   338                           	global	Vdelay_ms@wCount
   339  000000                     Vdelay_ms@_dcnt	equ	??_Vdelay_ms+2
   340                           	global	Vdelay_ms@_dcnt
   341  000000                     Vdelay_ms@wDelay	equ	?_Vdelay_ms+0
   342                           	global	Vdelay_ms@wDelay
   343  000000                     rtcDecToBCD@yNum	equ	?_rtcDecToBCD+0
   344                           	global	rtcDecToBCD@yNum
   345  000000                     glcdMoveTo@yX	equ	?_glcdMoveTo+0
   346                           	global	glcdMoveTo@yX
   347  000000                     glcdMoveTo@yY	equ	?_glcdMoveTo+1
   348                           	global	glcdMoveTo@yY
   349  000000                     wwvGetWeekDay@r	equ	??_wwvGetWeekDay+0
   350                           	global	wwvGetWeekDay@r
   351  000000                     wwvGetWeekDay@nMonth	equ	?_wwvGetWeekDay+0
   352                           	global	wwvGetWeekDay@nMonth
   353  000000                     wwvGetWeekDay@nDate	equ	?_wwvGetWeekDay+2
   354                           	global	wwvGetWeekDay@nDate
   355  000000                     wwvGetWeekDay@nYear	equ	?_wwvGetWeekDay+4
   356                           	global	wwvGetWeekDay@nYear
   357  000000                     rtcReadRam@y	equ	??_rtcReadRam+0
   358                           	global	rtcReadRam@y
   359  000000                     rtcReadRam@yAddress	equ	?_rtcReadRam+0
   360                           	global	rtcReadRam@yAddress
   361  000000                     rtcBCDToDec@yBin	equ	??_rtcBCDToDec+0
   362                           	global	rtcBCDToDec@yBin
   363  000000                     rtcBCDToDec@yNum	equ	?_rtcBCDToDec+0
   364                           	global	rtcBCDToDec@yNum
   365  000000                     glcdDrawBitmap@yBaseCol	equ	??_glcdDrawBitmap+0
   366                           	global	glcdDrawBitmap@yBaseCol
   367  000000                     glcdDrawBitmap@yBaseSeg	equ	??_glcdDrawBitmap+1
   368                           	global	glcdDrawBitmap@yBaseSeg
   369  000000                     glcdDrawBitmap@yXAxis	equ	??_glcdDrawBitmap+2
   370                           	global	glcdDrawBitmap@yXAxis
   371  000000                     glcdDrawBitmap@yYAxis	equ	??_glcdDrawBitmap+3
   372                           	global	glcdDrawBitmap@yYAxis
   373  000000                     glcdDrawBitmap@pBMP	equ	?_glcdDrawBitmap+0
   374                           	global	glcdDrawBitmap@pBMP
   375  000000                     glcdDrawBitmap@yWidth	equ	?_glcdDrawBitmap+2
   376                           	global	glcdDrawBitmap@yWidth
   377  000000                     glcdDrawBitmap@yHeight	equ	?_glcdDrawBitmap+3
   378                           	global	glcdDrawBitmap@yHeight
   379  000000                     spiRead@yData	equ	??_spiRead+0
   380                           	global	spiRead@yData
   381  000000                     spiRead@yShift	equ	??_spiRead+1
   382                           	global	spiRead@yShift
   383  000000                     ___wmul@product	equ	??___wmul+0
   384                           	global	___wmul@product
   385  000000                     ___wmul@multiplier	equ	?___wmul+0
   386                           	global	___wmul@multiplier
   387  000000                     ___wmul@multiplicand	equ	?___wmul+2
   388                           	global	___wmul@multiplicand
   389  000000                     ___awmod@sign	equ	??___awmod+0
   390                           	global	___awmod@sign
   391  000000                     ___awmod@counter	equ	??___awmod+1
   392                           	global	___awmod@counter
   393  000000                     ___awmod@dividend	equ	?___awmod+0
   394                           	global	___awmod@dividend
   395  000000                     ___awmod@divisor	equ	?___awmod+2
   396                           	global	___awmod@divisor
   397  000000                     ___awdiv@counter	equ	??___awdiv+0
   398                           	global	___awdiv@counter
   399  000000                     ___awdiv@sign	equ	??___awdiv+1
   400                           	global	___awdiv@sign
   401  000000                     ___awdiv@quotient	equ	??___awdiv+2
   402                           	global	___awdiv@quotient
   403  000000                     ___awdiv@dividend	equ	?___awdiv+0
   404                           	global	___awdiv@dividend
   405  000000                     ___awdiv@divisor	equ	?___awdiv+2
   406                           	global	___awdiv@divisor
   407  000000                     spiWrite@yShift	equ	??_spiWrite+0
   408                           	global	spiWrite@yShift
   409  000000                     spiWrite@yByte	equ	?_spiWrite+0
   410                           	global	spiWrite@yByte
   411  000000                     glcdWriteChar@pChar	equ	??_glcdWriteChar+0
   412                           	global	glcdWriteChar@pChar
   413  000000                     glcdWriteChar@i	equ	??_glcdWriteChar+2
   414                           	global	glcdWriteChar@i
   415  000000                     glcdWriteChar@yChar	equ	?_glcdWriteChar+0
   416                           	global	glcdWriteChar@yChar
   417  000000                     glcdSetCol@yCol	equ	?_glcdSetCol+0
   418                           	global	glcdSetCol@yCol
   419  000000                     glcdSetCol@ySeg	equ	?_glcdSetCol+1
   420                           	global	glcdSetCol@ySeg
   421  000000                     glcdSetPage@yPage	equ	?_glcdSetPage+0
   422                           	global	glcdSetPage@yPage
   423  000000                     glcdSetPage@ySeg	equ	?_glcdSetPage+1
   424                           	global	glcdSetPage@ySeg
   425  000000                     glbaseWriteData@yData	equ	?_glbaseWriteData+0
   426                           	global	glbaseWriteData@yData
   427  000000                     glbaseWriteData@yDFlag	equ	?_glbaseWriteData+1
   428                           	global	glbaseWriteData@yDFlag
   429  000000                     glbaseWriteData@yCS	equ	?_glbaseWriteData+2
   430                           	global	glbaseWriteData@yCS
   431  000000                     glbaseWaitForNonBusy@yStatus	equ	??_glbaseWaitFo
                                 rNonBusy+0
   432                           	global	glbaseWaitForNonBusy@yStatus
   433  000000                     glbaseWaitForNonBusy@yCS	equ	?_glbaseWaitForNonB
                                 usy+0
   434                           	global	glbaseWaitForNonBusy@yCS
   435  000000                     glbaseEnableController@yCS	equ	?_glbaseEnableCon
                                 troller+0
   436                           	global	glbaseEnableController@yCS
   437  000000                     glbaseDisableController@yCS	equ	?_glbaseDisableC
                                 ontroller+0
   438                           	global	glbaseDisableController@yCS
   439                           ;Data sizes: Strings 0, constant 1548, data 0, b
                                 ss 0, persistent 0 stack 106
   440                           	global	_main
   441                           	global	??_main
   442                           	global	?_main
   443                           
   444                           ; *************** function _main ***************
                                 **
   445                           ; Defined at:
   446                           ;		line 92 in file "main.c"
   447                           ; Parameters:
   448                           ;		None
   449                           ; Auto variables:
   450                           ;		y           	       	type: unsigned char 
   451                           ;		w           	       	type: unsigned int 
   452                           ;		tt          	       	type: struct _TIMESTRUCT
   453                           ; Return value:
   454                           ;		type: void 
   455                           ;		size: 0
   456                           ; Registers used:
   457                           ;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, s
                                 tatus,0, tblptrl, tblptrh, tblptru, tablat, prod
                                 l, prodh, cstack
   458                           ; Tracked objects:
   459                           ;		On entry : 0/0
   460                           ;		On exit  : 0/0
   461                           ;		Unchanged: 0/0
   462                           ; Data sizes:
   463                           ;		Autos:    7
   464                           ;		Params:   0
   465                           ;		Temp:     1
   466                           ;		Total:    8
   467                           ; This function calls:
   468                           ;		_rtcInit
   469                           ;		_glcdInit
   470                           ;		_wwvInit
   471                           ;		_glcdClearScreen
   472                           ;		_rtcGetClock
   473                           ;		_DisplayTime
   474                           ;		_memcpy
   475                           ;		_rtcBCDToDec
   476                           ;		_wwvGetTime
   477                           ;		_rtcSetClock
   478                           ;		_ButtonDown
   479                           ; This function is called by:
   480                           ;		Startup code after reset
   481                           ; This function uses a non-reentrant model
   482                           ; 
   483                                   psect   text0,class=CODE,space=0,reloc=2
   484                           
   485                           	opt lm
   486                           	file	"main.c"
   487                           	line	92
   488  000000                     	__size_of_main	equ	__end_of_main-_main
   489                                   psect   text0
   490                           ;main.c: 34: asm("\tglobal __config" "1"); asm("
                                 \t__config" "1" " equ " "0xFFFF & 0xFFFF & 0xF0F
                                 F");
   491                           ;main.c: 36: asm("\tglobal __config" "2"); asm("
                                 \t__config" "2" " equ " "0xFFF9 & 0xFFFE & 0xFEF
                                 F");
   492                           ;main.c: 38: asm("\tglobal __config" "3"); asm("
                                 \t__config" "3" " equ " "0xFFFF & 0xFFFF & 0xFFF
                                 F & 0xFDFF");
   493                           ;main.c: 40: asm("\tglobal __config" "4"); asm("
                                 \t__config" "4" " equ " "0xFFFF & 0xFFFF & 0xFFF
                                 B");
   494                           ;main.c: 42: asm("\tglobal __config" "5"); asm("
                                 \t__config" "5" " equ " "0xFFFF");
   495                           ;main.c: 46: void DisplayTime(TIMESTRUCT *ptt, U
                                 INT8 yAll);
   496                           	
   497  001BC4                     _main:		; BSR set to: ?
   498                           
   499                           	opt stack 30
   500                           	line	97
   501                           ;main.c: 93: TIMESTRUCT tt;
   502                           ;main.c: 94: UINT16 w;
   503                           ;main.c: 95: UINT8 y;
   504                           ;main.c: 97: OSCCONbits.IRCF = 6;
   505  001BC4  50D3               	movf	((c:4051))&0ffh,w	;volatile
   506  001BC6  0B8F               	andlw	not (((1<<3)-1)<<4)
   507  001BC8  0960               	iorlw	(06h & ((1<<3)-1))<<4
   508  001BCA  6ED3               	movwf	((c:4051))&0ffh	;volatile
   509                           	line	98
   510                           ;main.c: 98: OSCCONbits.SCS = 0;
   511  001BCC  0EFC               	movlw	((0 & ((1<<2)-1))<<0)|not (((1<<2)-1)<<0)
   512  001BCE  16D3               	andwf	((c:4051))&0ffh	;volatile
   513                           	line	100
   514                           ;main.c: 100: ADCON0 = 0x00;
   515  001BD0  0E00               	movlw	low(0)
   516  001BD2  6EC2               	movwf	((c:4034)),c	;volatile
   517                           	line	101
   518                           ;main.c: 101: ADCON1 = 0x0F;
   519  001BD4  0E0F               	movlw	low(0Fh)
   520  001BD6  6EC1               	movwf	((c:4033)),c	;volatile
   521                           	line	102
   522                           ;main.c: 102: CMCON = 0x07;
   523  001BD8  0E07               	movlw	low(07h)
   524  001BDA  6EB4               	movwf	((c:4020)),c	;volatile
   525                           	line	103
   526                           ;main.c: 103: CVRCON = 0x00;
   527  001BDC  0E00               	movlw	low(0)
   528  001BDE  6EB5               	movwf	((c:4021)),c	;volatile
   529                           	line	104
   530                           ;main.c: 104: CCP1CON = 0x00;
   531  001BE0  0E00               	movlw	low(0)
   532  001BE2  6EBD               	movwf	((c:4029)),c	;volatile
   533                           	line	105
   534                           ;main.c: 105: CCP2CON = 0x00;
   535  001BE4  0E00               	movlw	low(0)
   536  001BE6  6EBA               	movwf	((c:4026)),c	;volatile
   537                           	line	107
   538                           ;main.c: 107: PORTA = 0;
   539  001BE8  0E00               	movlw	low(0)
   540  001BEA  6E80               	movwf	((c:3968)),c	;volatile
   541                           	line	108
   542                           ;main.c: 108: PORTB = 0;
   543  001BEC  0E00               	movlw	low(0)
   544  001BEE  6E81               	movwf	((c:3969)),c	;volatile
   545                           	line	109
   546                           ;main.c: 109: PORTC = 0;
   547  001BF0  0E00               	movlw	low(0)
   548  001BF2  6E82               	movwf	((c:3970)),c	;volatile
   549                           	line	110
   550                           ;main.c: 110: TRISA = 0b11000100;
   551  001BF4  0EC4               	movlw	low(0C4h)
   552  001BF6  6E92               	movwf	((c:3986)),c	;volatile
   553                           	line	111
   554                           ;main.c: 111: TRISB = 0b00000100;
   555  001BF8  0E04               	movlw	low(04h)
   556  001BFA  6E93               	movwf	((c:3987)),c	;volatile
   557                           	line	112
   558                           ;main.c: 112: TRISC = 0b11111111;
   559  001BFC  6894               	setf	((c:3988)),c	;volatile
   560                           	line	113
   561                           ;main.c: 113: RBPU = 0;
   562  001BFE  9EF1               	bcf	c:(32655/8),(32655)&7	;volatile
   563                           	line	115
   564                           ;main.c: 115: g_yUpdate = 0;
   565  001C00  0E00               	movlw	low(0)
   566  001C02  6E0D               	movwf	((c:13)),c	;volatile
   567                           	line	116
   568                           ;main.c: 116: rtcInit();
   569  001C04  ECF2  F00E         	call	_rtcInit	;wreg free
   570                           	line	117
   571                           ;main.c: 117: glcdInit();
   572  001C08  EC18  F018         	call	_glcdInit	;wreg free
   573                           	line	118
   574                           ;main.c: 118: wwvInit();
   575  001C0C  EC05  F01B         	call	_wwvInit	;wreg free
   576                           	line	119
   577                           ;main.c: 119: glcdClearScreen();
   578  001C10  EC5D  F015         	call	_glcdClearScreen	;wreg free
   579                           	line	121
   580                           ;main.c: 121: rtcGetClock(&tt);
   581  001C14  0101               	movlb	1	; () banked
   582  001C16  0E00               	movlw	low(main@tt)
   583  001C18  0101               	movlb	1	; () banked
   584  001C1A  0101               	movlb	1	; () banked
   585  001C1C  6F08               	movwf	((?_rtcGetClock))&0ffh
   586  001C1E  0101               	movlb	1	; () banked
   587  001C20  0E01               	movlw	high(main@tt)
   588  001C22  0101               	movlb	1	; () banked
   589  001C24  6F09               	movwf	((?_rtcGetClock+1))&0ffh
   590  001C26  EC4C  F016         	call	_rtcGetClock	;wreg free
   591                           	line	122
   592                           ;main.c: 122: DisplayTime(&tt, 1);
   593  001C2A  0101               	movlb	1	; () banked
   594  001C2C  6F07               	movwf	(??_main+7+0)&0ffh
   595  001C2E  0E01               	movlw	low(01h)
   596  001C30  0101               	movlb	1	; () banked
   597  001C32  0101               	movlb	1	; () banked
   598  001C34  6F0A               	movwf	(0+(?_DisplayTime+02h))&0ffh
   599  001C36  0101               	movlb	1	; () banked
   600  001C38  5107               	movf	(??_main+7+0)&0ffh,w
   601  001C3A  0101               	movlb	1	; () banked
   602  001C3C  0E00               	movlw	low(main@tt)
   603  001C3E  0101               	movlb	1	; () banked
   604  001C40  0101               	movlb	1	; () banked
   605  001C42  6F08               	movwf	((?_DisplayTime))&0ffh
   606  001C44  0101               	movlb	1	; () banked
   607  001C46  0E01               	movlw	high(main@tt)
   608  001C48  0101               	movlb	1	; () banked
   609  001C4A  6F09               	movwf	((?_DisplayTime+1))&0ffh
   610  001C4C  EC34  F004         	call	_DisplayTime	;wreg free
   611                           	line	129
   612                           ;main.c: 129: while(1)
   613                           	
   614  001C50                     l616:		; BSR set to: ?
   615                           
   616                           	line	131
   617                           ;main.c: 130: {
   618                           ;main.c: 131: rtcGetClock(&tt);
   619  001C50  0101               	movlb	1	; () banked
   620  001C52  0E00               	movlw	low(main@tt)
   621  001C54  0101               	movlb	1	; () banked
   622  001C56  0101               	movlb	1	; () banked
   623  001C58  6F08               	movwf	((?_rtcGetClock))&0ffh
   624  001C5A  0101               	movlb	1	; () banked
   625  001C5C  0E01               	movlw	high(main@tt)
   626  001C5E  0101               	movlb	1	; () banked
   627  001C60  6F09               	movwf	((?_rtcGetClock+1))&0ffh
   628  001C62  EC4C  F016         	call	_rtcGetClock	;wreg free
   629                           	line	133
   630                           ;main.c: 133: if(g_ts.sec != tt.sec)
   631  001C66  5000               	movf	((c:0)),c,w	;volatile
   632  001C68  0101               	movlb	1	; () banked
   633  001C6A  0101               	movlb	1	; () banked
   634  001C6C  1900               	xorwf	((main@tt))&0ffh,w
   635  001C6E  B4D8               	btfsc	status,2
   636  001C70  EF3C  F00E         	goto	u3541
   637  001C74  EF3E  F00E         	goto	u3540
   638  001C78                     u3541:
   639  001C78  EFE4  F00E         	goto	l618
   640  001C7C                     u3540:
   641                           	line	136
   642                           ;main.c: 134: {
   643                           ;main.c: 136: DisplayTime(&tt, 0);
   644  001C7C  0101               	movlb	1	; () banked
   645  001C7E  6F07               	movwf	(??_main+7+0)&0ffh
   646  001C80  0E00               	movlw	low(0)
   647  001C82  0101               	movlb	1	; () banked
   648  001C84  0101               	movlb	1	; () banked
   649  001C86  6F0A               	movwf	(0+(?_DisplayTime+02h))&0ffh
   650  001C88  0101               	movlb	1	; () banked
   651  001C8A  5107               	movf	(??_main+7+0)&0ffh,w
   652  001C8C  0101               	movlb	1	; () banked
   653  001C8E  0E00               	movlw	low(main@tt)
   654  001C90  0101               	movlb	1	; () banked
   655  001C92  0101               	movlb	1	; () banked
   656  001C94  6F08               	movwf	((?_DisplayTime))&0ffh
   657  001C96  0101               	movlb	1	; () banked
   658  001C98  0E01               	movlw	high(main@tt)
   659  001C9A  0101               	movlb	1	; () banked
   660  001C9C  6F09               	movwf	((?_DisplayTime+1))&0ffh
   661  001C9E  EC34  F004         	call	_DisplayTime	;wreg free
   662                           	line	137
   663                           ;main.c: 137: memcpy(&g_ts, &tt, sizeof(TIMESTRU
                                 CT));
   664  001CA2  0E07               	movlw	low(07h)
   665  001CA4  0101               	movlb	1	; () banked
   666  001CA6  0101               	movlb	1	; () banked
   667  001CA8  6F0C               	movwf	(0+(?_memcpy+04h))&0ffh
   668  001CAA  0E00               	movlw	high(07h)
   669  001CAC  0101               	movlb	1	; () banked
   670  001CAE  6F0D               	movwf	(1+(?_memcpy+04h))&0ffh
   671  001CB0  0101               	movlb	1	; () banked
   672  001CB2  0E00               	movlw	low(main@tt)
   673  001CB4  0101               	movlb	1	; () banked
   674  001CB6  0101               	movlb	1	; () banked
   675  001CB8  6F0A               	movwf	(0+(?_memcpy+02h))&0ffh
   676  001CBA  0101               	movlb	1	; () banked
   677  001CBC  0E01               	movlw	high(main@tt)
   678  001CBE  0101               	movlb	1	; () banked
   679  001CC0  6F0B               	movwf	(1+(?_memcpy+02h))&0ffh
   680  001CC2  0E00               	movlw	low((c:0))	;volatile
   681  001CC4  0101               	movlb	1	; () banked
   682  001CC6  0101               	movlb	1	; () banked
   683  001CC8  6F08               	movwf	((?_memcpy))&0ffh
   684  001CCA  0E00               	movlw	high((c:0))	;volatile
   685  001CCC  0101               	movlb	1	; () banked
   686  001CCE  6F09               	movwf	((?_memcpy+1))&0ffh
   687  001CD0  ECBC  F019         	call	_memcpy	;wreg free
   688                           	line	140
   689                           ;main.c: 140: if(tt.sec == 0x01 && tt.min == 0x0
                                 1)
   690  001CD4  0101               	movlb	1	; () banked
   691  001CD6  0101               	movlb	1	; () banked
   692  001CD8  0500               	decf	((main@tt))&0ffh,w
   693                           
   694  001CDA  A4D8               	btfss	status,2
   695  001CDC  EF72  F00E         	goto	u3551
   696  001CE0  EF74  F00E         	goto	u3550
   697  001CE4                     u3551:
   698  001CE4  EF8D  F00E         	goto	l619
   699  001CE8                     u3550:
   700  001CE8  0101               	movlb	1	; () banked
   701  001CEA  0101               	movlb	1	; () banked
   702  001CEC  0501               	decf	(0+(main@tt+01h))&0ffh,w
   703                           
   704  001CEE  A4D8               	btfss	status,2
   705  001CF0  EF7C  F00E         	goto	u3561
   706  001CF4  EF7E  F00E         	goto	u3560
   707  001CF8                     u3561:
   708  001CF8  EF8D  F00E         	goto	l619
   709  001CFC                     u3560:
   710                           	line	142
   711                           ;main.c: 141: {
   712                           ;main.c: 142: if( (rtcBCDToDec(tt.hr) & 0x03) ==
                                  0x03)
   713  001CFC  C102  F143         	movff	0+(main@tt+02h),(?_rtcBCDToDec)
   714  001D00  EC35  F01B         	call	_rtcBCDToDec	;wreg free
   715  001D04  0B03               	andlw	low(03h)
   716  001D06  0A03               	xorlw	03h
   717  001D08  A4D8               	btfss	status,2
   718  001D0A  EF89  F00E         	goto	u3571
   719  001D0E  EF8B  F00E         	goto	u3570
   720  001D12                     u3571:
   721  001D12  EF8D  F00E         	goto	l619
   722  001D16                     u3570:
   723                           	line	143
   724                           ;main.c: 143: g_yUpdate = 1;
   725  001D16  0E01               	movlw	low(01h)
   726  001D18  6E0D               	movwf	((c:13)),c	;volatile
   727                           	
   728  001D1A                     l620:		; BSR set to: ?
   729                           
   730                           	line	144
   731                           	
   732  001D1A                     l619:		; BSR set to: ?
   733                           
   734                           	line	147
   735                           ;main.c: 144: }
   736                           ;main.c: 147: if(g_yUpdate)
   737  001D1A  500D               	movf	((c:13)),c,w	;volatile
   738  001D1C  B4D8               	btfsc	status,2
   739  001D1E  EF93  F00E         	goto	u3581
   740  001D22  EF95  F00E         	goto	u3580
   741  001D26                     u3581:
   742  001D26  EFE4  F00E         	goto	l618
   743  001D2A                     u3580:
   744                           	line	149
   745                           ;main.c: 148: {
   746                           ;main.c: 149: g_yUpdate = 0;
   747  001D2A  0E00               	movlw	low(0)
   748  001D2C  6E0D               	movwf	((c:13)),c	;volatile
   749                           	line	150
   750                           ;main.c: 150: if(wwvGetTime(&tt))
   751  001D2E  0101               	movlb	1	; () banked
   752  001D30  0E00               	movlw	low(main@tt)
   753  001D32  0101               	movlb	1	; () banked
   754  001D34  0101               	movlb	1	; () banked
   755  001D36  6F08               	movwf	((?_wwvGetTime))&0ffh
   756  001D38  0101               	movlb	1	; () banked
   757  001D3A  0E01               	movlw	high(main@tt)
   758  001D3C  0101               	movlb	1	; () banked
   759  001D3E  6F09               	movwf	((?_wwvGetTime+1))&0ffh
   760  001D40  EC1D  F000         	call	_wwvGetTime	;wreg free
   761  001D44  0900               	iorlw	0
   762  001D46  B4D8               	btfsc	status,2
   763  001D48  EFA8  F00E         	goto	u3591
   764  001D4C  EFAA  F00E         	goto	u3590
   765  001D50                     u3591:
   766  001D50  EFB5  F00E         	goto	l622
   767  001D54                     u3590:
   768                           	line	151
   769                           ;main.c: 151: rtcSetClock(&tt);
   770  001D54  0101               	movlb	1	; () banked
   771  001D56  0E00               	movlw	low(main@tt)
   772  001D58  0101               	movlb	1	; () banked
   773  001D5A  0101               	movlb	1	; () banked
   774  001D5C  6F12               	movwf	((?_rtcSetClock))&0ffh
   775  001D5E  0101               	movlb	1	; () banked
   776  001D60  0E01               	movlw	high(main@tt)
   777  001D62  0101               	movlb	1	; () banked
   778  001D64  6F13               	movwf	((?_rtcSetClock+1))&0ffh
   779  001D66  ECF7  F012         	call	_rtcSetClock	;wreg free
   780                           	
   781  001D6A                     l622:		; BSR set to: ?
   782                           
   783                           	line	152
   784                           ;main.c: 152: LATA0 = 0;
   785  001D6A  9089               	bcf	c:(31816/8),(31816)&7	;volatile
   786                           	line	153
   787                           ;main.c: 153: glcdClearScreen();
   788  001D6C  EC5D  F015         	call	_glcdClearScreen	;wreg free
   789                           	line	154
   790                           ;main.c: 154: DisplayTime(&tt, 1);
   791  001D70  0101               	movlb	1	; () banked
   792  001D72  6F07               	movwf	(??_main+7+0)&0ffh
   793  001D74  0E01               	movlw	low(01h)
   794  001D76  0101               	movlb	1	; () banked
   795  001D78  0101               	movlb	1	; () banked
   796  001D7A  6F0A               	movwf	(0+(?_DisplayTime+02h))&0ffh
   797  001D7C  0101               	movlb	1	; () banked
   798  001D7E  5107               	movf	(??_main+7+0)&0ffh,w
   799  001D80  0101               	movlb	1	; () banked
   800  001D82  0E00               	movlw	low(main@tt)
   801  001D84  0101               	movlb	1	; () banked
   802  001D86  0101               	movlb	1	; () banked
   803  001D88  6F08               	movwf	((?_DisplayTime))&0ffh
   804  001D8A  0101               	movlb	1	; () banked
   805  001D8C  0E01               	movlw	high(main@tt)
   806  001D8E  0101               	movlb	1	; () banked
   807  001D90  6F09               	movwf	((?_DisplayTime+1))&0ffh
   808  001D92  EC34  F004         	call	_DisplayTime	;wreg free
   809                           	line	155
   810                           ;main.c: 155: memcpy(&g_ts, &tt, sizeof(TIMESTRU
                                 CT));
   811  001D96  0E07               	movlw	low(07h)
   812  001D98  0101               	movlb	1	; () banked
   813  001D9A  0101               	movlb	1	; () banked
   814  001D9C  6F0C               	movwf	(0+(?_memcpy+04h))&0ffh
   815  001D9E  0E00               	movlw	high(07h)
   816  001DA0  0101               	movlb	1	; () banked
   817  001DA2  6F0D               	movwf	(1+(?_memcpy+04h))&0ffh
   818  001DA4  0101               	movlb	1	; () banked
   819  001DA6  0E00               	movlw	low(main@tt)
   820  001DA8  0101               	movlb	1	; () banked
   821  001DAA  0101               	movlb	1	; () banked
   822  001DAC  6F0A               	movwf	(0+(?_memcpy+02h))&0ffh
   823  001DAE  0101               	movlb	1	; () banked
   824  001DB0  0E01               	movlw	high(main@tt)
   825  001DB2  0101               	movlb	1	; () banked
   826  001DB4  6F0B               	movwf	(1+(?_memcpy+02h))&0ffh
   827  001DB6  0E00               	movlw	low((c:0))	;volatile
   828  001DB8  0101               	movlb	1	; () banked
   829  001DBA  0101               	movlb	1	; () banked
   830  001DBC  6F08               	movwf	((?_memcpy))&0ffh
   831  001DBE  0E00               	movlw	high((c:0))	;volatile
   832  001DC0  0101               	movlb	1	; () banked
   833  001DC2  6F09               	movwf	((?_memcpy+1))&0ffh
   834  001DC4  ECBC  F019         	call	_memcpy	;wreg free
   835                           	line	157
   836                           	
   837  001DC8                     l621:		; BSR set to: ?
   838                           
   839                           	line	158
   840                           	
   841  001DC8                     l618:		; BSR set to: ?
   842                           
   843                           	line	160
   844                           ;main.c: 157: }
   845                           ;main.c: 158: }
   846                           ;main.c: 160: if((!RB2))
   847  001DC8  B481               	btfsc	c:(31754/8),(31754)&7	;volatile
   848  001DCA  EFE9  F00E         	goto	u3601
   849  001DCE  EFEB  F00E         	goto	u3600
   850  001DD2                     u3601:
   851  001DD2  EFEE  F00E         	goto	l615
   852  001DD6                     u3600:
   853                           	line	162
   854                           ;main.c: 161: {
   855                           ;main.c: 162: LATA0 = 1;
   856  001DD6  8089               	bsf	c:(31816/8),(31816)&7	;volatile
   857                           	line	163
   858                           ;main.c: 163: ButtonDown();
   859  001DD8  EC44  F00A         	call	_ButtonDown	;wreg free
   860                           	line	164
   861                           	
   862  001DDC                     l623:		; BSR set to: ?
   863                           
   864                           	line	165
   865                           	
   866  001DDC                     l615:		; BSR set to: ?
   867                           
   868                           	line	129
   869  001DDC  EF28  F00E         	goto	l616
   870                           	global	start
   871  001DE0  EF0C  F000         	goto	start
   872                           	opt stack 0
   873                           GLOBAL __end_of_main
   874  001DE4                     	__end_of_main:
   875                           	FNSIZE	_main,8,0
   876                           ; =============== function _main ends ==========
                                 ==
   877                           
   878                                   psect   text1,class=CODE,space=0,reloc=2
   879                           	line	168
   880                           
   881                           	opt lm
   882                           	signat	_main,88
   883                           	global	_rtcGetClock
   884                           	global	??_rtcGetClock
   885                           	global	?_rtcGetClock
   886                           
   887                           ; *************** function _rtcGetClock ********
                                 *********
   888                           ; Defined at:
   889                           ;		line 192 in file "rtc.c"
   890                           ; Parameters:
   891                           ;		pTime          size:   2offs:   0	type: PTR s
                                 truct _TIMESTRUCT; Largest target is 7
   892                           ;		 -> main@tt(7), 
   893                           ; Auto variables:
   894                           ;		None
   895                           ; Return value:
   896                           ;		type: void 
   897                           ;		size: 0
   898                           ; Registers used:
   899                           ;		wreg, fsr0l, fsr0h, status,2, status,0, cstac
                                 k
   900                           ; Tracked objects:
   901                           ;		On entry : 0/0
   902                           ;		On exit  : 0/0
   903                           ;		Unchanged: 0/0
   904                           ; Data sizes:
   905                           ;		Autos:    0
   906                           ;		Params:   2
   907                           ;		Temp:     1
   908                           ;		Total:    3
   909                           ; This function calls:
   910                           ;		_spiChipSelect
   911                           ;		_spiWrite
   912                           ;		_spiRead
   913                           ;		_spiChipDeselect
   914                           ; This function is called by:
   915                           ;		_main
   916                           ; This function uses a non-reentrant model
   917                           ; 
   918                           	file	"rtc.c"
   919                           	line	192
   920  000000                     	__size_of_rtcGetClock	equ	__end_of_rtcGetClock-
                                 _rtcGetClock
   921                           ;rtc.c: 191: void rtcGetClock(TIMESTRUCT *pTime)
   922                           ;rtc.c: 192: {
   923                           	
   924  002C98                     _rtcGetClock:		; BSR set to: ?
   925                           
   926                           	opt stack 29
   927                           	line	193
   928                           ;rtc.c: 193: spiChipSelect();
   929  002C98  ECBF  F01B         	call	_spiChipSelect	;wreg free
   930                           	line	195
   931                           ;rtc.c: 195: spiWrite((UINT8)0xBF);
   932  002C9C  0101               	movlb	1	; () banked
   933  002C9E  6F0A               	movwf	(??_rtcGetClock+0+0)&0ffh
   934  002CA0  0EBF               	movlw	low(0BFh)
   935  002CA2  0101               	movlb	1	; () banked
   936  002CA4  0101               	movlb	1	; () banked
   937  002CA6  6F37               	movwf	((?_spiWrite))&0ffh
   938  002CA8  0101               	movlb	1	; () banked
   939  002CAA  510A               	movf	(??_rtcGetClock+0+0)&0ffh,w
   940  002CAC  EC8C  F019         	call	_spiWrite	;wreg free
   941                           	line	197
   942                           ;rtc.c: 197: pTime->sec = spiRead();
   943  002CB0  EC1C  F019         	call	_spiRead	;wreg free
   944  002CB4  C108  FFE9         	movff	(rtcGetClock@pTime),fsr0l
   945  002CB8  C109  FFEA         	movff	(rtcGetClock@pTime+1),fsr0h
   946  002CBC  6EEF               	movwf	indf0
   947                           
   948                           	line	198
   949                           ;rtc.c: 198: pTime->min = spiRead();
   950  002CBE  0E01               	movlw	low(01h)
   951  002CC0  0101               	movlb	1	; () banked
   952  002CC2  0101               	movlb	1	; () banked
   953  002CC4  2508               	addwf	((rtcGetClock@pTime))&0ffh,w
   954  002CC6  6EE9               	movwf	c:fsr0l
   955  002CC8  0E00               	movlw	high(01h)
   956  002CCA  0101               	movlb	1	; () banked
   957  002CCC  0101               	movlb	1	; () banked
   958  002CCE  2109               	addwfc	((rtcGetClock@pTime+1))&0ffh,w
   959  002CD0  6EEA               	movwf	1+c:fsr0l
   960  002CD2  EC1C  F019         	call	_spiRead	;wreg free
   961  002CD6  6EEF               	movwf	indf0
   962                           
   963                           	line	199
   964                           ;rtc.c: 199: pTime->hr = spiRead();
   965  002CD8  0E02               	movlw	low(02h)
   966  002CDA  0101               	movlb	1	; () banked
   967  002CDC  0101               	movlb	1	; () banked
   968  002CDE  2508               	addwf	((rtcGetClock@pTime))&0ffh,w
   969  002CE0  6EE9               	movwf	c:fsr0l
   970  002CE2  0E00               	movlw	high(02h)
   971  002CE4  0101               	movlb	1	; () banked
   972  002CE6  0101               	movlb	1	; () banked
   973  002CE8  2109               	addwfc	((rtcGetClock@pTime+1))&0ffh,w
   974  002CEA  6EEA               	movwf	1+c:fsr0l
   975  002CEC  EC1C  F019         	call	_spiRead	;wreg free
   976  002CF0  6EEF               	movwf	indf0
   977                           
   978                           	line	200
   979                           ;rtc.c: 200: pTime->date = spiRead();
   980  002CF2  0E03               	movlw	low(03h)
   981  002CF4  0101               	movlb	1	; () banked
   982  002CF6  0101               	movlb	1	; () banked
   983  002CF8  2508               	addwf	((rtcGetClock@pTime))&0ffh,w
   984  002CFA  6EE9               	movwf	c:fsr0l
   985  002CFC  0E00               	movlw	high(03h)
   986  002CFE  0101               	movlb	1	; () banked
   987  002D00  0101               	movlb	1	; () banked
   988  002D02  2109               	addwfc	((rtcGetClock@pTime+1))&0ffh,w
   989  002D04  6EEA               	movwf	1+c:fsr0l
   990  002D06  EC1C  F019         	call	_spiRead	;wreg free
   991  002D0A  6EEF               	movwf	indf0
   992                           
   993                           	line	201
   994                           ;rtc.c: 201: pTime->month = spiRead();
   995  002D0C  0E04               	movlw	low(04h)
   996  002D0E  0101               	movlb	1	; () banked
   997  002D10  0101               	movlb	1	; () banked
   998  002D12  2508               	addwf	((rtcGetClock@pTime))&0ffh,w
   999  002D14  6EE9               	movwf	c:fsr0l
  1000  002D16  0E00               	movlw	high(04h)
  1001  002D18  0101               	movlb	1	; () banked
  1002  002D1A  0101               	movlb	1	; () banked
  1003  002D1C  2109               	addwfc	((rtcGetClock@pTime+1))&0ffh,w
  1004  002D1E  6EEA               	movwf	1+c:fsr0l
  1005  002D20  EC1C  F019         	call	_spiRead	;wreg free
  1006  002D24  6EEF               	movwf	indf0
  1007                           
  1008                           	line	202
  1009                           ;rtc.c: 202: pTime->day = spiRead();
  1010  002D26  0E05               	movlw	low(05h)
  1011  002D28  0101               	movlb	1	; () banked
  1012  002D2A  0101               	movlb	1	; () banked
  1013  002D2C  2508               	addwf	((rtcGetClock@pTime))&0ffh,w
  1014  002D2E  6EE9               	movwf	c:fsr0l
  1015  002D30  0E00               	movlw	high(05h)
  1016  002D32  0101               	movlb	1	; () banked
  1017  002D34  0101               	movlb	1	; () banked
  1018  002D36  2109               	addwfc	((rtcGetClock@pTime+1))&0ffh,w
  1019  002D38  6EEA               	movwf	1+c:fsr0l
  1020  002D3A  EC1C  F019         	call	_spiRead	;wreg free
  1021  002D3E  6EEF               	movwf	indf0
  1022                           
  1023                           	line	203
  1024                           ;rtc.c: 203: pTime->year = spiRead();
  1025  002D40  0E06               	movlw	low(06h)
  1026  002D42  0101               	movlb	1	; () banked
  1027  002D44  0101               	movlb	1	; () banked
  1028  002D46  2508               	addwf	((rtcGetClock@pTime))&0ffh,w
  1029  002D48  6EE9               	movwf	c:fsr0l
  1030  002D4A  0E00               	movlw	high(06h)
  1031  002D4C  0101               	movlb	1	; () banked
  1032  002D4E  0101               	movlb	1	; () banked
  1033  002D50  2109               	addwfc	((rtcGetClock@pTime+1))&0ffh,w
  1034  002D52  6EEA               	movwf	1+c:fsr0l
  1035  002D54  EC1C  F019         	call	_spiRead	;wreg free
  1036  002D58  6EEF               	movwf	indf0
  1037                           
  1038                           	line	205
  1039                           ;rtc.c: 205: spiChipDeselect();
  1040  002D5A  ECBB  F01B         	call	_spiChipDeselect	;wreg free
  1041                           	line	207
  1042                           ;rtc.c: 207: }
  1043  002D5E                     l863:
  1044                           			; BSR set to: ?
  1045                           
  1046  002D5E  0012               	return
  1047                           	opt stack 0
  1048                           GLOBAL __end_of_rtcGetClock
  1049  002D60                     	__end_of_rtcGetClock:
  1050                           	FNSIZE	_rtcGetClock,1,2
  1051                           ; =============== function _rtcGetClock ends ===
                                 =========
  1052                           
  1053                           	signat	_rtcGetClock,4216
  1054                           	global	_wwvInit
  1055                           	global	??_wwvInit
  1056                           	global	?_wwvInit
  1057                           
  1058                           ; *************** function _wwvInit ************
                                 *****
  1059                           ; Defined at:
  1060                           ;		line 78 in file "wwv.c"
  1061                           ; Parameters:
  1062                           ;		None
  1063                           ; Auto variables:
  1064                           ;		y           	       	type: unsigned char 
  1065                           ; Return value:
  1066                           ;		type: void 
  1067                           ;		size: 0
  1068                           ; Registers used:
  1069                           ;		wreg, status,2
  1070                           ; Tracked objects:
  1071                           ;		On entry : 0/0
  1072                           ;		On exit  : 0/0
  1073                           ;		Unchanged: 0/0
  1074                           ; Data sizes:
  1075                           ;		Autos:    0
  1076                           ;		Params:   0
  1077                           ;		Temp:     0
  1078                           ;		Total:    0
  1079                           ; This function calls:
  1080                           ;		Nothing
  1081                           ; This function is called by:
  1082                           ;		_main
  1083                           ; This function uses a non-reentrant model
  1084                           ; 
  1085                                   psect   text2,class=CODE,space=0,reloc=2
  1086                           
  1087                           	opt lm
  1088                           	file	"wwv.c"
  1089                           	line	78
  1090  000000                     	__size_of_wwvInit	equ	__end_of_wwvInit-_wwvInit
  1091                           ;wwv.c: 42: const UINT16 wEOM[13][2] = {
  1092                           ;wwv.c: 43: {0,0},
  1093                           ;wwv.c: 44: {31,31},
  1094                           ;wwv.c: 45: {59,60},
  1095                           ;wwv.c: 46: {90,91},
  1096                           ;wwv.c: 47: {120,121},
  1097                           ;wwv.c: 48: {151,152},
  1098                           ;wwv.c: 49: {181,182},
  1099                           ;wwv.c: 50: {212,213},
  1100                           ;wwv.c: 51: {243,244},
  1101                           ;wwv.c: 52: {273,274},
  1102                           ;wwv.c: 53: {304,305},
  1103                           ;wwv.c: 54: {334,335},
  1104                           ;wwv.c: 55: {365,366},
  1105                           ;wwv.c: 56: };
  1106                           ;wwv.c: 58: const UINT8 cszSync[] = "Syncing Up.
                                 ..";
  1107                           ;wwv.c: 59: const UINT8 cszLastSync[] = "Last Sy
                                 nc Times: ";
  1108                           ;wwv.c: 77: void wwvInit(void)
  1109                           ;wwv.c: 78: {
  1110                           	
  1111  00360A                     _wwvInit:		; BSR set to: ?
  1112                           
  1113                           	opt stack 29
  1114                           	line	81
  1115  00360A  9089               	bcf	c:(31816/8),(31816)&7	;volatile
  1116                           	line	82
  1117                           ;wwv.c: 82: RCONbits.IPEN = 0;
  1118  00360C  9ED0               	bcf	((c:4048)),c,7	;volatile
  1119                           	line	85
  1120                           ;wwv.c: 85: T0CONbits.T08BIT = 1;
  1121  00360E  8CD5               	bsf	((c:4053)),c,6	;volatile
  1122                           	line	86
  1123                           ;wwv.c: 86: T0CONbits.T0CS = 0;
  1124  003610  9AD5               	bcf	((c:4053)),c,5	;volatile
  1125                           	line	87
  1126                           ;wwv.c: 87: T0CONbits.PSA = 0;
  1127  003612  96D5               	bcf	((c:4053)),c,3	;volatile
  1128                           	line	88
  1129                           ;wwv.c: 88: T0CONbits.T0PS = 7;
  1130  003614  80D5               		bsf	((c:4053))&0ffh, 0+0	;volatile
  1131  003616  82D5               	bsf	((c:4053))&0ffh, 0+1	;volatile
  1132  003618  84D5               	bsf	((c:4053))&0ffh, 0+2	;volatile
  1133  00361A  000B               	tblrd+*
  1134  00361C  000E               	tblwt*-
  1135                           	line	90
  1136                           ;wwv.c: 90: INTCONbits.TMR0IE = 0;
  1137  00361E  9AF2               	bcf	((c:4082)),c,5	;volatile
  1138                           	line	91
  1139                           ;wwv.c: 91: INTCONbits.TMR0IF = 0;
  1140  003620  94F2               	bcf	((c:4082)),c,2	;volatile
  1141                           	line	92
  1142                           ;wwv.c: 92: T0CONbits.TMR0ON = 1;
  1143  003622  8ED5               	bsf	((c:4053)),c,7	;volatile
  1144                           	line	95
  1145                           ;wwv.c: 95: T1CONbits.TMR1ON = 0;
  1146  003624  90CD               	bcf	((c:4045)),c,0	;volatile
  1147                           	line	96
  1148                           ;wwv.c: 96: T1CONbits.RD16 = 0;
  1149  003626  9ECD               	bcf	((c:4045)),c,7	;volatile
  1150                           	line	97
  1151                           ;wwv.c: 97: T1CONbits.T1CKPS = 3;
  1152  003628  0E30               	movlw	(03h & ((1<<2)-1))<<4
  1153  00362A  12CD               	iorwf	((c:4045))&0ffh	;volatile
  1154                           	line	98
  1155                           ;wwv.c: 98: T1CONbits.T1OSCEN = 0;
  1156  00362C  96CD               	bcf	((c:4045)),c,3	;volatile
  1157                           	line	99
  1158                           ;wwv.c: 99: T1CONbits.TMR1CS = 0;
  1159  00362E  92CD               	bcf	((c:4045)),c,1	;volatile
  1160                           	line	100
  1161                           ;wwv.c: 100: PIR1bits.TMR1IF = 0;
  1162  003630  909E               	bcf	((c:3998)),c,0	;volatile
  1163                           	line	101
  1164                           ;wwv.c: 101: PIE1bits.TMR1IE = 1;
  1165  003632  809D               	bsf	((c:3997)),c,0	;volatile
  1166                           	line	103
  1167                           ;wwv.c: 103: INTCONbits.GIE = 1;
  1168  003634  8EF2               	bsf	((c:4082)),c,7	;volatile
  1169                           	line	104
  1170                           ;wwv.c: 104: INTCONbits.PEIE = 1;
  1171  003636  8CF2               	bsf	((c:4082)),c,6	;volatile
  1172                           	line	106
  1173                           ;wwv.c: 106: }
  1174  003638                     l1251:
  1175                           			; BSR set to: ?
  1176                           
  1177  003638  0012               	return
  1178                           	opt stack 0
  1179                           GLOBAL __end_of_wwvInit
  1180  00363A                     	__end_of_wwvInit:
  1181                           	FNSIZE	_wwvInit,0,0
  1182                           ; =============== function _wwvInit ends =======
                                 =====
  1183                           
  1184                           	signat	_wwvInit,88
  1185                           	global	_glcdInit
  1186                           	global	??_glcdInit
  1187                           	global	?_glcdInit
  1188                           
  1189                           ; *************** function _glcdInit ***********
                                 ******
  1190                           ; Defined at:
  1191                           ;		line 45 in file "glcd.c"
  1192                           ; Parameters:
  1193                           ;		None
  1194                           ; Auto variables:
  1195                           ;		y           	       	type: unsigned char 
  1196                           ; Return value:
  1197                           ;		type: void 
  1198                           ;		size: 0
  1199                           ; Registers used:
  1200                           ;		wreg, status,2, status,0, cstack
  1201                           ; Tracked objects:
  1202                           ;		On entry : 0/0
  1203                           ;		On exit  : 0/0
  1204                           ;		Unchanged: 0/0
  1205                           ; Data sizes:
  1206                           ;		Autos:    1
  1207                           ;		Params:   0
  1208                           ;		Temp:     2
  1209                           ;		Total:    3
  1210                           ; This function calls:
  1211                           ;		_glbaseInit
  1212                           ;		_glbaseWriteData
  1213                           ; This function is called by:
  1214                           ;		_main
  1215                           ; This function uses a non-reentrant model
  1216                           ; 
  1217                                   psect   text3,class=CODE,space=0,reloc=2
  1218                           
  1219                           	opt lm
  1220                           	file	"glcd.c"
  1221                           	line	45
  1222  000000                     	__size_of_glcdInit	equ	__end_of_glcdInit-_glcdI
                                 nit
  1223                           ;glcd.c: 44: void glcdInit(void)
  1224                           ;glcd.c: 45: {
  1225                           	
  1226  003030                     _glcdInit:		; BSR set to: ?
  1227                           
  1228                           	opt stack 29
  1229                           	line	48
  1230  003030  ECEB  F01A         	call	_glbaseInit	;wreg free
  1231                           	line	49
  1232                           ;glcd.c: 49: s_yLastSeg = 0;
  1233  003034  0E00               	movlw	low(0)
  1234  003036  6E07               	movwf	((c:7)),c	;volatile
  1235                           	line	50
  1236                           ;glcd.c: 50: s_yLastCol = 0;
  1237  003038  0E00               	movlw	low(0)
  1238  00303A  6E0A               	movwf	((c:10)),c	;volatile
  1239                           	line	51
  1240                           ;glcd.c: 51: s_yLastPage = 0;
  1241  00303C  0E00               	movlw	low(0)
  1242  00303E  6E08               	movwf	((c:8)),c	;volatile
  1243                           	line	54
  1244                           ;glcd.c: 54: for(y = 0; y < 2; y++)
  1245  003040  0101               	movlb	1	; () banked
  1246  003042  6F09               	movwf	(??_glcdInit+1+0)&0ffh
  1247  003044  0E00               	movlw	low(0)
  1248  003046  0101               	movlb	1	; () banked
  1249  003048  0101               	movlb	1	; () banked
  1250  00304A  6F08               	movwf	((glcdInit@y))&0ffh
  1251  00304C  0101               	movlb	1	; () banked
  1252  00304E  5109               	movf	(??_glcdInit+1+0)&0ffh,w
  1253  003050  0E01               	movlw	(02h-1)
  1254  003052  0101               	movlb	1	; () banked
  1255  003054  0101               	movlb	1	; () banked
  1256  003056  6508               	cpfsgt	((glcdInit@y))&0ffh
  1257  003058  EF30  F018         	goto	u3611
  1258  00305C  EF32  F018         	goto	u3610
  1259  003060                     u3611:
  1260  003060  EF34  F018         	goto	l375
  1261  003064                     u3610:
  1262  003064  EF69  F018         	goto	l376
  1263                           	line	55
  1264                           	
  1265  003068                     l375:		; BSR set to: ?
  1266                           
  1267                           	line	56
  1268                           ;glcd.c: 55: {
  1269                           ;glcd.c: 56: glbaseWriteData((0x3E | 0x01), 0, y
                                 );
  1270  003068  C108  F148         	movff	(glcdInit@y),0+(?_glbaseWriteData+02h)
  1271  00306C  0101               	movlb	1	; () banked
  1272  00306E  6F09               	movwf	(??_glcdInit+1+0)&0ffh
  1273  003070  0E00               	movlw	low(0)
  1274  003072  0101               	movlb	1	; () banked
  1275  003074  0101               	movlb	1	; () banked
  1276  003076  6F47               	movwf	(0+(?_glbaseWriteData+01h))&0ffh
  1277  003078  0101               	movlb	1	; () banked
  1278  00307A  5109               	movf	(??_glcdInit+1+0)&0ffh,w
  1279  00307C  0101               	movlb	1	; () banked
  1280  00307E  6F0A               	movwf	(??_glcdInit+2+0)&0ffh
  1281  003080  0E3F               	movlw	low(03Fh)
  1282  003082  0101               	movlb	1	; () banked
  1283  003084  0101               	movlb	1	; () banked
  1284  003086  6F46               	movwf	((?_glbaseWriteData))&0ffh
  1285  003088  0101               	movlb	1	; () banked
  1286  00308A  510A               	movf	(??_glcdInit+2+0)&0ffh,w
  1287  00308C  EC8F  F01A         	call	_glbaseWriteData	;wreg free
  1288                           	line	57
  1289                           ;glcd.c: 57: glbaseWriteData((0xC0), 0, y);
  1290  003090  C108  F148         	movff	(glcdInit@y),0+(?_glbaseWriteData+02h)
  1291  003094  0101               	movlb	1	; () banked
  1292  003096  6F09               	movwf	(??_glcdInit+1+0)&0ffh
  1293  003098  0E00               	movlw	low(0)
  1294  00309A  0101               	movlb	1	; () banked
  1295  00309C  0101               	movlb	1	; () banked
  1296  00309E  6F47               	movwf	(0+(?_glbaseWriteData+01h))&0ffh
  1297  0030A0  0101               	movlb	1	; () banked
  1298  0030A2  5109               	movf	(??_glcdInit+1+0)&0ffh,w
  1299  0030A4  0101               	movlb	1	; () banked
  1300  0030A6  6F0A               	movwf	(??_glcdInit+2+0)&0ffh
  1301  0030A8  0EC0               	movlw	low(0C0h)
  1302  0030AA  0101               	movlb	1	; () banked
  1303  0030AC  0101               	movlb	1	; () banked
  1304  0030AE  6F46               	movwf	((?_glbaseWriteData))&0ffh
  1305  0030B0  0101               	movlb	1	; () banked
  1306  0030B2  510A               	movf	(??_glcdInit+2+0)&0ffh,w
  1307  0030B4  EC8F  F01A         	call	_glbaseWriteData	;wreg free
  1308                           	line	54
  1309  0030B8  0101               	movlb	1	; () banked
  1310  0030BA  0101               	movlb	1	; () banked
  1311  0030BC  2B08               	incf	((glcdInit@y))&0ffh
  1312  0030BE  0E01               	movlw	(02h-1)
  1313  0030C0  0101               	movlb	1	; () banked
  1314  0030C2  0101               	movlb	1	; () banked
  1315  0030C4  6508               	cpfsgt	((glcdInit@y))&0ffh
  1316  0030C6  EF67  F018         	goto	u3621
  1317  0030CA  EF69  F018         	goto	u3620
  1318  0030CE                     u3621:
  1319  0030CE  EF34  F018         	goto	l375
  1320  0030D2                     u3620:
  1321                           	
  1322  0030D2                     l376:		; BSR set to: ?
  1323                           
  1324                           	line	59
  1325                           ;glcd.c: 58: }
  1326                           ;glcd.c: 59: }
  1327  0030D2                     l374:
  1328                           			; BSR set to: ?
  1329                           
  1330  0030D2  0012               	return
  1331                           	opt stack 0
  1332                           GLOBAL __end_of_glcdInit
  1333  0030D4                     	__end_of_glcdInit:
  1334                           	FNSIZE	_glcdInit,3,0
  1335                           ; =============== function _glcdInit ends ======
                                 ======
  1336                           
  1337                           	signat	_glcdInit,88
  1338                           	global	_DisplayTime
  1339                           	global	??_DisplayTime
  1340                           	global	?_DisplayTime
  1341                           
  1342                           ; *************** function _DisplayTime ********
                                 *********
  1343                           ; Defined at:
  1344                           ;		line 195 in file "main.c"
  1345                           ; Parameters:
  1346                           ;		ptt            size:   2offs:   0	type: PTR s
                                 truct _TIMESTRUCT; Largest target is 7
  1347                           ;		 -> main@tt(7), 
  1348                           ;		yAll           size:   1offs:   2	type: unsig
                                 ned char 
  1349                           ; Auto variables:
  1350                           ;		yPM         	       	type: unsigned char 
  1351                           ;		yHr         	       	type: unsigned char 
  1352                           ;		yUpdateHr   	       	type: unsigned char 
  1353                           ;		yUpdateMin  	       	type: unsigned char 
  1354                           ;		yUpdateSec  	       	type: unsigned char 
  1355                           ;		yTZ         	       	type: unsigned char 
  1356                           ;		y           	       	type: unsigned char 
  1357                           ;		sz          	       	type: unsigned char [32]
  1358                           ; Return value:
  1359                           ;		type: void 
  1360                           ;		size: 0
  1361                           ; Registers used:
  1362                           ;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, s
                                 tatus,0, tblptrl, tblptrh, tblptru, tablat, prod
                                 l, prodh, cstack
  1363                           ; Tracked objects:
  1364                           ;		On entry : 0/0
  1365                           ;		On exit  : 0/0
  1366                           ;		Unchanged: 0/0
  1367                           ; Data sizes:
  1368                           ;		Autos:   39
  1369                           ;		Params:   3
  1370                           ;		Temp:     2
  1371                           ;		Total:   44
  1372                           ; This function calls:
  1373                           ;		_glcdMoveTo
  1374                           ;		_glcdDrawImage
  1375                           ;		_rtc24to12Hour
  1376                           ;		___wmul
  1377                           ;		_strcpy
  1378                           ;		_glcdWriteString
  1379                           ;		_MakeDateString
  1380                           ;		_rtcReadRam
  1381                           ; This function is called by:
  1382                           ;		_main
  1383                           ; This function uses a non-reentrant model
  1384                           ; 
  1385                                   psect   text4,class=CODE,space=0,reloc=2
  1386                           
  1387                           	opt lm
  1388                           	file	"main.c"
  1389                           	line	195
  1390  000000                     	__size_of_DisplayTime	equ	__end_of_DisplayTime-
                                 _DisplayTime
  1391                           ;main.c: 194: void DisplayTime(TIMESTRUCT *ptt, 
                                 UINT8 yAll)
  1392                           ;main.c: 195: {
  1393                           	
  1394  000868                     _DisplayTime:		; BSR set to: ?
  1395                           
  1396                           	opt stack 29
  1397                           	line	201
  1398  000868  0101               	movlb	1	; () banked
  1399  00086A  0101               	movlb	1	; () banked
  1400  00086C  510A               	movf	((DisplayTime@yAll))&0ffh,w
  1401  00086E  B4D8               	btfsc	status,2
  1402  000870  EF3C  F004         	goto	u3631
  1403  000874  EF3E  F004         	goto	u3630
  1404  000878                     u3631:
  1405  000878  EF4C  F004         	goto	l625
  1406  00087C                     u3630:
  1407                           	line	202
  1408                           ;main.c: 202: yUpdateHr = yUpdateMin = yUpdateSe
                                 c = 1;
  1409  00087C  0101               	movlb	1	; () banked
  1410  00087E  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1411  000880  0E01               	movlw	low(01h)
  1412  000882  0101               	movlb	1	; () banked
  1413  000884  0101               	movlb	1	; () banked
  1414  000886  6F0F               	movwf	((DisplayTime@yUpdateSec))&0ffh
  1415  000888  0101               	movlb	1	; () banked
  1416  00088A  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1417  00088C  C10F  F10E         	movff	(DisplayTime@yUpdateSec),(DisplayTime@yUp
                                 dateMin)
  1418  000890  C10E  F10D         	movff	(DisplayTime@yUpdateMin),(DisplayTime@yUp
                                 dateHr)
  1419  000894  EF8B  F004         	goto	l626
  1420                           	line	203
  1421                           	
  1422  000898                     l625:		; BSR set to: ?
  1423                           
  1424                           	line	205
  1425                           ;main.c: 203: else
  1426                           ;main.c: 204: {
  1427                           ;main.c: 205: yUpdateHr = (ptt->hr != g_ts.hr);
  1428  000898  0E02               	movlw	low(02h)
  1429  00089A  0101               	movlb	1	; () banked
  1430  00089C  0101               	movlb	1	; () banked
  1431  00089E  2508               	addwf	((DisplayTime@ptt))&0ffh,w
  1432  0008A0  6EE9               	movwf	c:fsr0l
  1433  0008A2  0E00               	movlw	high(02h)
  1434  0008A4  0101               	movlb	1	; () banked
  1435  0008A6  0101               	movlb	1	; () banked
  1436  0008A8  2109               	addwfc	((DisplayTime@ptt+1))&0ffh,w
  1437  0008AA  6EEA               	movwf	1+c:fsr0l
  1438  0008AC  5002               	movf	(0+((c:0)+02h)),c,w	;volatile
  1439  0008AE  62EF               	cpfseq	indf0
  1440  0008B0  EF5C  F004         	goto	u3641
  1441  0008B4  EF5F  F004         	goto	u3640
  1442  0008B8                     u3641:
  1443  0008B8  0E01               	movlw	1
  1444  0008BA  EF60  F004         	goto	u3646
  1445  0008BE                     u3640:
  1446  0008BE  0E00               	movlw	0
  1447  0008C0                     u3646:
  1448  0008C0  0101               	movlb	1	; () banked
  1449  0008C2  0101               	movlb	1	; () banked
  1450  0008C4  6F0D               	movwf	((DisplayTime@yUpdateHr))&0ffh
  1451                           	line	206
  1452                           ;main.c: 206: yUpdateMin = (ptt->min != g_ts.min
                                 );
  1453  0008C6  0E01               	movlw	low(01h)
  1454  0008C8  0101               	movlb	1	; () banked
  1455  0008CA  0101               	movlb	1	; () banked
  1456  0008CC  2508               	addwf	((DisplayTime@ptt))&0ffh,w
  1457  0008CE  6EE9               	movwf	c:fsr0l
  1458  0008D0  0E00               	movlw	high(01h)
  1459  0008D2  0101               	movlb	1	; () banked
  1460  0008D4  0101               	movlb	1	; () banked
  1461  0008D6  2109               	addwfc	((DisplayTime@ptt+1))&0ffh,w
  1462  0008D8  6EEA               	movwf	1+c:fsr0l
  1463  0008DA  5001               	movf	(0+((c:0)+01h)),c,w	;volatile
  1464  0008DC  62EF               	cpfseq	indf0
  1465  0008DE  EF73  F004         	goto	u3651
  1466  0008E2  EF76  F004         	goto	u3650
  1467  0008E6                     u3651:
  1468  0008E6  0E01               	movlw	1
  1469  0008E8  EF77  F004         	goto	u3656
  1470  0008EC                     u3650:
  1471  0008EC  0E00               	movlw	0
  1472  0008EE                     u3656:
  1473  0008EE  0101               	movlb	1	; () banked
  1474  0008F0  0101               	movlb	1	; () banked
  1475  0008F2  6F0E               	movwf	((DisplayTime@yUpdateMin))&0ffh
  1476                           	line	207
  1477                           ;main.c: 207: yUpdateSec = (ptt->sec != g_ts.sec
                                 );
  1478  0008F4  5000               	movf	((c:0)),c,w	;volatile
  1479  0008F6  C108  FFE9         	movff	(DisplayTime@ptt),fsr0l
  1480  0008FA  C109  FFEA         	movff	(DisplayTime@ptt+1),fsr0h
  1481  0008FE  62EF               	cpfseq	indf0
  1482  000900  EF84  F004         	goto	u3661
  1483  000904  EF87  F004         	goto	u3660
  1484  000908                     u3661:
  1485  000908  0E01               	movlw	1
  1486  00090A  EF88  F004         	goto	u3666
  1487  00090E                     u3660:
  1488  00090E  0E00               	movlw	0
  1489  000910                     u3666:
  1490  000910  0101               	movlb	1	; () banked
  1491  000912  0101               	movlb	1	; () banked
  1492  000914  6F0F               	movwf	((DisplayTime@yUpdateSec))&0ffh
  1493                           	line	208
  1494                           	
  1495  000916                     l626:		; BSR set to: ?
  1496                           
  1497                           	line	210
  1498                           ;main.c: 208: }
  1499                           ;main.c: 210: if(yUpdateSec)
  1500  000916  0101               	movlb	1	; () banked
  1501  000918  0101               	movlb	1	; () banked
  1502  00091A  510F               	movf	((DisplayTime@yUpdateSec))&0ffh,w
  1503  00091C  B4D8               	btfsc	status,2
  1504  00091E  EF93  F004         	goto	u3671
  1505  000922  EF95  F004         	goto	u3670
  1506  000926                     u3671:
  1507  000926  EFD5  F004         	goto	l627
  1508  00092A                     u3670:
  1509                           	line	213
  1510                           ;main.c: 211: {
  1511                           ;main.c: 213: y = ptt->sec >> 4;
  1512  00092A  C108  FFE9         	movff	(DisplayTime@ptt),fsr0l
  1513  00092E  C109  FFEA         	movff	(DisplayTime@ptt+1),fsr0h
  1514  000932  50EF               	movf	indf0,w
  1515  000934  0101               	movlb	1	; () banked
  1516  000936  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1517  000938  0101               	movlb	1	; () banked
  1518  00093A  3932               	swapf	((??_DisplayTime+39+0))&0ffh,w
  1519  00093C  0B0F               	andlw	(0ffh shr 4) & 0ffh
  1520  00093E  0101               	movlb	1	; () banked
  1521  000940  0101               	movlb	1	; () banked
  1522  000942  6F11               	movwf	((DisplayTime@y))&0ffh
  1523                           	line	214
  1524                           ;main.c: 214: glcdMoveTo(70, 1);
  1525  000944  0101               	movlb	1	; () banked
  1526  000946  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1527  000948  0E01               	movlw	low(01h)
  1528  00094A  0101               	movlb	1	; () banked
  1529  00094C  0101               	movlb	1	; () banked
  1530  00094E  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  1531  000950  0101               	movlb	1	; () banked
  1532  000952  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1533  000954  0101               	movlb	1	; () banked
  1534  000956  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  1535  000958  0E46               	movlw	low(046h)
  1536  00095A  0101               	movlb	1	; () banked
  1537  00095C  0101               	movlb	1	; () banked
  1538  00095E  6F34               	movwf	((?_glcdMoveTo))&0ffh
  1539  000960  0101               	movlb	1	; () banked
  1540  000962  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  1541  000964  EC69  F01A         	call	_glcdMoveTo	;wreg free
  1542                           	line	215
  1543                           ;main.c: 215: glcdDrawImage(y);
  1544  000968  C111  F134         	movff	(DisplayTime@y),(?_glcdDrawImage)
  1545  00096C  ECAB  F008         	call	_glcdDrawImage	;wreg free
  1546                           	line	216
  1547                           ;main.c: 216: glcdMoveTo(84, 1);
  1548  000970  0101               	movlb	1	; () banked
  1549  000972  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1550  000974  0E01               	movlw	low(01h)
  1551  000976  0101               	movlb	1	; () banked
  1552  000978  0101               	movlb	1	; () banked
  1553  00097A  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  1554  00097C  0101               	movlb	1	; () banked
  1555  00097E  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1556  000980  0101               	movlb	1	; () banked
  1557  000982  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  1558  000984  0E54               	movlw	low(054h)
  1559  000986  0101               	movlb	1	; () banked
  1560  000988  0101               	movlb	1	; () banked
  1561  00098A  6F34               	movwf	((?_glcdMoveTo))&0ffh
  1562  00098C  0101               	movlb	1	; () banked
  1563  00098E  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  1564  000990  EC69  F01A         	call	_glcdMoveTo	;wreg free
  1565                           	line	217
  1566                           ;main.c: 217: glcdDrawImage(ptt->sec & 0x0f);
  1567  000994  C108  FFE9         	movff	(DisplayTime@ptt),fsr0l
  1568  000998  C109  FFEA         	movff	(DisplayTime@ptt+1),fsr0h
  1569  00099C  50EF               	movf	indf0,w
  1570  00099E  0B0F               	andlw	low(0Fh)
  1571  0009A0  0101               	movlb	1	; () banked
  1572  0009A2  0101               	movlb	1	; () banked
  1573  0009A4  6F34               	movwf	((?_glcdDrawImage))&0ffh
  1574  0009A6  ECAB  F008         	call	_glcdDrawImage	;wreg free
  1575                           	line	218
  1576                           	
  1577  0009AA                     l627:		; BSR set to: ?
  1578                           
  1579                           	line	220
  1580                           ;main.c: 218: }
  1581                           ;main.c: 220: if(yUpdateMin)
  1582  0009AA  0101               	movlb	1	; () banked
  1583  0009AC  0101               	movlb	1	; () banked
  1584  0009AE  510E               	movf	((DisplayTime@yUpdateMin))&0ffh,w
  1585  0009B0  B4D8               	btfsc	status,2
  1586  0009B2  EFDD  F004         	goto	u3681
  1587  0009B6  EFDF  F004         	goto	u3680
  1588  0009BA                     u3681:
  1589  0009BA  EF2B  F005         	goto	l628
  1590  0009BE                     u3680:
  1591                           	line	223
  1592                           ;main.c: 221: {
  1593                           ;main.c: 223: y = ptt->min >> 4;
  1594  0009BE  0E01               	movlw	low(01h)
  1595  0009C0  0101               	movlb	1	; () banked
  1596  0009C2  0101               	movlb	1	; () banked
  1597  0009C4  2508               	addwf	((DisplayTime@ptt))&0ffh,w
  1598  0009C6  6EE9               	movwf	c:fsr0l
  1599  0009C8  0E00               	movlw	high(01h)
  1600  0009CA  0101               	movlb	1	; () banked
  1601  0009CC  0101               	movlb	1	; () banked
  1602  0009CE  2109               	addwfc	((DisplayTime@ptt+1))&0ffh,w
  1603  0009D0  6EEA               	movwf	1+c:fsr0l
  1604  0009D2  50EF               	movf	indf0,w
  1605  0009D4  0101               	movlb	1	; () banked
  1606  0009D6  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1607  0009D8  0101               	movlb	1	; () banked
  1608  0009DA  3932               	swapf	((??_DisplayTime+39+0))&0ffh,w
  1609  0009DC  0B0F               	andlw	(0ffh shr 4) & 0ffh
  1610  0009DE  0101               	movlb	1	; () banked
  1611  0009E0  0101               	movlb	1	; () banked
  1612  0009E2  6F11               	movwf	((DisplayTime@y))&0ffh
  1613                           	line	224
  1614                           ;main.c: 224: glcdMoveTo(35, 1);
  1615  0009E4  0101               	movlb	1	; () banked
  1616  0009E6  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1617  0009E8  0E01               	movlw	low(01h)
  1618  0009EA  0101               	movlb	1	; () banked
  1619  0009EC  0101               	movlb	1	; () banked
  1620  0009EE  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  1621  0009F0  0101               	movlb	1	; () banked
  1622  0009F2  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1623  0009F4  0101               	movlb	1	; () banked
  1624  0009F6  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  1625  0009F8  0E23               	movlw	low(023h)
  1626  0009FA  0101               	movlb	1	; () banked
  1627  0009FC  0101               	movlb	1	; () banked
  1628  0009FE  6F34               	movwf	((?_glcdMoveTo))&0ffh
  1629  000A00  0101               	movlb	1	; () banked
  1630  000A02  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  1631  000A04  EC69  F01A         	call	_glcdMoveTo	;wreg free
  1632                           	line	225
  1633                           ;main.c: 225: glcdDrawImage(y);
  1634  000A08  C111  F134         	movff	(DisplayTime@y),(?_glcdDrawImage)
  1635  000A0C  ECAB  F008         	call	_glcdDrawImage	;wreg free
  1636                           	line	226
  1637                           ;main.c: 226: glcdMoveTo(49, 1);
  1638  000A10  0101               	movlb	1	; () banked
  1639  000A12  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1640  000A14  0E01               	movlw	low(01h)
  1641  000A16  0101               	movlb	1	; () banked
  1642  000A18  0101               	movlb	1	; () banked
  1643  000A1A  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  1644  000A1C  0101               	movlb	1	; () banked
  1645  000A1E  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1646  000A20  0101               	movlb	1	; () banked
  1647  000A22  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  1648  000A24  0E31               	movlw	low(031h)
  1649  000A26  0101               	movlb	1	; () banked
  1650  000A28  0101               	movlb	1	; () banked
  1651  000A2A  6F34               	movwf	((?_glcdMoveTo))&0ffh
  1652  000A2C  0101               	movlb	1	; () banked
  1653  000A2E  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  1654  000A30  EC69  F01A         	call	_glcdMoveTo	;wreg free
  1655                           	line	227
  1656                           ;main.c: 227: glcdDrawImage(ptt->min & 0x0f);
  1657  000A34  0E01               	movlw	low(01h)
  1658  000A36  0101               	movlb	1	; () banked
  1659  000A38  0101               	movlb	1	; () banked
  1660  000A3A  2508               	addwf	((DisplayTime@ptt))&0ffh,w
  1661  000A3C  6EE9               	movwf	c:fsr0l
  1662  000A3E  0E00               	movlw	high(01h)
  1663  000A40  0101               	movlb	1	; () banked
  1664  000A42  0101               	movlb	1	; () banked
  1665  000A44  2109               	addwfc	((DisplayTime@ptt+1))&0ffh,w
  1666  000A46  6EEA               	movwf	1+c:fsr0l
  1667  000A48  50EF               	movf	indf0,w
  1668  000A4A  0B0F               	andlw	low(0Fh)
  1669  000A4C  0101               	movlb	1	; () banked
  1670  000A4E  0101               	movlb	1	; () banked
  1671  000A50  6F34               	movwf	((?_glcdDrawImage))&0ffh
  1672  000A52  ECAB  F008         	call	_glcdDrawImage	;wreg free
  1673                           	line	228
  1674                           	
  1675  000A56                     l628:		; BSR set to: ?
  1676                           
  1677                           	line	230
  1678                           ;main.c: 228: }
  1679                           ;main.c: 230: if(yUpdateHr)
  1680  000A56  0101               	movlb	1	; () banked
  1681  000A58  0101               	movlb	1	; () banked
  1682  000A5A  510D               	movf	((DisplayTime@yUpdateHr))&0ffh,w
  1683  000A5C  B4D8               	btfsc	status,2
  1684  000A5E  EF33  F005         	goto	u3691
  1685  000A62  EF35  F005         	goto	u3690
  1686  000A66                     u3691:
  1687  000A66  EF3B  F006         	goto	l629
  1688  000A6A                     u3690:
  1689                           	line	233
  1690                           ;main.c: 231: {
  1691                           ;main.c: 233: yHr = rtc24to12Hour(ptt->hr, &yPM)
                                 ;
  1692  000A6A  0101               	movlb	1	; () banked
  1693  000A6C  0E0B               	movlw	low(DisplayTime@yPM)
  1694  000A6E  0101               	movlb	1	; () banked
  1695  000A70  0101               	movlb	1	; () banked
  1696  000A72  6F35               	movwf	(0+(?_rtc24to12Hour+01h))&0ffh
  1697  000A74  0101               	movlb	1	; () banked
  1698  000A76  0E01               	movlw	high(DisplayTime@yPM)
  1699  000A78  0101               	movlb	1	; () banked
  1700  000A7A  6F36               	movwf	(1+(?_rtc24to12Hour+01h))&0ffh
  1701  000A7C  0E02               	movlw	low(02h)
  1702  000A7E  0101               	movlb	1	; () banked
  1703  000A80  0101               	movlb	1	; () banked
  1704  000A82  2508               	addwf	((DisplayTime@ptt))&0ffh,w
  1705  000A84  6EE9               	movwf	c:fsr0l
  1706  000A86  0E00               	movlw	high(02h)
  1707  000A88  0101               	movlb	1	; () banked
  1708  000A8A  0101               	movlb	1	; () banked
  1709  000A8C  2109               	addwfc	((DisplayTime@ptt+1))&0ffh,w
  1710  000A8E  6EEA               	movwf	1+c:fsr0l
  1711  000A90  50EF               	movf	indf0,w
  1712  000A92  0101               	movlb	1	; () banked
  1713  000A94  0101               	movlb	1	; () banked
  1714  000A96  6F34               	movwf	((?_rtc24to12Hour))&0ffh
  1715  000A98  EC0E  F017         	call	_rtc24to12Hour	;wreg free
  1716  000A9C  0101               	movlb	1	; () banked
  1717  000A9E  0101               	movlb	1	; () banked
  1718  000AA0  6F0C               	movwf	((DisplayTime@yHr))&0ffh
  1719                           	line	234
  1720                           ;main.c: 234: y = yHr >> 4;
  1721  000AA2  0101               	movlb	1	; () banked
  1722  000AA4  0101               	movlb	1	; () banked
  1723  000AA6  390C               	swapf	((DisplayTime@yHr))&0ffh,w
  1724  000AA8  0B0F               	andlw	(0ffh shr 4) & 0ffh
  1725  000AAA  0101               	movlb	1	; () banked
  1726  000AAC  0101               	movlb	1	; () banked
  1727  000AAE  6F11               	movwf	((DisplayTime@y))&0ffh
  1728                           	line	235
  1729                           ;main.c: 235: glcdMoveTo(0, 1);
  1730  000AB0  0101               	movlb	1	; () banked
  1731  000AB2  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1732  000AB4  0E01               	movlw	low(01h)
  1733  000AB6  0101               	movlb	1	; () banked
  1734  000AB8  0101               	movlb	1	; () banked
  1735  000ABA  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  1736  000ABC  0101               	movlb	1	; () banked
  1737  000ABE  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1738  000AC0  0101               	movlb	1	; () banked
  1739  000AC2  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  1740  000AC4  0E00               	movlw	low(0)
  1741  000AC6  0101               	movlb	1	; () banked
  1742  000AC8  0101               	movlb	1	; () banked
  1743  000ACA  6F34               	movwf	((?_glcdMoveTo))&0ffh
  1744  000ACC  0101               	movlb	1	; () banked
  1745  000ACE  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  1746  000AD0  EC69  F01A         	call	_glcdMoveTo	;wreg free
  1747                           	line	236
  1748                           ;main.c: 236: if(y)
  1749  000AD4  0101               	movlb	1	; () banked
  1750  000AD6  0101               	movlb	1	; () banked
  1751  000AD8  5111               	movf	((DisplayTime@y))&0ffh,w
  1752  000ADA  B4D8               	btfsc	status,2
  1753  000ADC  EF72  F005         	goto	u3701
  1754  000AE0  EF74  F005         	goto	u3700
  1755  000AE4                     u3701:
  1756  000AE4  EF7A  F005         	goto	l630
  1757  000AE8                     u3700:
  1758                           	line	237
  1759                           ;main.c: 237: glcdDrawImage(y);
  1760  000AE8  C111  F134         	movff	(DisplayTime@y),(?_glcdDrawImage)
  1761  000AEC  ECAB  F008         	call	_glcdDrawImage	;wreg free
  1762  000AF0  EF84  F005         	goto	l631
  1763                           	line	238
  1764                           	
  1765  000AF4                     l630:		; BSR set to: ?
  1766                           
  1767                           	line	239
  1768                           ;main.c: 238: else
  1769                           ;main.c: 239: glcdDrawImage(10);
  1770  000AF4  0101               	movlb	1	; () banked
  1771  000AF6  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1772  000AF8  0E0A               	movlw	low(0Ah)
  1773  000AFA  0101               	movlb	1	; () banked
  1774  000AFC  0101               	movlb	1	; () banked
  1775  000AFE  6F34               	movwf	((?_glcdDrawImage))&0ffh
  1776  000B00  0101               	movlb	1	; () banked
  1777  000B02  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1778  000B04  ECAB  F008         	call	_glcdDrawImage	;wreg free
  1779                           	
  1780  000B08                     l631:		; BSR set to: ?
  1781                           
  1782                           	line	241
  1783                           ;main.c: 241: glcdMoveTo(14, 1);
  1784  000B08  0101               	movlb	1	; () banked
  1785  000B0A  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1786  000B0C  0E01               	movlw	low(01h)
  1787  000B0E  0101               	movlb	1	; () banked
  1788  000B10  0101               	movlb	1	; () banked
  1789  000B12  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  1790  000B14  0101               	movlb	1	; () banked
  1791  000B16  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1792  000B18  0101               	movlb	1	; () banked
  1793  000B1A  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  1794  000B1C  0E0E               	movlw	low(0Eh)
  1795  000B1E  0101               	movlb	1	; () banked
  1796  000B20  0101               	movlb	1	; () banked
  1797  000B22  6F34               	movwf	((?_glcdMoveTo))&0ffh
  1798  000B24  0101               	movlb	1	; () banked
  1799  000B26  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  1800  000B28  EC69  F01A         	call	_glcdMoveTo	;wreg free
  1801                           	line	242
  1802                           ;main.c: 242: glcdDrawImage(yHr & 0x0f);
  1803  000B2C  0101               	movlb	1	; () banked
  1804  000B2E  0101               	movlb	1	; () banked
  1805  000B30  510C               	movf	((DisplayTime@yHr))&0ffh,w
  1806  000B32  0B0F               	andlw	low(0Fh)
  1807  000B34  0101               	movlb	1	; () banked
  1808  000B36  0101               	movlb	1	; () banked
  1809  000B38  6F34               	movwf	((?_glcdDrawImage))&0ffh
  1810  000B3A  ECAB  F008         	call	_glcdDrawImage	;wreg free
  1811                           	line	245
  1812                           ;main.c: 245: glcdMoveTo(100, 2);
  1813  000B3E  0101               	movlb	1	; () banked
  1814  000B40  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1815  000B42  0E02               	movlw	low(02h)
  1816  000B44  0101               	movlb	1	; () banked
  1817  000B46  0101               	movlb	1	; () banked
  1818  000B48  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  1819  000B4A  0101               	movlb	1	; () banked
  1820  000B4C  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1821  000B4E  0101               	movlb	1	; () banked
  1822  000B50  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  1823  000B52  0E64               	movlw	low(064h)
  1824  000B54  0101               	movlb	1	; () banked
  1825  000B56  0101               	movlb	1	; () banked
  1826  000B58  6F34               	movwf	((?_glcdMoveTo))&0ffh
  1827  000B5A  0101               	movlb	1	; () banked
  1828  000B5C  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  1829  000B5E  EC69  F01A         	call	_glcdMoveTo	;wreg free
  1830                           	line	246
  1831                           ;main.c: 246: glcdDrawImage( (yPM?13:12) );
  1832  000B62  0101               	movlb	1	; () banked
  1833  000B64  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1834  000B66  0E0C               	movlw	low(0Ch)
  1835  000B68  0101               	movlb	1	; () banked
  1836  000B6A  0101               	movlb	1	; () banked
  1837  000B6C  6F34               	movwf	((?_glcdDrawImage))&0ffh
  1838  000B6E  0101               	movlb	1	; () banked
  1839  000B70  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1840  000B72  0101               	movlb	1	; () banked
  1841  000B74  0101               	movlb	1	; () banked
  1842  000B76  510B               	movf	((DisplayTime@yPM))&0ffh,w
  1843  000B78  B4D8               	btfsc	status,2
  1844  000B7A  EFC1  F005         	goto	u3711
  1845  000B7E  EFC3  F005         	goto	u3710
  1846  000B82                     u3711:
  1847  000B82  EFCB  F005         	goto	l500000373
  1848  000B86                     u3710:
  1849  000B86  0101               	movlb	1	; () banked
  1850  000B88  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1851  000B8A  0E0D               	movlw	low(0Dh)
  1852  000B8C  0101               	movlb	1	; () banked
  1853  000B8E  0101               	movlb	1	; () banked
  1854  000B90  6F34               	movwf	((?_glcdDrawImage))&0ffh
  1855  000B92  0101               	movlb	1	; () banked
  1856  000B94  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1857                           	
  1858  000B96                     l500000373:		; BSR set to: ?
  1859                           
  1860  000B96  ECAB  F008         	call	_glcdDrawImage	;wreg free
  1861                           	line	249
  1862                           ;main.c: 249: glcdMoveTo(8, 5);
  1863  000B9A  0101               	movlb	1	; () banked
  1864  000B9C  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1865  000B9E  0E05               	movlw	low(05h)
  1866  000BA0  0101               	movlb	1	; () banked
  1867  000BA2  0101               	movlb	1	; () banked
  1868  000BA4  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  1869  000BA6  0101               	movlb	1	; () banked
  1870  000BA8  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1871  000BAA  0101               	movlb	1	; () banked
  1872  000BAC  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  1873  000BAE  0E08               	movlw	low(08h)
  1874  000BB0  0101               	movlb	1	; () banked
  1875  000BB2  0101               	movlb	1	; () banked
  1876  000BB4  6F34               	movwf	((?_glcdMoveTo))&0ffh
  1877  000BB6  0101               	movlb	1	; () banked
  1878  000BB8  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  1879  000BBA  EC69  F01A         	call	_glcdMoveTo	;wreg free
  1880                           	line	250
  1881                           ;main.c: 250: strcpy(sz, &(cszDay[(ptt->day) - 1
                                 ])[0]);
  1882  000BBE  0E05               	movlw	low(05h)
  1883  000BC0  0101               	movlb	1	; () banked
  1884  000BC2  0101               	movlb	1	; () banked
  1885  000BC4  2508               	addwf	((DisplayTime@ptt))&0ffh,w
  1886  000BC6  6EE9               	movwf	c:fsr0l
  1887  000BC8  0E00               	movlw	high(05h)
  1888  000BCA  0101               	movlb	1	; () banked
  1889  000BCC  0101               	movlb	1	; () banked
  1890  000BCE  2109               	addwfc	((DisplayTime@ptt+1))&0ffh,w
  1891  000BD0  6EEA               	movwf	1+c:fsr0l
  1892  000BD2  50EF               	movf	indf0,w
  1893  000BD4  0101               	movlb	1	; () banked
  1894  000BD6  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1895  000BD8  0101               	movlb	1	; () banked
  1896  000BDA  0532               	decf	((??_DisplayTime+39+0))&0ffh,w
  1897  000BDC  0D0B               	mullw	0Bh
  1898  000BDE  0EAA               	movlw	low(_cszDay)
  1899  000BE0  24F3               	addwf	(prodl),c,w
  1900  000BE2  0101               	movlb	1	; () banked
  1901                           	
  1902  000BE4  0101               	movlb	1	; () banked
  1903  000BE6  6F45               	movwf	(0+(?_strcpy+02h))&0ffh
  1904  000BE8  0101               	movlb	1	; () banked
  1905  000BEA  6B46               	clrf	1+(0+(?_strcpy+02h))&0ffh
  1906  000BEC  0E3C               	movlw	high(_cszDay)
  1907  000BEE  0101               	movlb	1	; () banked
  1908  000BF0  2346               	addwfc	1+(0+(?_strcpy+02h))&0ffh
  1909  000BF2  0101               	movlb	1	; () banked
  1910  000BF4  0E12               	movlw	low(DisplayTime@sz)
  1911  000BF6  0101               	movlb	1	; () banked
  1912  000BF8  0101               	movlb	1	; () banked
  1913  000BFA  6F43               	movwf	((?_strcpy))&0ffh
  1914  000BFC  0101               	movlb	1	; () banked
  1915  000BFE  0E01               	movlw	high(DisplayTime@sz)
  1916  000C00  0101               	movlb	1	; () banked
  1917  000C02  6F44               	movwf	((?_strcpy+1))&0ffh
  1918  000C04  EC18  F01A         	call	_strcpy	;wreg free
  1919                           	line	251
  1920                           ;main.c: 251: glcdWriteString(sz);
  1921  000C08  0101               	movlb	1	; () banked
  1922  000C0A  0E12               	movlw	low(DisplayTime@sz)
  1923  000C0C  0101               	movlb	1	; () banked
  1924  000C0E  0101               	movlb	1	; () banked
  1925  000C10  6F34               	movwf	((?_glcdWriteString))&0ffh
  1926  000C12  0101               	movlb	1	; () banked
  1927  000C14  0E01               	movlw	high(DisplayTime@sz)
  1928  000C16  0101               	movlb	1	; () banked
  1929  000C18  6F35               	movwf	((?_glcdWriteString+1))&0ffh
  1930  000C1A  EC54  F019         	call	_glcdWriteString	;wreg free
  1931                           	line	253
  1932                           ;main.c: 253: glcdMoveTo(8, 5+1);
  1933  000C1E  0101               	movlb	1	; () banked
  1934  000C20  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1935  000C22  0E06               	movlw	low(06h)
  1936  000C24  0101               	movlb	1	; () banked
  1937  000C26  0101               	movlb	1	; () banked
  1938  000C28  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  1939  000C2A  0101               	movlb	1	; () banked
  1940  000C2C  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  1941  000C2E  0101               	movlb	1	; () banked
  1942  000C30  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  1943  000C32  0E08               	movlw	low(08h)
  1944  000C34  0101               	movlb	1	; () banked
  1945  000C36  0101               	movlb	1	; () banked
  1946  000C38  6F34               	movwf	((?_glcdMoveTo))&0ffh
  1947  000C3A  0101               	movlb	1	; () banked
  1948  000C3C  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  1949  000C3E  EC69  F01A         	call	_glcdMoveTo	;wreg free
  1950                           	line	254
  1951                           ;main.c: 254: MakeDateString(ptt, sz);
  1952  000C42  0101               	movlb	1	; () banked
  1953  000C44  0E12               	movlw	low(DisplayTime@sz)
  1954  000C46  0101               	movlb	1	; () banked
  1955  000C48  0101               	movlb	1	; () banked
  1956  000C4A  6F36               	movwf	(0+(?_MakeDateString+02h))&0ffh
  1957  000C4C  0101               	movlb	1	; () banked
  1958  000C4E  0E01               	movlw	high(DisplayTime@sz)
  1959  000C50  0101               	movlb	1	; () banked
  1960  000C52  6F37               	movwf	(1+(?_MakeDateString+02h))&0ffh
  1961  000C54  C108  F134         	movff	(DisplayTime@ptt),(?_MakeDateString)
  1962  000C58  C109  F135         	movff	(DisplayTime@ptt+1),(?_MakeDateString+1)
  1963  000C5C  ECC9  F00C         	call	_MakeDateString	;wreg free
  1964                           	line	255
  1965                           ;main.c: 255: glcdWriteString(sz);
  1966  000C60  0101               	movlb	1	; () banked
  1967  000C62  0E12               	movlw	low(DisplayTime@sz)
  1968  000C64  0101               	movlb	1	; () banked
  1969  000C66  0101               	movlb	1	; () banked
  1970  000C68  6F34               	movwf	((?_glcdWriteString))&0ffh
  1971  000C6A  0101               	movlb	1	; () banked
  1972  000C6C  0E01               	movlw	high(DisplayTime@sz)
  1973  000C6E  0101               	movlb	1	; () banked
  1974  000C70  6F35               	movwf	((?_glcdWriteString+1))&0ffh
  1975  000C72  EC54  F019         	call	_glcdWriteString	;wreg free
  1976                           	line	256
  1977                           	
  1978  000C76                     l629:		; BSR set to: ?
  1979                           
  1980                           	line	258
  1981                           ;main.c: 256: }
  1982                           ;main.c: 258: if(yAll)
  1983  000C76  0101               	movlb	1	; () banked
  1984  000C78  0101               	movlb	1	; () banked
  1985  000C7A  510A               	movf	((DisplayTime@yAll))&0ffh,w
  1986  000C7C  B4D8               	btfsc	status,2
  1987  000C7E  EF43  F006         	goto	u3721
  1988  000C82  EF45  F006         	goto	u3720
  1989  000C86                     u3721:
  1990  000C86  EFEA  F006         	goto	l632
  1991  000C8A                     u3720:
  1992                           	line	261
  1993                           ;main.c: 259: {
  1994                           ;main.c: 261: glcdMoveTo(28, 1);
  1995  000C8A  0101               	movlb	1	; () banked
  1996  000C8C  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  1997  000C8E  0E01               	movlw	low(01h)
  1998  000C90  0101               	movlb	1	; () banked
  1999  000C92  0101               	movlb	1	; () banked
  2000  000C94  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  2001  000C96  0101               	movlb	1	; () banked
  2002  000C98  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  2003  000C9A  0101               	movlb	1	; () banked
  2004  000C9C  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  2005  000C9E  0E1C               	movlw	low(01Ch)
  2006  000CA0  0101               	movlb	1	; () banked
  2007  000CA2  0101               	movlb	1	; () banked
  2008  000CA4  6F34               	movwf	((?_glcdMoveTo))&0ffh
  2009  000CA6  0101               	movlb	1	; () banked
  2010  000CA8  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  2011  000CAA  EC69  F01A         	call	_glcdMoveTo	;wreg free
  2012                           	line	262
  2013                           ;main.c: 262: glcdDrawImage(11);
  2014  000CAE  0101               	movlb	1	; () banked
  2015  000CB0  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  2016  000CB2  0E0B               	movlw	low(0Bh)
  2017  000CB4  0101               	movlb	1	; () banked
  2018  000CB6  0101               	movlb	1	; () banked
  2019  000CB8  6F34               	movwf	((?_glcdDrawImage))&0ffh
  2020  000CBA  0101               	movlb	1	; () banked
  2021  000CBC  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  2022  000CBE  ECAB  F008         	call	_glcdDrawImage	;wreg free
  2023                           	line	263
  2024                           ;main.c: 263: glcdMoveTo(63, 1);
  2025  000CC2  0101               	movlb	1	; () banked
  2026  000CC4  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  2027  000CC6  0E01               	movlw	low(01h)
  2028  000CC8  0101               	movlb	1	; () banked
  2029  000CCA  0101               	movlb	1	; () banked
  2030  000CCC  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  2031  000CCE  0101               	movlb	1	; () banked
  2032  000CD0  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  2033  000CD2  0101               	movlb	1	; () banked
  2034  000CD4  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  2035  000CD6  0E3F               	movlw	low(03Fh)
  2036  000CD8  0101               	movlb	1	; () banked
  2037  000CDA  0101               	movlb	1	; () banked
  2038  000CDC  6F34               	movwf	((?_glcdMoveTo))&0ffh
  2039  000CDE  0101               	movlb	1	; () banked
  2040  000CE0  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  2041  000CE2  EC69  F01A         	call	_glcdMoveTo	;wreg free
  2042                           	line	264
  2043                           ;main.c: 264: glcdDrawImage(11);
  2044  000CE6  0101               	movlb	1	; () banked
  2045  000CE8  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  2046  000CEA  0E0B               	movlw	low(0Bh)
  2047  000CEC  0101               	movlb	1	; () banked
  2048  000CEE  0101               	movlb	1	; () banked
  2049  000CF0  6F34               	movwf	((?_glcdDrawImage))&0ffh
  2050  000CF2  0101               	movlb	1	; () banked
  2051  000CF4  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  2052  000CF6  ECAB  F008         	call	_glcdDrawImage	;wreg free
  2053                           	line	267
  2054                           ;main.c: 267: y = rtcReadRam((UINT8)0xCD);
  2055  000CFA  0101               	movlb	1	; () banked
  2056  000CFC  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  2057  000CFE  0ECD               	movlw	low(0CDh)
  2058  000D00  0101               	movlb	1	; () banked
  2059  000D02  0101               	movlb	1	; () banked
  2060  000D04  6F35               	movwf	((?_rtcReadRam))&0ffh
  2061  000D06  0101               	movlb	1	; () banked
  2062  000D08  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  2063  000D0A  EC65  F01B         	call	_rtcReadRam	;wreg free
  2064  000D0E  0101               	movlb	1	; () banked
  2065  000D10  0101               	movlb	1	; () banked
  2066  000D12  6F11               	movwf	((DisplayTime@y))&0ffh
  2067                           	line	268
  2068                           ;main.c: 268: yTZ = rtcReadRam((UINT8)0xC3);
  2069  000D14  0101               	movlb	1	; () banked
  2070  000D16  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  2071  000D18  0EC3               	movlw	low(0C3h)
  2072  000D1A  0101               	movlb	1	; () banked
  2073  000D1C  0101               	movlb	1	; () banked
  2074  000D1E  6F35               	movwf	((?_rtcReadRam))&0ffh
  2075  000D20  0101               	movlb	1	; () banked
  2076  000D22  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  2077  000D24  EC65  F01B         	call	_rtcReadRam	;wreg free
  2078  000D28  0101               	movlb	1	; () banked
  2079  000D2A  0101               	movlb	1	; () banked
  2080  000D2C  6F10               	movwf	((DisplayTime@yTZ))&0ffh
  2081                           	line	269
  2082                           ;main.c: 269: yTZ = yTZ - 4;
  2083  000D2E  0101               	movlb	1	; () banked
  2084  000D30  0101               	movlb	1	; () banked
  2085  000D32  5110               	movf	((DisplayTime@yTZ))&0ffh,w
  2086  000D34  0FFC               	addlw	low(0FCh)
  2087  000D36  0101               	movlb	1	; () banked
  2088  000D38  0101               	movlb	1	; () banked
  2089  000D3A  6F10               	movwf	((DisplayTime@yTZ))&0ffh
  2090                           	line	270
  2091                           ;main.c: 270: glcdMoveTo(109, 0);
  2092  000D3C  0101               	movlb	1	; () banked
  2093  000D3E  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  2094  000D40  0E00               	movlw	low(0)
  2095  000D42  0101               	movlb	1	; () banked
  2096  000D44  0101               	movlb	1	; () banked
  2097  000D46  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  2098  000D48  0101               	movlb	1	; () banked
  2099  000D4A  5132               	movf	(??_DisplayTime+39+0)&0ffh,w
  2100  000D4C  0101               	movlb	1	; () banked
  2101  000D4E  6F33               	movwf	(??_DisplayTime+40+0)&0ffh
  2102  000D50  0E6D               	movlw	low(06Dh)
  2103  000D52  0101               	movlb	1	; () banked
  2104  000D54  0101               	movlb	1	; () banked
  2105  000D56  6F34               	movwf	((?_glcdMoveTo))&0ffh
  2106  000D58  0101               	movlb	1	; () banked
  2107  000D5A  5133               	movf	(??_DisplayTime+40+0)&0ffh,w
  2108  000D5C  EC69  F01A         	call	_glcdMoveTo	;wreg free
  2109                           	line	271
  2110                           ;main.c: 271: if(y)
  2111  000D60  0101               	movlb	1	; () banked
  2112  000D62  0101               	movlb	1	; () banked
  2113  000D64  5111               	movf	((DisplayTime@y))&0ffh,w
  2114  000D66  B4D8               	btfsc	status,2
  2115  000D68  EFB8  F006         	goto	u3731
  2116  000D6C  EFBA  F006         	goto	u3730
  2117  000D70                     u3731:
  2118  000D70  EFD3  F006         	goto	l633
  2119  000D74                     u3730:
  2120                           	line	272
  2121                           ;main.c: 272: glcdWriteString((UINT8*)&(cszDT[yT
                                 Z][0]));
  2122  000D74  0101               	movlb	1	; () banked
  2123  000D76  0101               	movlb	1	; () banked
  2124  000D78  5110               	movf	((DisplayTime@yTZ))&0ffh,w
  2125  000D7A  0D04               	mullw	04h
  2126  000D7C  0E7A               	movlw	low((_cszDT))
  2127  000D7E  0101               	movlb	1	; () banked
  2128  000D80  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  2129  000D82  0E3F               	movlw	high((_cszDT))
  2130  000D84  6F33               	movwf	(??_DisplayTime+39+0+1)&0ffh
  2131  000D86  50F3               	movf	(prodl),c,w
  2132  000D88  0101               	movlb	1	; () banked
  2133  000D8A  2732               	addwf	(??_DisplayTime+39+0)&0ffh
  2134  000D8C  6AE8               	clrf	wreg
  2135  000D8E  BEF3               	btfsc	(prodl),c,7
  2136  000D90  68E8               	setf	wreg
  2137  000D92  0101               	movlb	1	; () banked
  2138  000D94  2333               	addwfc	(??_DisplayTime+39+1)&0ffh
  2139  000D96  C132  F134         	movff	??_DisplayTime+39+0,(?_glcdWriteString)
  2140  000D9A  C133  F135         	movff	??_DisplayTime+39+1,(?_glcdWriteString+1)
  2141  000D9E  EC54  F019         	call	_glcdWriteString	;wreg free
  2142  000DA2  EFEA  F006         	goto	l632
  2143                           	line	273
  2144                           	
  2145  000DA6                     l633:		; BSR set to: ?
  2146                           
  2147                           	line	274
  2148                           ;main.c: 273: else
  2149                           ;main.c: 274: glcdWriteString((UINT8*)&(cszST[yT
                                 Z][0]));
  2150  000DA6  0101               	movlb	1	; () banked
  2151  000DA8  0101               	movlb	1	; () banked
  2152  000DAA  5110               	movf	((DisplayTime@yTZ))&0ffh,w
  2153  000DAC  0D04               	mullw	04h
  2154  000DAE  0E96               	movlw	low((_cszST))
  2155  000DB0  0101               	movlb	1	; () banked
  2156  000DB2  6F32               	movwf	(??_DisplayTime+39+0)&0ffh
  2157  000DB4  0E3F               	movlw	high((_cszST))
  2158  000DB6  6F33               	movwf	(??_DisplayTime+39+0+1)&0ffh
  2159  000DB8  50F3               	movf	(prodl),c,w
  2160  000DBA  0101               	movlb	1	; () banked
  2161  000DBC  2732               	addwf	(??_DisplayTime+39+0)&0ffh
  2162  000DBE  6AE8               	clrf	wreg
  2163  000DC0  BEF3               	btfsc	(prodl),c,7
  2164  000DC2  68E8               	setf	wreg
  2165  000DC4  0101               	movlb	1	; () banked
  2166  000DC6  2333               	addwfc	(??_DisplayTime+39+1)&0ffh
  2167  000DC8  C132  F134         	movff	??_DisplayTime+39+0,(?_glcdWriteString)
  2168  000DCC  C133  F135         	movff	??_DisplayTime+39+1,(?_glcdWriteString+1)
  2169  000DD0  EC54  F019         	call	_glcdWriteString	;wreg free
  2170                           	
  2171  000DD4                     l634:		; BSR set to: ?
  2172                           
  2173                           	line	275
  2174                           	
  2175  000DD4                     l632:		; BSR set to: ?
  2176                           
  2177                           	line	277
  2178                           ;main.c: 275: }
  2179                           ;main.c: 277: }
  2180  000DD4                     l624:
  2181                           			; BSR set to: ?
  2182                           
  2183  000DD4  0012               	return
  2184                           	opt stack 0
  2185                           GLOBAL __end_of_DisplayTime
  2186  000DD6                     	__end_of_DisplayTime:
  2187                           	FNSIZE	_DisplayTime,41,3
  2188                           ; =============== function _DisplayTime ends ===
                                 =========
  2189                           
  2190                           	signat	_DisplayTime,8312
  2191                           	global	_ButtonDown
  2192                           	global	??_ButtonDown
  2193                           	global	?_ButtonDown
  2194                           
  2195                           ; *************** function _ButtonDown *********
                                 ********
  2196                           ; Defined at:
  2197                           ;		line 406 in file "main.c"
  2198                           ; Parameters:
  2199                           ;		None
  2200                           ; Auto variables:
  2201                           ;		yZone       	       	type: unsigned char 
  2202                           ;		y           	       	type: unsigned char 
  2203                           ; Return value:
  2204                           ;		type: void 
  2205                           ;		size: 0
  2206                           ; Registers used:
  2207                           ;		wreg, fsr0l, fsr0h, status,2, status,0, tblpt
                                 rl, tblptrh, tblptru, tablat, prodl, prodh, csta
                                 ck
  2208                           ; Tracked objects:
  2209                           ;		On entry : 0/0
  2210                           ;		On exit  : 0/0
  2211                           ;		Unchanged: 0/0
  2212                           ; Data sizes:
  2213                           ;		Autos:    2
  2214                           ;		Params:   0
  2215                           ;		Temp:     2
  2216                           ;		Total:    4
  2217                           ; This function calls:
  2218                           ;		_Vdelay_ms
  2219                           ;		_glcdClearScreen
  2220                           ;		_glcdMoveTo
  2221                           ;		_glcdWriteString
  2222                           ;		_rtcReadRam
  2223                           ;		_DrawTZSetting
  2224                           ;		_rtcWriteRam
  2225                           ; This function is called by:
  2226                           ;		_main
  2227                           ; This function uses a non-reentrant model
  2228                           ; 
  2229                                   psect   text5,class=CODE,space=0,reloc=2
  2230                           
  2231                           	opt lm
  2232                           	file	"main.c"
  2233                           	line	406
  2234  000000                     	__size_of_ButtonDown	equ	__end_of_ButtonDown-_B
                                 uttonDown
  2235                           ;main.c: 405: void ButtonDown()
  2236                           ;main.c: 406: {
  2237                           	
  2238  001488                     _ButtonDown:		; BSR set to: ?
  2239                           
  2240                           	opt stack 29
  2241                           	line	409
  2242  001488  0E32               	movlw	low(032h)
  2243  00148A  0101               	movlb	1	; () banked
  2244  00148C  0101               	movlb	1	; () banked
  2245  00148E  6F0C               	movwf	((?_Vdelay_ms))&0ffh
  2246  001490  0E00               	movlw	high(032h)
  2247  001492  0101               	movlb	1	; () banked
  2248  001494  6F0D               	movwf	((?_Vdelay_ms+1))&0ffh
  2249  001496  EC6A  F018         	call	_Vdelay_ms	;wreg free
  2250                           	line	411
  2251                           ;main.c: 411: for(y = 0; y < 50; y++)
  2252  00149A  0101               	movlb	1	; () banked
  2253  00149C  6F0A               	movwf	(??_ButtonDown+2+0)&0ffh
  2254  00149E  0E00               	movlw	low(0)
  2255  0014A0  0101               	movlb	1	; () banked
  2256  0014A2  0101               	movlb	1	; () banked
  2257  0014A4  6F09               	movwf	((ButtonDown@y))&0ffh
  2258  0014A6  0101               	movlb	1	; () banked
  2259  0014A8  510A               	movf	(??_ButtonDown+2+0)&0ffh,w
  2260  0014AA  0E31               	movlw	(032h-1)
  2261  0014AC  0101               	movlb	1	; () banked
  2262  0014AE  0101               	movlb	1	; () banked
  2263  0014B0  6509               	cpfsgt	((ButtonDown@y))&0ffh
  2264  0014B2  EF5D  F00A         	goto	u3741
  2265  0014B6  EF5F  F00A         	goto	u3740
  2266  0014BA                     u3741:
  2267  0014BA  EF61  F00A         	goto	l647
  2268  0014BE                     u3740:
  2269  0014BE  EF83  F00A         	goto	l648
  2270                           	line	412
  2271                           	
  2272  0014C2                     l647:		; BSR set to: ?
  2273                           
  2274                           	line	413
  2275                           ;main.c: 412: {
  2276                           ;main.c: 413: Vdelay_ms(100);
  2277  0014C2  0E64               	movlw	low(064h)
  2278  0014C4  0101               	movlb	1	; () banked
  2279  0014C6  0101               	movlb	1	; () banked
  2280+ 0014C8  6F0C               	movwf	((?_Vdelay_ms))&0ffh
  2281+ 0014CA  0E00               	movlw	high(064h)
  2282+ 0014CC  0101               	movlb	1	; () banked
  2283+ 0014CE  6F0D               	movwf	((?_Vdelay_ms+1))&0ffh
  2284+ 0014D0  EC6A  F018         	call	_Vdelay_ms	;wreg free
  2285+                          	line	414
  2286+                          ;main.c: 414: if((RB2))
  2287+ 0014D4  A481               	btfss	c:(31754/8),(31754)&7	;volatile
  2288+ 0014D6  EF6F  F00A         	goto	u3751
  2289+ 0014DA  EF71  F00A         	goto	u3750
  2290+ 0014DE                     u3751:
  2291+ 0014DE  EF76  F00A         	goto	l650
  2292+ 0014E2                     u3750:
  2293+                          	line	417
  2294+                          ;main.c: 415: {
  2295+                          ;main.c: 417: g_yUpdate = 1;
  2296+ 0014E2  0E01               	movlw	low(01h)
  2297+ 0014E4  6E0D               	movwf	((c:13)),c	;volatile
  2298+                          	line	418
  2299+                          ;main.c: 418: LATA0 = 0;
  2300+ 0014E6  9089               	bcf	c:(31816/8),(31816)&7	;volatile
  2301+                          	line	419
  2302+                          ;main.c: 419: return;
  2303+ 0014E8  EF8E  F00B         	goto	l646
  2304+                          	line	420
  2305+                          	
  2306+ 0014EC                     l650:		; BSR set to: ?
  2307+                          
  2308+                          	line	411
  2309+ 0014EC  0101               	movlb	1	; () banked
  2310+ 0014EE  0101               	movlb	1	; () banked
  2311+ 0014F0  2B09               	incf	((ButtonDown@y))&0ffh
  2312+ 0014F2  0E31               	movlw	(032h-1)
  2313+ 0014F4  0101               	movlb	1	; () banked
  2314+ 0014F6  0101               	movlb	1	; () banked
  2315+ 0014F8  6509               	cpfsgt	((ButtonDown@y))&0ffh
  2316+ 0014FA  EF81  F00A         	goto	u3761
  2317+ 0014FE  EF83  F00A         	goto	u3760
  2318+ 001502                     u3761:
  2319+ 001502  EF61  F00A         	goto	l647
  2320+ 001506                     u3760:
  2321+                          	
  2322+ 001506                     l648:		; BSR set to: ?
  2323+                          
  2324+                          	line	424
  2325+                          ;main.c: 420: }
  2326+                          ;main.c: 421: }
  2327+                          ;main.c: 424: LATA0 = 0;
  2328+ 001506  9089               	bcf	c:(31816/8),(31816)&7	;volatile
  2329+                          	line	425
  2330+                          ;main.c: 425: glcdClearScreen();
  2331+ 001508  EC5D  F015         	call	_glcdClearScreen	;wreg free
  2332+                          	line	426
  2333+                          ;main.c: 426: glcdMoveTo(0, 0);
  2334+ 00150C  0101               	movlb	1	; () banked
  2335+ 00150E  6F0A               	movwf	(??_ButtonDown+2+0)&0ffh
  2336+ 001510  0E00               	movlw	low(0)
  2337+ 001512  0101               	movlb	1	; () banked
  2338+ 001514  0101               	movlb	1	; () banked
  2339+ 001516  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  2340+ 001518  0101               	movlb	1	; () banked
  2341+ 00151A  510A               	movf	(??_ButtonDown+2+0)&0ffh,w
  2342+ 00151C  0101               	movlb	1	; () banked
  2343+ 00151E  6F0B               	movwf	(??_ButtonDown+3+0)&0ffh
  2344+ 001520  0E00               	movlw	low(0)
  2345+ 001522  0101               	movlb	1	; () banked
  2346+ 001524  0101               	movlb	1	; () banked
  2347+ 001526  6F34               	movwf	((?_glcdMoveTo))&0ffh
  2348+ 001528  0101               	movlb	1	; () banked
  2349+ 00152A  510B               	movf	(??_ButtonDown+3+0)&0ffh,w
  2350+ 00152C  EC69  F01A         	call	_glcdMoveTo	;wreg free
  2351+                          	line	427
  2352+                          ;main.c: 427: glcdWriteString((UINT8*) cszTZChan
      +                          ge);
  2353+ 001530  0EC4               	movlw	low(_cszTZChange)
  2354+ 001532  0101               	movlb	1	; () banked
  2355+ 001534  0101               	movlb	1	; () banked
  2356+ 001536  6F34               	movwf	((?_glcdWriteString))&0ffh
  2357+ 001538  0E3F               	movlw	high(_cszTZChange)
  2358+ 00153A  0101               	movlb	1	; () banked
  2359+ 00153C  6F35               	movwf	((?_glcdWriteString+1))&0ffh
  2360+ 00153E  EC54  F019         	call	_glcdWriteString	;wreg free
  2361+                          	line	429
  2362+                          ;main.c: 429: yZone = rtcReadRam( (UINT8)0xC3);
  2363+ 001542  0101               	movlb	1	; () banked
  2364+ 001544  6F0A               	movwf	(??_ButtonDown+2+0)&0ffh
  2365+ 001546  0EC3               	movlw	low(0C3h)
  2366+ 001548  0101               	movlb	1	; () banked
  2367+ 00154A  0101               	movlb	1	; () banked
  2368+ 00154C  6F35               	movwf	((?_rtcReadRam))&0ffh
  2369+ 00154E  0101               	movlb	1	; () banked
  2370+ 001550  510A               	movf	(??_ButtonDown+2+0)&0ffh,w
  2371+ 001552  EC65  F01B         	call	_rtcReadRam	;wreg free
  2372+ 001556  0101               	movlb	1	; () banked
  2373+ 001558  0101               	movlb	1	; () banked
  2374+ 00155A  6F08               	movwf	((ButtonDown@yZone))&0ffh
  2375+                          	line	432
  2376+                          ;main.c: 432: for(y = 0; y < 7; y++)
  2377+ 00155C  0101               	movlb	1	; () banked
  2378+ 00155E  6F0A               	movwf	(??_ButtonDown+2+0)&0ffh
  2379+ 001560  0E00               	movlw	low(0)
  2380+ 001562  0101               	movlb	1	; () banked
  2381+ 001564  0101               	movlb	1	; () banked
  2382+ 001566  6F09               	movwf	((ButtonDown@y))&0ffh
  2383+ 001568  0101               	movlb	1	; () banked
  2384+ 00156A  510A               	movf	(??_ButtonDown+2+0)&0ffh,w
  2385+ 00156C  0E06               	movlw	(07h-1)
  2386+ 00156E  0101               	movlb	1	; () banked
  2387+ 001570  0101               	movlb	1	; () banked
  2388+ 001572  6509               	cpfsgt	((ButtonDown@y))&0ffh
  2389+ 001574  EFBE  F00A         	goto	u3771
  2390+ 001578  EFC0  F00A         	goto	u3770
  2391+ 00157C                     u3771:
  2392+ 00157C  EFC2  F00A         	goto	l651
  2393+ 001580                     u3770:
  2394+ 001580  EFF6  F00A         	goto	l652
  2395+                          	line	433
  2396+                          	
  2397+ 001584                     l651:		; BSR set to: ?
  2398+                          
  2399+                          	line	434
  2400+                          ;main.c: 433: {
  2401+                          ;main.c: 434: glcdMoveTo(19, y+1);
  2402+ 001584  0101               	movlb	1	; () banked
  2403+ 001586  0101               	movlb	1	; () banked
  2404+ 001588  2909               	incf	((ButtonDown@y))&0ffh,w
  2405+ 00158A  0101               	movlb	1	; () banked
  2406+ 00158C  0101               	movlb	1	; () banked
  2407+ 00158E  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  2408+ 001590  0101               	movlb	1	; () banked
  2409+ 001592  6F0A               	movwf	(??_ButtonDown+2+0)&0ffh
  2410+ 001594  0E13               	movlw	low(013h)
  2411+ 001596  0101               	movlb	1	; () banked
  2412+ 001598  0101               	movlb	1	; () banked
  2413+ 00159A  6F34               	movwf	((?_glcdMoveTo))&0ffh
  2414+ 00159C  0101               	movlb	1	; () banked
  2415+ 00159E  510A               	movf	(??_ButtonDown+2+0)&0ffh,w
  2416+ 0015A0  EC69  F01A         	call	_glcdMoveTo	;wreg free
  2417+                          	line	435
  2418+                          ;main.c: 435: glcdWriteString((UINT8*)&(cszTimeZ
      +                          one[y][0]));
  2419+ 0015A4  0101               	movlb	1	; () banked
  2420+ 0015A6  0101               	movlb	1	; () banked
  2421+ 0015A8  5109               	movf	((ButtonDown@y))&0ffh,w
  2422+ 0015AA  0D0A               	mullw	0Ah
  2423+ 0015AC  0EF7               	movlw	low((_cszTimeZone))
  2424+ 0015AE  0101               	movlb	1	; () banked
  2425+ 0015B0  6F0A               	movwf	(??_ButtonDown+2+0)&0ffh
  2426+ 0015B2  0E3C               	movlw	high((_cszTimeZone))
  2427+ 0015B4  6F0B               	movwf	(??_ButtonDown+2+0+1)&0ffh
  2428+ 0015B6  50F3               	movf	(prodl),c,w
  2429+ 0015B8  0101               	movlb	1	; () banked
  2430+ 0015BA  270A               	addwf	(??_ButtonDown+2+0)&0ffh
  2431+ 0015BC  6AE8               	clrf	wreg
  2432+ 0015BE  BEF3               	btfsc	(prodl),c,7
  2433+ 0015C0  68E8               	setf	wreg
  2434+ 0015C2  0101               	movlb	1	; () banked
  2435+ 0015C4  230B               	addwfc	(??_ButtonDown+2+1)&0ffh
  2436+ 0015C6  C10A  F134         	movff	??_ButtonDown+2+0,(?_glcdWriteString)
  2437+ 0015CA  C10B  F135         	movff	??_ButtonDown+2+1,(?_glcdWriteString+1)
  2438+ 0015CE  EC54  F019         	call	_glcdWriteString	;wreg free
  2439+                          	line	432
  2440+ 0015D2  0101               	movlb	1	; () banked
  2441+ 0015D4  0101               	movlb	1	; () banked
  2442+ 0015D6  2B09               	incf	((ButtonDown@y))&0ffh
  2443+ 0015D8  0E06               	movlw	(07h-1)
  2444+ 0015DA  0101               	movlb	1	; () banked
  2445+ 0015DC  0101               	movlb	1	; () banked
  2446+ 0015DE  6509               	cpfsgt	((ButtonDown@y))&0ffh
  2447+ 0015E0  EFF4  F00A         	goto	u3781
  2448+ 0015E4  EFF6  F00A         	goto	u3780
  2449+ 0015E8                     u3781:
  2450+ 0015E8  EFC2  F00A         	goto	l651
  2451+ 0015EC                     u3780:
  2452+                          	
  2453+ 0015EC                     l652:		; BSR set to: ?
  2454+                          
  2455+                          	line	437
  2456+                          ;main.c: 436: }
  2457+                          ;main.c: 437: while((!RB2))
  2458+ 0015EC  EFF8  F00A         	goto	l654
  2459+                          	line	438
  2460+                          ;main.c: 438: ;
  2461+                          	
  2462+ 0015F0                     l654:		; BSR set to: ?
  2463+                          
  2464+                          	line	437
  2465+ 0015F0  A481               	btfss	c:(31754/8),(31754)&7	;volatile
  2466+ 0015F2  EFFD  F00A         	goto	u3791
  2467+ 0015F6  EFFF  F00A         	goto	u3790
  2468+ 0015FA                     u3791:
  2469+ 0015FA  EFF8  F00A         	goto	l654
  2470+ 0015FE                     u3790:
  2471+                          	
  2472+ 0015FE                     l656:		; BSR set to: ?
  2473+                          
  2474+                          	line	439
  2475+                          ;main.c: 439: Vdelay_ms(50);
  2476+ 0015FE  0E32               	movlw	low(032h)
  2477+ 001600  0101               	movlb	1	; () banked
  2478+ 001602  0101               	movlb	1	; () banked
  2479+ 001604  6F0C               	movwf	((?_Vdelay_ms))&0ffh
  2480+ 001606  0E00               	movlw	high(032h)
  2481+ 001608  0101               	movlb	1	; () banked
  2482+ 00160A  6F0D               	movwf	((?_Vdelay_ms+1))&0ffh
  2483+ 00160C  EC6A  F018         	call	_Vdelay_ms	;wreg free
  2484+                          	line	441
  2485+                          ;main.c: 441: DrawTZSetting(yZone);
  2486+ 001610  C108  F10C         	movff	(ButtonDown@yZone),(?_DrawTZSetting)
  2487+ 001614  ECB0  F016         	call	_DrawTZSetting	;wreg free
  2488+                          	line	443
  2489+                          ;main.c: 443: while(1)
  2490+                          	
  2491+ 001618                     l658:		; BSR set to: ?
  2492+                          
  2493+                          	line	445
  2494+                          ;main.c: 444: {
  2495+                          ;main.c: 445: Vdelay_ms(50);
  2496+ 001618  0E32               	movlw	low(032h)
  2497+ 00161A  0101               	movlb	1	; () banked
  2498+ 00161C  0101               	movlb	1	; () banked
  2499+ 00161E  6F0C               	movwf	((?_Vdelay_ms))&0ffh
  2500+ 001620  0E00               	movlw	high(032h)
  2501+ 001622  0101               	movlb	1	; () banked
  2502+ 001624  6F0D               	movwf	((?_Vdelay_ms+1))&0ffh
  2503+ 001626  EC6A  F018         	call	_Vdelay_ms	;wreg free
  2504+                          	line	446
  2505+                          ;main.c: 446: while((RB2))
  2506+ 00162A  EF17  F00B         	goto	l660
  2507+                          	line	447
  2508+                          ;main.c: 447: ;
  2509+                          	
  2510+ 00162E                     l660:		; BSR set to: ?
  2511+                          
  2512+                          	line	446
  2513+ 00162E  B481               	btfsc	c:(31754/8),(31754)&7	;volatile
  2514+ 001630  EF1C  F00B         	goto	u3801
  2515+ 001634  EF1E  F00B         	goto	u3800
  2516+ 001638                     u3801:
  2517+ 001638  EF17  F00B         	goto	l660
  2518+ 00163C                     u3800:
  2519+                          	
  2520+ 00163C                     l662:		; BSR set to: ?
  2521+                          
  2522+                          	line	448
  2523+                          ;main.c: 448: Vdelay_ms(50);
  2524+ 00163C  0E32               	movlw	low(032h)
  2525+ 00163E  0101               	movlb	1	; () banked
  2526+ 001640  0101               	movlb	1	; () banked
  2527+ 001642  6F0C               	movwf	((?_Vdelay_ms))&0ffh
  2528+ 001644  0E00               	movlw	high(032h)
  2529+ 001646  0101               	movlb	1	; () banked
  2530+ 001648  6F0D               	movwf	((?_Vdelay_ms+1))&0ffh
  2531+ 00164A  EC6A  F018         	call	_Vdelay_ms	;wreg free
  2532+                          	line	451
  2533+                          ;main.c: 451: for(y = 0; y < 50; y++)
  2534+ 00164E  0101               	movlb	1	; () banked
  2535+ 001650  6F0A               	movwf	(??_ButtonDown+2+0)&0ffh
  2536+ 001652  0E00               	movlw	low(0)
  2537+ 001654  0101               	movlb	1	; () banked
  2538+ 001656  0101               	movlb	1	; () banked
  2539+ 001658  6F09               	movwf	((ButtonDown@y))&0ffh
  2540+ 00165A  0101               	movlb	1	; () banked
  2541+ 00165C  510A               	movf	(??_ButtonDown+2+0)&0ffh,w
  2542+ 00165E  0E31               	movlw	(032h-1)
  2543+ 001660  0101               	movlb	1	; () banked
  2544+ 001662  0101               	movlb	1	; () banked
  2545+ 001664  6509               	cpfsgt	((ButtonDown@y))&0ffh
  2546+ 001666  EF37  F00B         	goto	u3811
  2547+ 00166A  EF39  F00B         	goto	u3810
  2548+ 00166E                     u3811:
  2549+ 00166E  EF3B  F00B         	goto	l663
  2550+ 001672                     u3810:
  2551+ 001672  EF72  F00B         	goto	l664
  2552+                          	line	452
  2553+                          	
  2554+ 001676                     l663:		; BSR set to: ?
  2555+                          
  2556+                          	line	453
  2557+                          ;main.c: 452: {
  2558+                          ;main.c: 453: Vdelay_ms(100);
  2559+ 001676  0E64               	movlw	low(064h)
  2560  001678  0101               	movlb	1	; () banked
  2561  00167A  0101               	movlb	1	; () banked
  2562  00167C  6F0C               	movwf	((?_Vdelay_ms))&0ffh
  2563  00167E  0E00               	movlw	high(064h)
  2564  001680  0101               	movlb	1	; () banked
  2565  001682  6F0D               	movwf	((?_Vdelay_ms+1))&0ffh
  2566  001684  EC6A  F018         	call	_Vdelay_ms	;wreg free
  2567                           	line	454
  2568                           ;main.c: 454: if((RB2))
  2569  001688  A481               	btfss	c:(31754/8),(31754)&7	;volatile
  2570  00168A  EF49  F00B         	goto	u3821
  2571  00168E  EF4B  F00B         	goto	u3820
  2572  001692                     u3821:
  2573  001692  EF65  F00B         	goto	l666
  2574  001696                     u3820:
  2575                           	line	457
  2576                           ;main.c: 455: {
  2577                           ;main.c: 457: if(++yZone > 10)
  2578  001696  0101               	movlb	1	; () banked
  2579  001698  0101               	movlb	1	; () banked
  2580  00169A  2B08               	incf	((ButtonDown@yZone))&0ffh
  2581  00169C  0E0A               	movlw	(0Bh-1)
  2582  00169E  0101               	movlb	1	; () banked
  2583  0016A0  6508               	cpfsgt	((ButtonDown@yZone))&0ffh
  2584  0016A2  EF55  F00B         	goto	u3831
  2585  0016A6  EF57  F00B         	goto	u3830
  2586  0016AA                     u3831:
  2587  0016AA  EF5F  F00B         	goto	l667
  2588  0016AE                     u3830:
  2589                           	line	458
  2590                           ;main.c: 458: yZone = 4;
  2591  0016AE  0101               	movlb	1	; () banked
  2592  0016B0  6F0A               	movwf	(??_ButtonDown+2+0)&0ffh
  2593  0016B2  0E04               	movlw	low(04h)
  2594  0016B4  0101               	movlb	1	; () banked
  2595  0016B6  0101               	movlb	1	; () banked
  2596  0016B8  6F08               	movwf	((ButtonDown@yZone))&0ffh
  2597  0016BA  0101               	movlb	1	; () banked
  2598  0016BC  510A               	movf	(??_ButtonDown+2+0)&0ffh,w
  2599                           	
  2600  0016BE                     l667:		; BSR set to: ?
  2601                           
  2602                           	line	459
  2603                           ;main.c: 459: DrawTZSetting(yZone);
  2604  0016BE  C108  F10C         	movff	(ButtonDown@yZone),(?_DrawTZSetting)
  2605  0016C2  ECB0  F016         	call	_DrawTZSetting	;wreg free
  2606                           	line	460
  2607                           ;main.c: 460: break;
  2608  0016C6  EF72  F00B         	goto	l664
  2609                           	line	461
  2610                           	
  2611  0016CA                     l666:		; BSR set to: ?
  2612                           
  2613                           	line	451
  2614  0016CA  0101               	movlb	1	; () banked
  2615  0016CC  0101               	movlb	1	; () banked
  2616  0016CE  2B09               	incf	((ButtonDown@y))&0ffh
  2617  0016D0  0E31               	movlw	(032h-1)
  2618  0016D2  0101               	movlb	1	; () banked
  2619  0016D4  0101               	movlb	1	; () banked
  2620  0016D6  6509               	cpfsgt	((ButtonDown@y))&0ffh
  2621  0016D8  EF70  F00B         	goto	u3841
  2622  0016DC  EF72  F00B         	goto	u3840
  2623  0016E0                     u3841:
  2624  0016E0  EF3B  F00B         	goto	l663
  2625  0016E4                     u3840:
  2626                           	
  2627  0016E4                     l664:		; BSR set to: ?
  2628                           
  2629                           	line	465
  2630                           ;main.c: 461: }
  2631                           ;main.c: 462: }
  2632                           ;main.c: 465: if(y >= 50)
  2633  0016E4  0E31               	movlw	(032h-1)
  2634  0016E6  0101               	movlb	1	; () banked
  2635  0016E8  0101               	movlb	1	; () banked
  2636  0016EA  6509               	cpfsgt	((ButtonDown@y))&0ffh
  2637  0016EC  EF7A  F00B         	goto	u3851
  2638  0016F0  EF7C  F00B         	goto	u3850
  2639  0016F4                     u3851:
  2640  0016F4  EF7E  F00B         	goto	l657
  2641  0016F8                     u3850:
  2642                           	line	466
  2643                           ;main.c: 466: break;
  2644  0016F8  EF80  F00B         	goto	l659
  2645                           	line	467
  2646                           	
  2647  0016FC                     l657:		; BSR set to: ?
  2648                           
  2649                           	line	443
  2650  0016FC  EF0C  F00B         	goto	l658
  2651                           	
  2652  001700                     l659:		; BSR set to: ?
  2653                           
  2654                           	line	469
  2655                           ;main.c: 467: }
  2656                           ;main.c: 469: rtcWriteRam( (UINT8)0xC2, yZone);
  2657  001700  C108  F136         	movff	(ButtonDown@yZone),0+(?_rtcWriteRam+01h)
  2658  001704  0101               	movlb	1	; () banked
  2659  001706  6F0A               	movwf	(??_ButtonDown+2+0)&0ffh
  2660  001708  0EC2               	movlw	low(0C2h)
  2661  00170A  0101               	movlb	1	; () banked
  2662  00170C  0101               	movlb	1	; () banked
  2663  00170E  6F35               	movwf	((?_rtcWriteRam))&0ffh
  2664  001710  0101               	movlb	1	; () banked
  2665  001712  510A               	movf	(??_ButtonDown+2+0)&0ffh,w
  2666  001714  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  2667                           	line	470
  2668                           ;main.c: 470: g_yUpdate = 1;
  2669  001718  0E01               	movlw	low(01h)
  2670  00171A  6E0D               	movwf	((c:13)),c	;volatile
  2671                           	line	472
  2672                           ;main.c: 472: }
  2673  00171C                     l646:
  2674                           			; BSR set to: ?
  2675                           
  2676  00171C  0012               	return
  2677                           	opt stack 0
  2678                           GLOBAL __end_of_ButtonDown
  2679  00171E                     	__end_of_ButtonDown:
  2680                           	FNSIZE	_ButtonDown,4,0
  2681                           ; =============== function _ButtonDown ends ====
                                 ========
  2682                           
  2683                           	signat	_ButtonDown,88
  2684                           	global	_wwvGetTime
  2685                           	global	??_wwvGetTime
  2686                           	global	?_wwvGetTime
  2687                           
  2688                           ; *************** function _wwvGetTime *********
                                 ********
  2689                           ; Defined at:
  2690                           ;		line 129 in file "wwv.c"
  2691                           ; Parameters:
  2692                           ;		pt             size:   2offs:   0	type: PTR s
                                 truct _TIMESTRUCT; Largest target is 7
  2693                           ;		 -> main@tt(7), 
  2694                           ; Auto variables:
  2695                           ;		yDays2      	       	type: unsigned char 
  2696                           ;		yTZ         	       	type: unsigned char 
  2697                           ;		y           	       	type: unsigned char 
  2698                           ;		yLeap       	       	type: unsigned char 
  2699                           ;		yYears1     	       	type: unsigned char 
  2700                           ;		yYears2     	       	type: unsigned char 
  2701                           ;		yDays1      	       	type: unsigned char 
  2702                           ;		yMin        	       	type: unsigned char 
  2703                           ;		yUpper      	       	type: unsigned char 
  2704                           ;		yDST        	       	type: unsigned char 
  2705                           ;		yHour       	       	type: unsigned char 
  2706                           ;		yLower      	       	type: unsigned char 
  2707                           ;		wDays       	       	type: unsigned int 
  2708                           ;		sz          	       	type: unsigned char [16]
  2709                           ; Return value:
  2710                           ;		type: unsigned char 
  2711                           ;		size: 1
  2712                           ; Registers used:
  2713                           ;		wreg, fsr0l, fsr0h, status,2, status,0, tblpt
                                 rl, tblptrh, tblptru, tablat, prodl, prodh, csta
                                 ck
  2714                           ; Tracked objects:
  2715                           ;		On entry : 0/0
  2716                           ;		On exit  : 0/0
  2717                           ;		Unchanged: 0/0
  2718                           ; Data sizes:
  2719                           ;		Autos:   36
  2720                           ;		Params:   2
  2721                           ;		Temp:     2
  2722                           ;		Total:   40
  2723                           ; This function calls:
  2724                           ;		_glcdClearScreen
  2725                           ;		_glcdMoveTo
  2726                           ;		_glcdWriteString
  2727                           ;		_rtcReadRam
  2728                           ;		_glcdMakeLastSyncString
  2729                           ;		_wwvStartFrameTimer
  2730                           ;		_wwvGetSyncBit
  2731                           ;		_glcdWriteChar
  2732                           ;		_wwvRead8BitFrame
  2733                           ;		_wwvGetAnyBit
  2734                           ;		_rtcBCDToDec
  2735                           ;		_rtcWriteRam
  2736                           ;		_wwvMakeTimeStruct
  2737                           ;		_rtcBumpLastSync
  2738                           ;		_rtcSaveLastSync
  2739                           ; This function is called by:
  2740                           ;		_main
  2741                           ; This function uses a non-reentrant model
  2742                           ; 
  2743                                   psect   text6,class=CODE,space=0,reloc=2
  2744                           
  2745                           	opt lm
  2746                           	file	"wwv.c"
  2747                           	line	129
  2748  000000                     	__size_of_wwvGetTime	equ	__end_of_wwvGetTime-_w
                                 wvGetTime
  2749                           ;wwv.c: 128: UINT8 wwvGetTime(TIMESTRUCT *pt)
  2750                           ;wwv.c: 129: {
  2751                           	
  2752  00003A                     _wwvGetTime:		; BSR set to: ?
  2753                           
  2754                           	opt stack 29
  2755                           	line	136
  2756  00003A  EC5D  F015         	call	_glcdClearScreen	;wreg free
  2757                           	line	137
  2758                           ;wwv.c: 137: glcdMoveTo(0, 0);
  2759  00003E  0101               	movlb	1	; () banked
  2760  000040  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2761  000042  0E00               	movlw	low(0)
  2762  000044  0101               	movlb	1	; () banked
  2763  000046  0101               	movlb	1	; () banked
  2764  000048  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  2765  00004A  0101               	movlb	1	; () banked
  2766  00004C  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2767  00004E  0101               	movlb	1	; () banked
  2768  000050  6F2F               	movwf	(??_wwvGetTime+37+0)&0ffh
  2769  000052  0E00               	movlw	low(0)
  2770  000054  0101               	movlb	1	; () banked
  2771  000056  0101               	movlb	1	; () banked
  2772  000058  6F34               	movwf	((?_glcdMoveTo))&0ffh
  2773  00005A  0101               	movlb	1	; () banked
  2774  00005C  512F               	movf	(??_wwvGetTime+37+0)&0ffh,w
  2775  00005E  EC69  F01A         	call	_glcdMoveTo	;wreg free
  2776                           	line	138
  2777                           ;wwv.c: 138: glcdWriteString((UINT8*) cszLastSyn
                                 c);
  2778  000062  0EB2               	movlw	low(_cszLastSync)
  2779  000064  0101               	movlb	1	; () banked
  2780  000066  0101               	movlb	1	; () banked
  2781  000068  6F34               	movwf	((?_glcdWriteString))&0ffh
  2782  00006A  0E3F               	movlw	high(_cszLastSync)
  2783  00006C  0101               	movlb	1	; () banked
  2784  00006E  6F35               	movwf	((?_glcdWriteString+1))&0ffh
  2785  000070  EC54  F019         	call	_glcdWriteString	;wreg free
  2786                           	line	141
  2787                           ;wwv.c: 140: glcdMakeLastSyncString(sz, rtcReadR
                                 am((UINT8)0xCF), rtcReadRam((UINT8)0xD1),
  2788                           ;wwv.c: 141: rtcReadRam((UINT8)0xD3), rtcReadRam
                                 ((UINT8)0xD5) );
  2789  000074  0101               	movlb	1	; () banked
  2790  000076  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2791  000078  0ED3               	movlw	low(0D3h)
  2792  00007A  0101               	movlb	1	; () banked
  2793  00007C  0101               	movlb	1	; () banked
  2794  00007E  6F35               	movwf	((?_rtcReadRam))&0ffh
  2795  000080  0101               	movlb	1	; () banked
  2796  000082  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2797  000084  EC65  F01B         	call	_rtcReadRam	;wreg free
  2798  000088  0101               	movlb	1	; () banked
  2799  00008A  0101               	movlb	1	; () banked
  2800  00008C  6F0A               	movwf	((_wwvGetTime$1280))&0ffh
  2801  00008E  0101               	movlb	1	; () banked
  2802  000090  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2803  000092  0ED1               	movlw	low(0D1h)
  2804  000094  0101               	movlb	1	; () banked
  2805  000096  0101               	movlb	1	; () banked
  2806  000098  6F35               	movwf	((?_rtcReadRam))&0ffh
  2807  00009A  0101               	movlb	1	; () banked
  2808  00009C  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2809  00009E  EC65  F01B         	call	_rtcReadRam	;wreg free
  2810  0000A2  0101               	movlb	1	; () banked
  2811  0000A4  0101               	movlb	1	; () banked
  2812  0000A6  6F0B               	movwf	((_wwvGetTime$1281))&0ffh
  2813  0000A8  0101               	movlb	1	; () banked
  2814  0000AA  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2815  0000AC  0ECF               	movlw	low(0CFh)
  2816  0000AE  0101               	movlb	1	; () banked
  2817  0000B0  0101               	movlb	1	; () banked
  2818  0000B2  6F35               	movwf	((?_rtcReadRam))&0ffh
  2819  0000B4  0101               	movlb	1	; () banked
  2820  0000B6  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2821  0000B8  EC65  F01B         	call	_rtcReadRam	;wreg free
  2822  0000BC  0101               	movlb	1	; () banked
  2823  0000BE  0101               	movlb	1	; () banked
  2824  0000C0  6F0C               	movwf	((_wwvGetTime$1282))&0ffh
  2825  0000C2  0101               	movlb	1	; () banked
  2826  0000C4  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2827  0000C6  0ED5               	movlw	low(0D5h)
  2828  0000C8  0101               	movlb	1	; () banked
  2829  0000CA  0101               	movlb	1	; () banked
  2830  0000CC  6F35               	movwf	((?_rtcReadRam))&0ffh
  2831  0000CE  0101               	movlb	1	; () banked
  2832  0000D0  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2833  0000D2  EC65  F01B         	call	_rtcReadRam	;wreg free
  2834  0000D6  0101               	movlb	1	; () banked
  2835  0000D8  0101               	movlb	1	; () banked
  2836  0000DA  6F35               	movwf	(0+(?_glcdMakeLastSyncString+05h))&0ffh
  2837  0000DC  C10A  F134         	movff	(_wwvGetTime$1280),0+(?_glcdMakeLastSyncS
                                 tring+04h)
  2838  0000E0  C10B  F133         	movff	(_wwvGetTime$1281),0+(?_glcdMakeLastSyncS
                                 tring+03h)
  2839  0000E4  C10C  F132         	movff	(_wwvGetTime$1282),0+(?_glcdMakeLastSyncS
                                 tring+02h)
  2840  0000E8  0101               	movlb	1	; () banked
  2841  0000EA  0E1E               	movlw	low(wwvGetTime@sz)
  2842  0000EC  0101               	movlb	1	; () banked
  2843  0000EE  0101               	movlb	1	; () banked
  2844  0000F0  6F30               	movwf	((?_glcdMakeLastSyncString))&0ffh
  2845  0000F2  0101               	movlb	1	; () banked
  2846  0000F4  0E01               	movlw	high(wwvGetTime@sz)
  2847  0000F6  0101               	movlb	1	; () banked
  2848  0000F8  6F31               	movwf	((?_glcdMakeLastSyncString+1))&0ffh
  2849  0000FA  EC8F  F00B         	call	_glcdMakeLastSyncString	;wreg free
  2850                           	line	143
  2851                           ;wwv.c: 143: glcdMoveTo(0, 1);
  2852  0000FE  0101               	movlb	1	; () banked
  2853  000100  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2854  000102  0E01               	movlw	low(01h)
  2855  000104  0101               	movlb	1	; () banked
  2856  000106  0101               	movlb	1	; () banked
  2857  000108  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  2858  00010A  0101               	movlb	1	; () banked
  2859  00010C  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2860  00010E  0101               	movlb	1	; () banked
  2861  000110  6F2F               	movwf	(??_wwvGetTime+37+0)&0ffh
  2862  000112  0E00               	movlw	low(0)
  2863  000114  0101               	movlb	1	; () banked
  2864  000116  0101               	movlb	1	; () banked
  2865  000118  6F34               	movwf	((?_glcdMoveTo))&0ffh
  2866  00011A  0101               	movlb	1	; () banked
  2867  00011C  512F               	movf	(??_wwvGetTime+37+0)&0ffh,w
  2868  00011E  EC69  F01A         	call	_glcdMoveTo	;wreg free
  2869                           	line	144
  2870                           ;wwv.c: 144: glcdWriteString(sz);
  2871  000122  0101               	movlb	1	; () banked
  2872  000124  0E1E               	movlw	low(wwvGetTime@sz)
  2873  000126  0101               	movlb	1	; () banked
  2874  000128  0101               	movlb	1	; () banked
  2875  00012A  6F34               	movwf	((?_glcdWriteString))&0ffh
  2876  00012C  0101               	movlb	1	; () banked
  2877  00012E  0E01               	movlw	high(wwvGetTime@sz)
  2878  000130  0101               	movlb	1	; () banked
  2879  000132  6F35               	movwf	((?_glcdWriteString+1))&0ffh
  2880  000134  EC54  F019         	call	_glcdWriteString	;wreg free
  2881                           	line	147
  2882                           ;wwv.c: 146: glcdMakeLastSyncString(sz, rtcReadR
                                 am((UINT8)0xC5), rtcReadRam((UINT8)0xC7),
  2883                           ;wwv.c: 147: rtcReadRam((UINT8)0xC9), rtcReadRam
                                 ((UINT8)0xCB) );
  2884  000138  0101               	movlb	1	; () banked
  2885  00013A  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2886  00013C  0EC9               	movlw	low(0C9h)
  2887  00013E  0101               	movlb	1	; () banked
  2888  000140  0101               	movlb	1	; () banked
  2889  000142  6F35               	movwf	((?_rtcReadRam))&0ffh
  2890  000144  0101               	movlb	1	; () banked
  2891  000146  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2892  000148  EC65  F01B         	call	_rtcReadRam	;wreg free
  2893  00014C  0101               	movlb	1	; () banked
  2894  00014E  0101               	movlb	1	; () banked
  2895  000150  6F0D               	movwf	((_wwvGetTime$1283))&0ffh
  2896  000152  0101               	movlb	1	; () banked
  2897  000154  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2898  000156  0EC7               	movlw	low(0C7h)
  2899  000158  0101               	movlb	1	; () banked
  2900  00015A  0101               	movlb	1	; () banked
  2901  00015C  6F35               	movwf	((?_rtcReadRam))&0ffh
  2902  00015E  0101               	movlb	1	; () banked
  2903  000160  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2904  000162  EC65  F01B         	call	_rtcReadRam	;wreg free
  2905  000166  0101               	movlb	1	; () banked
  2906  000168  0101               	movlb	1	; () banked
  2907  00016A  6F0E               	movwf	((_wwvGetTime$1284))&0ffh
  2908  00016C  0101               	movlb	1	; () banked
  2909  00016E  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2910  000170  0EC5               	movlw	low(0C5h)
  2911  000172  0101               	movlb	1	; () banked
  2912  000174  0101               	movlb	1	; () banked
  2913  000176  6F35               	movwf	((?_rtcReadRam))&0ffh
  2914  000178  0101               	movlb	1	; () banked
  2915  00017A  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2916  00017C  EC65  F01B         	call	_rtcReadRam	;wreg free
  2917  000180  0101               	movlb	1	; () banked
  2918  000182  0101               	movlb	1	; () banked
  2919  000184  6F0F               	movwf	((_wwvGetTime$1285))&0ffh
  2920  000186  0101               	movlb	1	; () banked
  2921  000188  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2922  00018A  0ECB               	movlw	low(0CBh)
  2923  00018C  0101               	movlb	1	; () banked
  2924  00018E  0101               	movlb	1	; () banked
  2925  000190  6F35               	movwf	((?_rtcReadRam))&0ffh
  2926  000192  0101               	movlb	1	; () banked
  2927  000194  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2928  000196  EC65  F01B         	call	_rtcReadRam	;wreg free
  2929  00019A  0101               	movlb	1	; () banked
  2930  00019C  0101               	movlb	1	; () banked
  2931  00019E  6F35               	movwf	(0+(?_glcdMakeLastSyncString+05h))&0ffh
  2932  0001A0  C10D  F134         	movff	(_wwvGetTime$1283),0+(?_glcdMakeLastSyncS
                                 tring+04h)
  2933  0001A4  C10E  F133         	movff	(_wwvGetTime$1284),0+(?_glcdMakeLastSyncS
                                 tring+03h)
  2934  0001A8  C10F  F132         	movff	(_wwvGetTime$1285),0+(?_glcdMakeLastSyncS
                                 tring+02h)
  2935  0001AC  0101               	movlb	1	; () banked
  2936  0001AE  0E1E               	movlw	low(wwvGetTime@sz)
  2937  0001B0  0101               	movlb	1	; () banked
  2938  0001B2  0101               	movlb	1	; () banked
  2939  0001B4  6F30               	movwf	((?_glcdMakeLastSyncString))&0ffh
  2940  0001B6  0101               	movlb	1	; () banked
  2941  0001B8  0E01               	movlw	high(wwvGetTime@sz)
  2942  0001BA  0101               	movlb	1	; () banked
  2943  0001BC  6F31               	movwf	((?_glcdMakeLastSyncString+1))&0ffh
  2944  0001BE  EC8F  F00B         	call	_glcdMakeLastSyncString	;wreg free
  2945                           	line	149
  2946                           ;wwv.c: 149: glcdMoveTo(0, 2);
  2947  0001C2  0101               	movlb	1	; () banked
  2948  0001C4  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2949  0001C6  0E02               	movlw	low(02h)
  2950  0001C8  0101               	movlb	1	; () banked
  2951  0001CA  0101               	movlb	1	; () banked
  2952  0001CC  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  2953  0001CE  0101               	movlb	1	; () banked
  2954  0001D0  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2955  0001D2  0101               	movlb	1	; () banked
  2956  0001D4  6F2F               	movwf	(??_wwvGetTime+37+0)&0ffh
  2957  0001D6  0E00               	movlw	low(0)
  2958  0001D8  0101               	movlb	1	; () banked
  2959  0001DA  0101               	movlb	1	; () banked
  2960  0001DC  6F34               	movwf	((?_glcdMoveTo))&0ffh
  2961  0001DE  0101               	movlb	1	; () banked
  2962  0001E0  512F               	movf	(??_wwvGetTime+37+0)&0ffh,w
  2963  0001E2  EC69  F01A         	call	_glcdMoveTo	;wreg free
  2964                           	line	150
  2965                           ;wwv.c: 150: glcdWriteString(sz);
  2966  0001E6  0101               	movlb	1	; () banked
  2967  0001E8  0E1E               	movlw	low(wwvGetTime@sz)
  2968  0001EA  0101               	movlb	1	; () banked
  2969  0001EC  0101               	movlb	1	; () banked
  2970  0001EE  6F34               	movwf	((?_glcdWriteString))&0ffh
  2971  0001F0  0101               	movlb	1	; () banked
  2972  0001F2  0E01               	movlw	high(wwvGetTime@sz)
  2973  0001F4  0101               	movlb	1	; () banked
  2974  0001F6  6F35               	movwf	((?_glcdWriteString+1))&0ffh
  2975  0001F8  EC54  F019         	call	_glcdWriteString	;wreg free
  2976                           	line	152
  2977                           ;wwv.c: 152: glcdMoveTo(0, 4);
  2978  0001FC  0101               	movlb	1	; () banked
  2979  0001FE  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  2980  000200  0E04               	movlw	low(04h)
  2981  000202  0101               	movlb	1	; () banked
  2982  000204  0101               	movlb	1	; () banked
  2983  000206  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  2984  000208  0101               	movlb	1	; () banked
  2985  00020A  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  2986  00020C  0101               	movlb	1	; () banked
  2987  00020E  6F2F               	movwf	(??_wwvGetTime+37+0)&0ffh
  2988  000210  0E00               	movlw	low(0)
  2989  000212  0101               	movlb	1	; () banked
  2990  000214  0101               	movlb	1	; () banked
  2991  000216  6F34               	movwf	((?_glcdMoveTo))&0ffh
  2992  000218  0101               	movlb	1	; () banked
  2993  00021A  512F               	movf	(??_wwvGetTime+37+0)&0ffh,w
  2994  00021C  EC69  F01A         	call	_glcdMoveTo	;wreg free
  2995                           	line	153
  2996                           ;wwv.c: 153: glcdWriteString((UINT8*) cszSync);
  2997  000220  0EE8               	movlw	low(_cszSync)
  2998  000222  0101               	movlb	1	; () banked
  2999  000224  0101               	movlb	1	; () banked
  3000  000226  6F34               	movwf	((?_glcdWriteString))&0ffh
  3001  000228  0E3F               	movlw	high(_cszSync)
  3002  00022A  0101               	movlb	1	; () banked
  3003  00022C  6F35               	movwf	((?_glcdWriteString+1))&0ffh
  3004  00022E  EC54  F019         	call	_glcdWriteString	;wreg free
  3005                           	line	154
  3006                           ;wwv.c: 154: glcdMoveTo(0, 5);
  3007  000232  0101               	movlb	1	; () banked
  3008  000234  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3009  000236  0E05               	movlw	low(05h)
  3010  000238  0101               	movlb	1	; () banked
  3011  00023A  0101               	movlb	1	; () banked
  3012  00023C  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  3013  00023E  0101               	movlb	1	; () banked
  3014  000240  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3015  000242  0101               	movlb	1	; () banked
  3016  000244  6F2F               	movwf	(??_wwvGetTime+37+0)&0ffh
  3017  000246  0E00               	movlw	low(0)
  3018  000248  0101               	movlb	1	; () banked
  3019  00024A  0101               	movlb	1	; () banked
  3020  00024C  6F34               	movwf	((?_glcdMoveTo))&0ffh
  3021  00024E  0101               	movlb	1	; () banked
  3022  000250  512F               	movf	(??_wwvGetTime+37+0)&0ffh,w
  3023  000252  EC69  F01A         	call	_glcdMoveTo	;wreg free
  3024                           	line	156
  3025                           ;wwv.c: 156: wwvStartFrameTimer();
  3026  000256  EC9C  F01B         	call	_wwvStartFrameTimer	;wreg free
  3027                           	line	159
  3028                           ;wwv.c: 159: while(!RA2)
  3029  00025A  EF3B  F001         	goto	l1253
  3030                           	
  3031  00025E                     l1254:		; BSR set to: ?
  3032                           
  3033                           	line	161
  3034                           ;wwv.c: 160: {
  3035                           ;wwv.c: 161: LATA0 = 1;
  3036  00025E  8089               	bsf	c:(31816/8),(31816)&7	;volatile
  3037                           	line	162
  3038                           ;wwv.c: 162: if(g_yTimedOut)
  3039  000260  5009               	movf	((c:9)),c,w	;volatile
  3040  000262  B4D8               	btfsc	status,2
  3041  000264  EF36  F001         	goto	u3861
  3042  000268  EF38  F001         	goto	u3860
  3043  00026C                     u3861:
  3044  00026C  EF3B  F001         	goto	l1253
  3045  000270                     u3860:
  3046                           	line	163
  3047                           ;wwv.c: 163: return 0;
  3048  000270  0E00               	movlw	(0)&0ffh
  3049  000272  EF33  F004         	goto	l1252
  3050                           	line	164
  3051                           	
  3052  000276                     l1253:		; BSR set to: ?
  3053                           
  3054                           	line	159
  3055  000276  A480               	btfss	c:(31746/8),(31746)&7	;volatile
  3056  000278  EF40  F001         	goto	u3871
  3057  00027C  EF42  F001         	goto	u3870
  3058  000280                     u3871:
  3059  000280  EF2F  F001         	goto	l1254
  3060  000284                     u3870:
  3061                           	
  3062  000284                     l1255:		; BSR set to: ?
  3063                           
  3064                           	line	167
  3065                           ;wwv.c: 164: }
  3066                           ;wwv.c: 167: while(1)
  3067                           	
  3068  000284                     l1258:		; BSR set to: ?
  3069                           
  3070                           	line	169
  3071                           ;wwv.c: 168: {
  3072                           ;wwv.c: 169: if(g_yTimedOut)
  3073  000284  5009               	movf	((c:9)),c,w	;volatile
  3074  000286  B4D8               	btfsc	status,2
  3075  000288  EF48  F001         	goto	u3881
  3076  00028C  EF4A  F001         	goto	u3880
  3077  000290                     u3881:
  3078  000290  EF4D  F001         	goto	l1260
  3079  000294                     u3880:
  3080                           	line	170
  3081                           ;wwv.c: 170: return 0;
  3082  000294  0E00               	movlw	(0)&0ffh
  3083  000296  EF33  F004         	goto	l1252
  3084                           	
  3085  00029A                     l1260:		; BSR set to: ?
  3086                           
  3087                           	line	173
  3088                           ;wwv.c: 173: if(wwvGetSyncBit())
  3089  00029A  EC42  F01A         	call	_wwvGetSyncBit	;wreg free
  3090  00029E  0900               	iorlw	0
  3091  0002A0  B4D8               	btfsc	status,2
  3092  0002A2  EF55  F001         	goto	u3891
  3093  0002A6  EF57  F001         	goto	u3890
  3094  0002AA                     u3891:
  3095  0002AA  EF63  F001         	goto	l1257
  3096  0002AE                     u3890:
  3097                           	line	175
  3098                           ;wwv.c: 174: {
  3099                           ;wwv.c: 175: if(wwvGetSyncBit())
  3100  0002AE  EC42  F01A         	call	_wwvGetSyncBit	;wreg free
  3101  0002B2  0900               	iorlw	0
  3102  0002B4  B4D8               	btfsc	status,2
  3103  0002B6  EF5F  F001         	goto	u3901
  3104  0002BA  EF61  F001         	goto	u3900
  3105  0002BE                     u3901:
  3106  0002BE  EF63  F001         	goto	l1257
  3107  0002C2                     u3900:
  3108                           	line	176
  3109                           ;wwv.c: 176: break;
  3110  0002C2  EF65  F001         	goto	l1259
  3111                           	line	178
  3112                           	
  3113  0002C6                     l1257:		; BSR set to: ?
  3114                           
  3115                           	line	167
  3116  0002C6  EF42  F001         	goto	l1258
  3117                           	
  3118  0002CA                     l1259:		; BSR set to: ?
  3119                           
  3120                           	line	179
  3121                           ;wwv.c: 177: }
  3122                           ;wwv.c: 178: }
  3123                           ;wwv.c: 179: glcdWriteChar('S');
  3124  0002CA  0101               	movlb	1	; () banked
  3125  0002CC  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3126  0002CE  0E53               	movlw	low(053h)
  3127  0002D0  0101               	movlb	1	; () banked
  3128  0002D2  0101               	movlb	1	; () banked
  3129  0002D4  6F36               	movwf	((?_glcdWriteChar))&0ffh
  3130  0002D6  0101               	movlb	1	; () banked
  3131  0002D8  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3132  0002DA  ECC8  F014         	call	_glcdWriteChar	;wreg free
  3133                           	line	182
  3134                           ;wwv.c: 182: if(!wwvRead8BitFrame(&yMin))
  3135  0002DE  0101               	movlb	1	; () banked
  3136  0002E0  0E17               	movlw	low(wwvGetTime@yMin)
  3137  0002E2  0101               	movlb	1	; () banked
  3138  0002E4  0101               	movlb	1	; () banked
  3139  0002E6  6F30               	movwf	((?_wwvRead8BitFrame))&0ffh
  3140  0002E8  0101               	movlb	1	; () banked
  3141  0002EA  0E01               	movlw	high(wwvGetTime@yMin)
  3142  0002EC  0101               	movlb	1	; () banked
  3143  0002EE  6F31               	movwf	((?_wwvRead8BitFrame+1))&0ffh
  3144  0002F0  EC6B  F017         	call	_wwvRead8BitFrame	;wreg free
  3145  0002F4  0900               	iorlw	0
  3146  0002F6  A4D8               	btfss	status,2
  3147  0002F8  EF80  F001         	goto	u3911
  3148  0002FC  EF82  F001         	goto	u3910
  3149  000300                     u3911:
  3150  000300  EF85  F001         	goto	l1263
  3151  000304                     u3910:
  3152                           	line	183
  3153                           ;wwv.c: 183: return 0;
  3154  000304  0E00               	movlw	(0)&0ffh
  3155  000306  EF33  F004         	goto	l1252
  3156                           	
  3157  00030A                     l1263:		; BSR set to: ?
  3158                           
  3159                           	line	185
  3160                           ;wwv.c: 185: if(!wwvGetSyncBit())
  3161  00030A  EC42  F01A         	call	_wwvGetSyncBit	;wreg free
  3162  00030E  0900               	iorlw	0
  3163  000310  A4D8               	btfss	status,2
  3164  000312  EF8D  F001         	goto	u3921
  3165  000316  EF8F  F001         	goto	u3920
  3166  00031A                     u3921:
  3167  00031A  EF92  F001         	goto	l1264
  3168  00031E                     u3920:
  3169                           	line	186
  3170                           ;wwv.c: 186: return 0;
  3171  00031E  0E00               	movlw	(0)&0ffh
  3172  000320  EF33  F004         	goto	l1252
  3173                           	
  3174  000324                     l1264:		; BSR set to: ?
  3175                           
  3176                           	line	188
  3177                           ;wwv.c: 188: glcdWriteChar('1');
  3178  000324  0101               	movlb	1	; () banked
  3179  000326  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3180  000328  0E31               	movlw	low(031h)
  3181  00032A  0101               	movlb	1	; () banked
  3182  00032C  0101               	movlb	1	; () banked
  3183  00032E  6F36               	movwf	((?_glcdWriteChar))&0ffh
  3184  000330  0101               	movlb	1	; () banked
  3185  000332  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3186  000334  ECC8  F014         	call	_glcdWriteChar	;wreg free
  3187                           	line	191
  3188                           ;wwv.c: 191: if(wwvGetAnyBit() != 0x01)
  3189  000338  ECD0  F01A         	call	_wwvGetAnyBit	;wreg free
  3190  00033C  0101               	movlb	1	; () banked
  3191  00033E  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3192  000340  0101               	movlb	1	; () banked
  3193  000342  052E               	decf	((??_wwvGetTime+36+0))&0ffh,w
  3194  000344  B4D8               	btfsc	status,2
  3195  000346  EFA7  F001         	goto	u3931
  3196  00034A  EFA9  F001         	goto	u3930
  3197  00034E                     u3931:
  3198  00034E  EFAC  F001         	goto	l1265
  3199  000352                     u3930:
  3200                           	line	192
  3201                           ;wwv.c: 192: return 0;
  3202  000352  0E00               	movlw	(0)&0ffh
  3203  000354  EF33  F004         	goto	l1252
  3204                           	
  3205  000358                     l1265:		; BSR set to: ?
  3206                           
  3207                           	line	194
  3208                           ;wwv.c: 194: if(!wwvRead8BitFrame(&yHour))
  3209  000358  0101               	movlb	1	; () banked
  3210  00035A  0E1A               	movlw	low(wwvGetTime@yHour)
  3211  00035C  0101               	movlb	1	; () banked
  3212  00035E  0101               	movlb	1	; () banked
  3213  000360  6F30               	movwf	((?_wwvRead8BitFrame))&0ffh
  3214  000362  0101               	movlb	1	; () banked
  3215  000364  0E01               	movlw	high(wwvGetTime@yHour)
  3216  000366  0101               	movlb	1	; () banked
  3217  000368  6F31               	movwf	((?_wwvRead8BitFrame+1))&0ffh
  3218  00036A  EC6B  F017         	call	_wwvRead8BitFrame	;wreg free
  3219  00036E  0900               	iorlw	0
  3220  000370  A4D8               	btfss	status,2
  3221  000372  EFBD  F001         	goto	u3941
  3222  000376  EFBF  F001         	goto	u3940
  3223  00037A                     u3941:
  3224  00037A  EFC2  F001         	goto	l1266
  3225  00037E                     u3940:
  3226                           	line	195
  3227                           ;wwv.c: 195: return 0;
  3228  00037E  0E00               	movlw	(0)&0ffh
  3229  000380  EF33  F004         	goto	l1252
  3230                           	
  3231  000384                     l1266:		; BSR set to: ?
  3232                           
  3233                           	line	197
  3234                           ;wwv.c: 197: if(!wwvGetSyncBit())
  3235  000384  EC42  F01A         	call	_wwvGetSyncBit	;wreg free
  3236  000388  0900               	iorlw	0
  3237  00038A  A4D8               	btfss	status,2
  3238  00038C  EFCA  F001         	goto	u3951
  3239  000390  EFCC  F001         	goto	u3950
  3240  000394                     u3951:
  3241  000394  EFCF  F001         	goto	l1267
  3242  000398                     u3950:
  3243                           	line	198
  3244                           ;wwv.c: 198: return 0;
  3245  000398  0E00               	movlw	(0)&0ffh
  3246  00039A  EF33  F004         	goto	l1252
  3247                           	
  3248  00039E                     l1267:		; BSR set to: ?
  3249                           
  3250                           	line	200
  3251                           ;wwv.c: 200: glcdWriteChar('2');
  3252  00039E  0101               	movlb	1	; () banked
  3253  0003A0  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3254  0003A2  0E32               	movlw	low(032h)
  3255  0003A4  0101               	movlb	1	; () banked
  3256  0003A6  0101               	movlb	1	; () banked
  3257  0003A8  6F36               	movwf	((?_glcdWriteChar))&0ffh
  3258  0003AA  0101               	movlb	1	; () banked
  3259  0003AC  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3260  0003AE  ECC8  F014         	call	_glcdWriteChar	;wreg free
  3261                           	line	203
  3262                           ;wwv.c: 203: if(wwvGetAnyBit() != 0x01)
  3263  0003B2  ECD0  F01A         	call	_wwvGetAnyBit	;wreg free
  3264  0003B6  0101               	movlb	1	; () banked
  3265  0003B8  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3266  0003BA  0101               	movlb	1	; () banked
  3267  0003BC  052E               	decf	((??_wwvGetTime+36+0))&0ffh,w
  3268  0003BE  B4D8               	btfsc	status,2
  3269  0003C0  EFE4  F001         	goto	u3961
  3270  0003C4  EFE6  F001         	goto	u3960
  3271  0003C8                     u3961:
  3272  0003C8  EFE9  F001         	goto	l1268
  3273  0003CC                     u3960:
  3274                           	line	204
  3275                           ;wwv.c: 204: return 0;
  3276  0003CC  0E00               	movlw	(0)&0ffh
  3277  0003CE  EF33  F004         	goto	l1252
  3278                           	
  3279  0003D2                     l1268:		; BSR set to: ?
  3280                           
  3281                           	line	206
  3282                           ;wwv.c: 206: if(!wwvRead8BitFrame(&yDays1))
  3283  0003D2  0101               	movlb	1	; () banked
  3284  0003D4  0E16               	movlw	low(wwvGetTime@yDays1)
  3285  0003D6  0101               	movlb	1	; () banked
  3286  0003D8  0101               	movlb	1	; () banked
  3287  0003DA  6F30               	movwf	((?_wwvRead8BitFrame))&0ffh
  3288  0003DC  0101               	movlb	1	; () banked
  3289  0003DE  0E01               	movlw	high(wwvGetTime@yDays1)
  3290  0003E0  0101               	movlb	1	; () banked
  3291  0003E2  6F31               	movwf	((?_wwvRead8BitFrame+1))&0ffh
  3292  0003E4  EC6B  F017         	call	_wwvRead8BitFrame	;wreg free
  3293  0003E8  0900               	iorlw	0
  3294  0003EA  A4D8               	btfss	status,2
  3295  0003EC  EFFA  F001         	goto	u3971
  3296  0003F0  EFFC  F001         	goto	u3970
  3297  0003F4                     u3971:
  3298  0003F4  EFFF  F001         	goto	l1269
  3299  0003F8                     u3970:
  3300                           	line	207
  3301                           ;wwv.c: 207: return 0;
  3302  0003F8  0E00               	movlw	(0)&0ffh
  3303  0003FA  EF33  F004         	goto	l1252
  3304                           	
  3305  0003FE                     l1269:		; BSR set to: ?
  3306                           
  3307                           	line	209
  3308                           ;wwv.c: 209: if(!wwvGetSyncBit())
  3309  0003FE  EC42  F01A         	call	_wwvGetSyncBit	;wreg free
  3310  000402  0900               	iorlw	0
  3311  000404  A4D8               	btfss	status,2
  3312  000406  EF07  F002         	goto	u3981
  3313  00040A  EF09  F002         	goto	u3980
  3314  00040E                     u3981:
  3315  00040E  EF0C  F002         	goto	l1270
  3316  000412                     u3980:
  3317                           	line	210
  3318                           ;wwv.c: 210: return 0;
  3319  000412  0E00               	movlw	(0)&0ffh
  3320  000414  EF33  F004         	goto	l1252
  3321                           	
  3322  000418                     l1270:		; BSR set to: ?
  3323                           
  3324                           	line	212
  3325                           ;wwv.c: 212: glcdWriteChar('3');
  3326  000418  0101               	movlb	1	; () banked
  3327  00041A  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3328  00041C  0E33               	movlw	low(033h)
  3329  00041E  0101               	movlb	1	; () banked
  3330  000420  0101               	movlb	1	; () banked
  3331  000422  6F36               	movwf	((?_glcdWriteChar))&0ffh
  3332  000424  0101               	movlb	1	; () banked
  3333  000426  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3334  000428  ECC8  F014         	call	_glcdWriteChar	;wreg free
  3335                           	line	215
  3336                           ;wwv.c: 215: if(!wwvRead8BitFrame(&yDays2))
  3337  00042C  0101               	movlb	1	; () banked
  3338  00042E  0E10               	movlw	low(wwvGetTime@yDays2)
  3339  000430  0101               	movlb	1	; () banked
  3340  000432  0101               	movlb	1	; () banked
  3341  000434  6F30               	movwf	((?_wwvRead8BitFrame))&0ffh
  3342  000436  0101               	movlb	1	; () banked
  3343  000438  0E01               	movlw	high(wwvGetTime@yDays2)
  3344  00043A  0101               	movlb	1	; () banked
  3345  00043C  6F31               	movwf	((?_wwvRead8BitFrame+1))&0ffh
  3346  00043E  EC6B  F017         	call	_wwvRead8BitFrame	;wreg free
  3347  000442  0900               	iorlw	0
  3348  000444  A4D8               	btfss	status,2
  3349  000446  EF27  F002         	goto	u3991
  3350  00044A  EF29  F002         	goto	u3990
  3351  00044E                     u3991:
  3352  00044E  EF2C  F002         	goto	l1271
  3353  000452                     u3990:
  3354                           	line	216
  3355                           ;wwv.c: 216: return 0;
  3356  000452  0E00               	movlw	(0)&0ffh
  3357  000454  EF33  F004         	goto	l1252
  3358                           	
  3359  000458                     l1271:		; BSR set to: ?
  3360                           
  3361                           	line	218
  3362                           ;wwv.c: 218: if(wwvGetAnyBit() == 0x08)
  3363  000458  ECD0  F01A         	call	_wwvGetAnyBit	;wreg free
  3364  00045C  0A08               	xorlw	08h
  3365  00045E  A4D8               	btfss	status,2
  3366  000460  EF34  F002         	goto	u4001
  3367  000464  EF36  F002         	goto	u4000
  3368  000468                     u4001:
  3369  000468  EF39  F002         	goto	l1272
  3370  00046C                     u4000:
  3371                           	line	219
  3372                           ;wwv.c: 219: return 0;
  3373  00046C  0E00               	movlw	(0)&0ffh
  3374  00046E  EF33  F004         	goto	l1252
  3375                           	
  3376  000472                     l1272:		; BSR set to: ?
  3377                           
  3378                           	line	221
  3379                           ;wwv.c: 221: if(!wwvGetSyncBit())
  3380  000472  EC42  F01A         	call	_wwvGetSyncBit	;wreg free
  3381  000476  0900               	iorlw	0
  3382  000478  A4D8               	btfss	status,2
  3383  00047A  EF41  F002         	goto	u4011
  3384  00047E  EF43  F002         	goto	u4010
  3385  000482                     u4011:
  3386  000482  EF46  F002         	goto	l1273
  3387  000486                     u4010:
  3388                           	line	222
  3389                           ;wwv.c: 222: return 0;
  3390  000486  0E00               	movlw	(0)&0ffh
  3391  000488  EF33  F004         	goto	l1252
  3392                           	
  3393  00048C                     l1273:		; BSR set to: ?
  3394                           
  3395                           	line	224
  3396                           ;wwv.c: 224: glcdWriteChar('4');
  3397  00048C  0101               	movlb	1	; () banked
  3398  00048E  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3399  000490  0E34               	movlw	low(034h)
  3400  000492  0101               	movlb	1	; () banked
  3401  000494  0101               	movlb	1	; () banked
  3402  000496  6F36               	movwf	((?_glcdWriteChar))&0ffh
  3403  000498  0101               	movlb	1	; () banked
  3404  00049A  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3405  00049C  ECC8  F014         	call	_glcdWriteChar	;wreg free
  3406                           	line	227
  3407                           ;wwv.c: 227: if(wwvGetAnyBit() == 0x08)
  3408  0004A0  ECD0  F01A         	call	_wwvGetAnyBit	;wreg free
  3409  0004A4  0A08               	xorlw	08h
  3410  0004A6  A4D8               	btfss	status,2
  3411  0004A8  EF58  F002         	goto	u4021
  3412  0004AC  EF5A  F002         	goto	u4020
  3413  0004B0                     u4021:
  3414  0004B0  EF5D  F002         	goto	l1274
  3415  0004B4                     u4020:
  3416                           	line	228
  3417                           ;wwv.c: 228: return 0;
  3418  0004B4  0E00               	movlw	(0)&0ffh
  3419  0004B6  EF33  F004         	goto	l1252
  3420                           	
  3421  0004BA                     l1274:		; BSR set to: ?
  3422                           
  3423                           	line	230
  3424                           ;wwv.c: 230: if(!wwvRead8BitFrame(&yYears1))
  3425  0004BA  0101               	movlb	1	; () banked
  3426  0004BC  0E14               	movlw	low(wwvGetTime@yYears1)
  3427  0004BE  0101               	movlb	1	; () banked
  3428  0004C0  0101               	movlb	1	; () banked
  3429  0004C2  6F30               	movwf	((?_wwvRead8BitFrame))&0ffh
  3430  0004C4  0101               	movlb	1	; () banked
  3431  0004C6  0E01               	movlw	high(wwvGetTime@yYears1)
  3432  0004C8  0101               	movlb	1	; () banked
  3433  0004CA  6F31               	movwf	((?_wwvRead8BitFrame+1))&0ffh
  3434  0004CC  EC6B  F017         	call	_wwvRead8BitFrame	;wreg free
  3435  0004D0  0900               	iorlw	0
  3436  0004D2  A4D8               	btfss	status,2
  3437  0004D4  EF6E  F002         	goto	u4031
  3438  0004D8  EF70  F002         	goto	u4030
  3439  0004DC                     u4031:
  3440  0004DC  EF73  F002         	goto	l1275
  3441  0004E0                     u4030:
  3442                           	line	231
  3443                           ;wwv.c: 231: return 0;
  3444  0004E0  0E00               	movlw	(0)&0ffh
  3445  0004E2  EF33  F004         	goto	l1252
  3446                           	
  3447  0004E6                     l1275:		; BSR set to: ?
  3448                           
  3449                           	line	233
  3450                           ;wwv.c: 233: if(!wwvGetSyncBit())
  3451  0004E6  EC42  F01A         	call	_wwvGetSyncBit	;wreg free
  3452  0004EA  0900               	iorlw	0
  3453  0004EC  A4D8               	btfss	status,2
  3454  0004EE  EF7B  F002         	goto	u4041
  3455  0004F2  EF7D  F002         	goto	u4040
  3456  0004F6                     u4041:
  3457  0004F6  EF80  F002         	goto	l1276
  3458  0004FA                     u4040:
  3459                           	line	234
  3460                           ;wwv.c: 234: return 0;
  3461  0004FA  0E00               	movlw	(0)&0ffh
  3462  0004FC  EF33  F004         	goto	l1252
  3463                           	
  3464  000500                     l1276:		; BSR set to: ?
  3465                           
  3466                           	line	236
  3467                           ;wwv.c: 236: glcdWriteChar('5');
  3468  000500  0101               	movlb	1	; () banked
  3469  000502  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3470  000504  0E35               	movlw	low(035h)
  3471  000506  0101               	movlb	1	; () banked
  3472  000508  0101               	movlb	1	; () banked
  3473  00050A  6F36               	movwf	((?_glcdWriteChar))&0ffh
  3474  00050C  0101               	movlb	1	; () banked
  3475  00050E  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3476  000510  ECC8  F014         	call	_glcdWriteChar	;wreg free
  3477                           	line	239
  3478                           ;wwv.c: 239: if(!wwvRead8BitFrame(&yYears2))
  3479  000514  0101               	movlb	1	; () banked
  3480  000516  0E15               	movlw	low(wwvGetTime@yYears2)
  3481  000518  0101               	movlb	1	; () banked
  3482  00051A  0101               	movlb	1	; () banked
  3483  00051C  6F30               	movwf	((?_wwvRead8BitFrame))&0ffh
  3484  00051E  0101               	movlb	1	; () banked
  3485  000520  0E01               	movlw	high(wwvGetTime@yYears2)
  3486  000522  0101               	movlb	1	; () banked
  3487  000524  6F31               	movwf	((?_wwvRead8BitFrame+1))&0ffh
  3488  000526  EC6B  F017         	call	_wwvRead8BitFrame	;wreg free
  3489  00052A  0900               	iorlw	0
  3490  00052C  A4D8               	btfss	status,2
  3491  00052E  EF9B  F002         	goto	u4051
  3492  000532  EF9D  F002         	goto	u4050
  3493  000536                     u4051:
  3494  000536  EFA0  F002         	goto	l1277
  3495  00053A                     u4050:
  3496                           	line	240
  3497                           ;wwv.c: 240: return 0;
  3498  00053A  0E00               	movlw	(0)&0ffh
  3499  00053C  EF33  F004         	goto	l1252
  3500                           	
  3501  000540                     l1277:		; BSR set to: ?
  3502                           
  3503                           	line	242
  3504                           ;wwv.c: 242: yDST = wwvGetAnyBit();
  3505  000540  ECD0  F01A         	call	_wwvGetAnyBit	;wreg free
  3506  000544  0101               	movlb	1	; () banked
  3507  000546  0101               	movlb	1	; () banked
  3508  000548  6F19               	movwf	((wwvGetTime@yDST))&0ffh
  3509                           	line	243
  3510                           ;wwv.c: 243: switch(yDST)
  3511  00054A  EFBE  F002         	goto	l1279
  3512                           	line	245
  3513                           ;wwv.c: 244: {
  3514                           ;wwv.c: 245: case 0x01: yDST = 0; break;
  3515                           	
  3516  00054E                     l1280:		; BSR set to: ?
  3517                           
  3518  00054E  0101               	movlb	1	; () banked
  3519  000550  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3520  000552  0E00               	movlw	low(0)
  3521  000554  0101               	movlb	1	; () banked
  3522  000556  0101               	movlb	1	; () banked
  3523  000558  6F19               	movwf	((wwvGetTime@yDST))&0ffh
  3524  00055A  0101               	movlb	1	; () banked
  3525  00055C  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3526  00055E  EFC7  F002         	goto	l1278
  3527                           	line	246
  3528                           ;wwv.c: 246: case 0x02: yDST = 1; break;
  3529                           	
  3530  000562                     l1281:		; BSR set to: ?
  3531                           
  3532  000562  0101               	movlb	1	; () banked
  3533  000564  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3534  000566  0E01               	movlw	low(01h)
  3535  000568  0101               	movlb	1	; () banked
  3536  00056A  0101               	movlb	1	; () banked
  3537  00056C  6F19               	movwf	((wwvGetTime@yDST))&0ffh
  3538  00056E  0101               	movlb	1	; () banked
  3539  000570  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3540  000572  EFC7  F002         	goto	l1278
  3541                           	line	247
  3542                           ;wwv.c: 247: default: return 0;
  3543                           	
  3544  000576                     l1282:		; BSR set to: ?
  3545                           
  3546  000576  0E00               	movlw	(0)&0ffh
  3547  000578  EF33  F004         	goto	l1252
  3548                           	line	243
  3549                           	
  3550  00057C                     l1279:		; BSR set to: ?
  3551                           
  3552  00057C  0101               	movlb	1	; () banked
  3553  00057E  0101               	movlb	1	; () banked
  3554  000580  5119               	movf	((wwvGetTime@yDST))&0ffh,w
  3555  000582  0A01               	xorlw	1 ^ 0
  3556  000584  E0E4               	bz	l1280
  3557  000586  0A03               	xorlw	2 ^ 1
  3558  000588  E0EC               	bz	l1281
  3559  00058A  EFBB  F002         	goto	l1282
  3560                           
  3561                           	line	248
  3562                           	
  3563  00058E                     l1278:		; BSR set to: ?
  3564                           
  3565                           	line	249
  3566                           ;wwv.c: 249: if(!wwvGetSyncBit())
  3567  00058E  EC42  F01A         	call	_wwvGetSyncBit	;wreg free
  3568  000592  0900               	iorlw	0
  3569  000594  A4D8               	btfss	status,2
  3570  000596  EFCF  F002         	goto	u4061
  3571  00059A  EFD1  F002         	goto	u4060
  3572  00059E                     u4061:
  3573  00059E  EFD4  F002         	goto	l1283
  3574+ 0005A2                     u4060:
  3575+                          	line	250
  3576+                          ;wwv.c: 250: return 0;
  3577+ 0005A2  0E00               	movlw	(0)&0ffh
  3578+ 0005A4  EF33  F004         	goto	l1252
  3579+                          	
  3580+ 0005A8                     l1283:		; BSR set to: ?
  3581+                          
  3582+                          	line	253
  3583+                          ;wwv.c: 253: T1CONbits.TMR1ON = 0;
  3584+ 0005A8  90CD               	bcf	((c:4045)),c,0	;volatile
  3585+                          	line	256
  3586+                          ;wwv.c: 256: yUpper = (yMin & 0xf0) >> 1;
  3587+ 0005AA  C117  F12E         	movff	(wwvGetTime@yMin),??_wwvGetTime+36+0
  3588+ 0005AE  0EF0               	movlw	0F0h
  3589+ 0005B0  0101               	movlb	1	; () banked
  3590+ 0005B2  172E               	andwf	(??_wwvGetTime+36+0)&0ffh
  3591+ 0005B4  0101               	movlb	1	; () banked
  3592+ 0005B6  90D8               	bcf	status,0
  3593+ 0005B8  312E               	rrcf	(??_wwvGetTime+36+0)&0ffh,w
  3594+ 0005BA  0101               	movlb	1	; () banked
  3595+ 0005BC  0101               	movlb	1	; () banked
  3596+ 0005BE  6F18               	movwf	((wwvGetTime@yUpper))&0ffh
  3597+                          	line	257
  3598+                          ;wwv.c: 257: yLower = yMin & 0x0f;
  3599+ 0005C0  0101               	movlb	1	; () banked
  3600+ 0005C2  0101               	movlb	1	; () banked
  3601+ 0005C4  5117               	movf	((wwvGetTime@yMin))&0ffh,w
  3602+ 0005C6  0B0F               	andlw	low(0Fh)
  3603+ 0005C8  0101               	movlb	1	; () banked
  3604+ 0005CA  0101               	movlb	1	; () banked
  3605+ 0005CC  6F1B               	movwf	((wwvGetTime@yLower))&0ffh
  3606+                          	line	258
  3607+                          ;wwv.c: 258: yMin = yUpper | yLower;
  3608+ 0005CE  0101               	movlb	1	; () banked
  3609+ 0005D0  0101               	movlb	1	; () banked
  3610+ 0005D2  5118               	movf	((wwvGetTime@yUpper))&0ffh,w
  3611+ 0005D4  0101               	movlb	1	; () banked
  3612+ 0005D6  0101               	movlb	1	; () banked
  3613+ 0005D8  111B               	iorwf	((wwvGetTime@yLower))&0ffh,w
  3614+ 0005DA  0101               	movlb	1	; () banked
  3615+ 0005DC  0101               	movlb	1	; () banked
  3616+ 0005DE  6F17               	movwf	((wwvGetTime@yMin))&0ffh
  3617+                          	line	259
  3618+                          ;wwv.c: 259: yMin = rtcBCDToDec(yMin);
  3619+ 0005E0  C117  F143         	movff	(wwvGetTime@yMin),(?_rtcBCDToDec)
  3620+ 0005E4  EC35  F01B         	call	_rtcBCDToDec	;wreg free
  3621+ 0005E8  0101               	movlb	1	; () banked
  3622+ 0005EA  0101               	movlb	1	; () banked
  3623+ 0005EC  6F17               	movwf	((wwvGetTime@yMin))&0ffh
  3624+                          	line	260
  3625+                          ;wwv.c: 260: if(yMin > 59)
  3626+ 0005EE  0E3B               	movlw	(03Ch-1)
  3627+ 0005F0  0101               	movlb	1	; () banked
  3628+ 0005F2  0101               	movlb	1	; () banked
  3629+ 0005F4  6517               	cpfsgt	((wwvGetTime@yMin))&0ffh
  3630+ 0005F6  EFFF  F002         	goto	u4071
  3631+ 0005FA  EF01  F003         	goto	u4070
  3632+ 0005FE                     u4071:
  3633+ 0005FE  EF04  F003         	goto	l1284
  3634+ 000602                     u4070:
  3635+                          	line	261
  3636+                          ;wwv.c: 261: return 0;
  3637+ 000602  0E00               	movlw	(0)&0ffh
  3638+ 000604  EF33  F004         	goto	l1252
  3639+                          	
  3640+ 000608                     l1284:		; BSR set to: ?
  3641+                          
  3642+                          	line	264
  3643+                          ;wwv.c: 264: if(yHour & 0x80)
  3644+ 000608  0101               	movlb	1	; () banked
  3645+                          	
  3646+ 00060A  0101               	movlb	1	; () banked
  3647+ 00060C  AF1A               	btfss	((wwvGetTime@yHour))&0ffh,(7)&7
  3648+ 00060E  EF0B  F003         	goto	u4081
  3649+ 000612  EF0D  F003         	goto	u4080
  3650+ 000616                     u4081:
  3651+ 000616  EF10  F003         	goto	l1285
  3652+ 00061A                     u4080:
  3653+                          	line	265
  3654+                          ;wwv.c: 265: return 0;
  3655+ 00061A  0E00               	movlw	(0)&0ffh
  3656+ 00061C  EF33  F004         	goto	l1252
  3657+                          	
  3658+ 000620                     l1285:		; BSR set to: ?
  3659+                          
  3660+                          	line	267
  3661+                          ;wwv.c: 267: yUpper = (yHour & 0xf0) >> 1;
  3662+ 000620  C11A  F12E         	movff	(wwvGetTime@yHour),??_wwvGetTime+36+0
  3663+ 000624  0EF0               	movlw	0F0h
  3664+ 000626  0101               	movlb	1	; () banked
  3665+ 000628  172E               	andwf	(??_wwvGetTime+36+0)&0ffh
  3666+ 00062A  0101               	movlb	1	; () banked
  3667+ 00062C  90D8               	bcf	status,0
  3668+ 00062E  312E               	rrcf	(??_wwvGetTime+36+0)&0ffh,w
  3669+ 000630  0101               	movlb	1	; () banked
  3670+ 000632  0101               	movlb	1	; () banked
  3671+ 000634  6F18               	movwf	((wwvGetTime@yUpper))&0ffh
  3672+                          	line	268
  3673+                          ;wwv.c: 268: yLower = yHour & 0x0f;
  3674+ 000636  0101               	movlb	1	; () banked
  3675+ 000638  0101               	movlb	1	; () banked
  3676+ 00063A  511A               	movf	((wwvGetTime@yHour))&0ffh,w
  3677+ 00063C  0B0F               	andlw	low(0Fh)
  3678+ 00063E  0101               	movlb	1	; () banked
  3679+ 000640  0101               	movlb	1	; () banked
  3680+ 000642  6F1B               	movwf	((wwvGetTime@yLower))&0ffh
  3681+                          	line	269
  3682+                          ;wwv.c: 269: yHour = yUpper | yLower;
  3683+ 000644  0101               	movlb	1	; () banked
  3684+ 000646  0101               	movlb	1	; () banked
  3685+ 000648  5118               	movf	((wwvGetTime@yUpper))&0ffh,w
  3686+ 00064A  0101               	movlb	1	; () banked
  3687+ 00064C  0101               	movlb	1	; () banked
  3688+ 00064E  111B               	iorwf	((wwvGetTime@yLower))&0ffh,w
  3689+ 000650  0101               	movlb	1	; () banked
  3690+ 000652  0101               	movlb	1	; () banked
  3691+ 000654  6F1A               	movwf	((wwvGetTime@yHour))&0ffh
  3692+                          	line	270
  3693+                          ;wwv.c: 270: yHour = rtcBCDToDec(yHour);
  3694+ 000656  C11A  F143         	movff	(wwvGetTime@yHour),(?_rtcBCDToDec)
  3695+ 00065A  EC35  F01B         	call	_rtcBCDToDec	;wreg free
  3696+ 00065E  0101               	movlb	1	; () banked
  3697+ 000660  0101               	movlb	1	; () banked
  3698+ 000662  6F1A               	movwf	((wwvGetTime@yHour))&0ffh
  3699+                          	line	272
  3700+                          ;wwv.c: 272: if(yHour > 23)
  3701+ 000664  0E17               	movlw	(018h-1)
  3702+ 000666  0101               	movlb	1	; () banked
  3703+ 000668  0101               	movlb	1	; () banked
  3704+ 00066A  651A               	cpfsgt	((wwvGetTime@yHour))&0ffh
  3705+ 00066C  EF3A  F003         	goto	u4091
  3706+ 000670  EF3C  F003         	goto	u4090
  3707+ 000674                     u4091:
  3708+ 000674  EF3F  F003         	goto	l1286
  3709+ 000678                     u4090:
  3710+                          	line	273
  3711+                          ;wwv.c: 273: return 0;
  3712+ 000678  0E00               	movlw	(0)&0ffh
  3713+ 00067A  EF33  F004         	goto	l1252
  3714+                          	
  3715+ 00067E                     l1286:		; BSR set to: ?
  3716+                          
  3717+                          	line	276
  3718+                          ;wwv.c: 276: yUpper = (yDays1 & 0xf0) >> 1;
  3719+ 00067E  C116  F12E         	movff	(wwvGetTime@yDays1),??_wwvGetTime+36+0
  3720+ 000682  0EF0               	movlw	0F0h
  3721+ 000684  0101               	movlb	1	; () banked
  3722+ 000686  172E               	andwf	(??_wwvGetTime+36+0)&0ffh
  3723+ 000688  0101               	movlb	1	; () banked
  3724+ 00068A  90D8               	bcf	status,0
  3725+ 00068C  312E               	rrcf	(??_wwvGetTime+36+0)&0ffh,w
  3726+ 00068E  0101               	movlb	1	; () banked
  3727+ 000690  0101               	movlb	1	; () banked
  3728+ 000692  6F18               	movwf	((wwvGetTime@yUpper))&0ffh
  3729+                          	line	277
  3730+                          ;wwv.c: 277: yLower = yDays1 & 0x0f;
  3731+ 000694  0101               	movlb	1	; () banked
  3732+ 000696  0101               	movlb	1	; () banked
  3733+ 000698  5116               	movf	((wwvGetTime@yDays1))&0ffh,w
  3734+ 00069A  0B0F               	andlw	low(0Fh)
  3735+ 00069C  0101               	movlb	1	; () banked
  3736+ 00069E  0101               	movlb	1	; () banked
  3737+ 0006A0  6F1B               	movwf	((wwvGetTime@yLower))&0ffh
  3738+                          	line	278
  3739+                          ;wwv.c: 278: yDays1 = yUpper | yLower;
  3740+ 0006A2  0101               	movlb	1	; () banked
  3741+ 0006A4  0101               	movlb	1	; () banked
  3742+ 0006A6  5118               	movf	((wwvGetTime@yUpper))&0ffh,w
  3743+ 0006A8  0101               	movlb	1	; () banked
  3744+ 0006AA  0101               	movlb	1	; () banked
  3745+ 0006AC  111B               	iorwf	((wwvGetTime@yLower))&0ffh,w
  3746+ 0006AE  0101               	movlb	1	; () banked
  3747+ 0006B0  0101               	movlb	1	; () banked
  3748+ 0006B2  6F16               	movwf	((wwvGetTime@yDays1))&0ffh
  3749+                          	line	279
  3750+                          ;wwv.c: 279: yDays1 = rtcBCDToDec(yDays1);
  3751+ 0006B4  C116  F143         	movff	(wwvGetTime@yDays1),(?_rtcBCDToDec)
  3752+ 0006B8  EC35  F01B         	call	_rtcBCDToDec	;wreg free
  3753+ 0006BC  0101               	movlb	1	; () banked
  3754+ 0006BE  0101               	movlb	1	; () banked
  3755+ 0006C0  6F16               	movwf	((wwvGetTime@yDays1))&0ffh
  3756+                          	line	280
  3757+                          ;wwv.c: 280: wDays = yDays1 * 10;
  3758+ 0006C2  0101               	movlb	1	; () banked
  3759+ 0006C4  0101               	movlb	1	; () banked
  3760+ 0006C6  5116               	movf	((wwvGetTime@yDays1))&0ffh,w
  3761+ 0006C8  0D0A               	mullw	0Ah
  3762+ 0006CA  CFF3 F11C          	movff	prodl,(wwvGetTime@wDays)
  3763+ 0006CE  CFF4 F11D          	movff	prodh,(wwvGetTime@wDays+1)
  3764+                          	line	282
  3765+                          ;wwv.c: 282: yLower = yDays2 >> 4;
  3766+ 0006D2  0101               	movlb	1	; () banked
  3767+ 0006D4  0101               	movlb	1	; () banked
  3768+ 0006D6  3910               	swapf	((wwvGetTime@yDays2))&0ffh,w
  3769+ 0006D8  0B0F               	andlw	(0ffh shr 4) & 0ffh
  3770+ 0006DA  0101               	movlb	1	; () banked
  3771+ 0006DC  0101               	movlb	1	; () banked
  3772+ 0006DE  6F1B               	movwf	((wwvGetTime@yLower))&0ffh
  3773+                          	line	283
  3774+                          ;wwv.c: 283: wDays += yLower;
  3775+ 0006E0  0101               	movlb	1	; () banked
  3776+ 0006E2  0101               	movlb	1	; () banked
  3777+ 0006E4  511B               	movf	((wwvGetTime@yLower))&0ffh,w
  3778+ 0006E6  0101               	movlb	1	; () banked
  3779+ 0006E8  0101               	movlb	1	; () banked
  3780+ 0006EA  271C               	addwf	((wwvGetTime@wDays))&0ffh
  3781+ 0006EC  0E00               	movlw	0
  3782+ 0006EE  0101               	movlb	1	; () banked
  3783+ 0006F0  231D               	addwfc	((wwvGetTime@wDays+1))&0ffh
  3784+                          	line	284
  3785+                          ;wwv.c: 284: if(wDays > 366)
  3786+ 0006F2  0E6F               	movlw	06Fh
  3787+ 0006F4  0101               	movlb	1	; () banked
  3788+ 0006F6  0101               	movlb	1	; () banked
  3789+ 0006F8  5D1C               	subwf	((wwvGetTime@wDays))&0ffh,w
  3790+ 0006FA  0E01               	movlw	01h
  3791+ 0006FC  0101               	movlb	1	; () banked
  3792+ 0006FE  591D               	subwfb	((wwvGetTime@wDays+1))&0ffh,w
  3793+ 000700  A0D8               	btfss	status,0
  3794+ 000702  EF85  F003         	goto	u4101
  3795+ 000706  EF87  F003         	goto	u4100
  3796+ 00070A                     u4101:
  3797+ 00070A  EF8A  F003         	goto	l1287
  3798+ 00070E                     u4100:
  3799+                          	line	285
  3800+                          ;wwv.c: 285: return 0;
  3801+ 00070E  0E00               	movlw	(0)&0ffh
  3802+ 000710  EF33  F004         	goto	l1252
  3803+                          	
  3804+ 000714                     l1287:		; BSR set to: ?
  3805+                          
  3806+                          	line	288
  3807+                          ;wwv.c: 288: yUpper = yYears1 << 4;
  3808+ 000714  0101               	movlb	1	; () banked
  3809+ 000716  0101               	movlb	1	; () banked
  3810+ 000718  3914               	swapf	((wwvGetTime@yYears1))&0ffh,w
  3811+ 00071A  0BF0               	andlw	(0ffh shl 4) & 0ffh
  3812+ 00071C  0101               	movlb	1	; () banked
  3813+ 00071E  0101               	movlb	1	; () banked
  3814+ 000720  6F18               	movwf	((wwvGetTime@yUpper))&0ffh
  3815+                          	line	289
  3816+                          ;wwv.c: 289: yLower = yYears2 >> 4;
  3817+ 000722  0101               	movlb	1	; () banked
  3818+ 000724  0101               	movlb	1	; () banked
  3819+ 000726  3915               	swapf	((wwvGetTime@yYears2))&0ffh,w
  3820+ 000728  0B0F               	andlw	(0ffh shr 4) & 0ffh
  3821+ 00072A  0101               	movlb	1	; () banked
  3822+ 00072C  0101               	movlb	1	; () banked
  3823+ 00072E  6F1B               	movwf	((wwvGetTime@yLower))&0ffh
  3824+                          	line	290
  3825+                          ;wwv.c: 290: y = rtcBCDToDec(yUpper | yLower);
  3826+ 000730  0101               	movlb	1	; () banked
  3827+ 000732  0101               	movlb	1	; () banked
  3828+ 000734  5118               	movf	((wwvGetTime@yUpper))&0ffh,w
  3829+ 000736  0101               	movlb	1	; () banked
  3830+ 000738  0101               	movlb	1	; () banked
  3831+ 00073A  111B               	iorwf	((wwvGetTime@yLower))&0ffh,w
  3832+ 00073C  0101               	movlb	1	; () banked
  3833+ 00073E  0101               	movlb	1	; () banked
  3834+ 000740  6F43               	movwf	((?_rtcBCDToDec))&0ffh
  3835+ 000742  EC35  F01B         	call	_rtcBCDToDec	;wreg free
  3836+ 000746  0101               	movlb	1	; () banked
  3837+ 000748  0101               	movlb	1	; () banked
  3838+ 00074A  6F12               	movwf	((wwvGetTime@y))&0ffh
  3839+                          	line	291
  3840+                          ;wwv.c: 291: yYears1 = rtcBCDToDec(y);
  3841+ 00074C  C112  F143         	movff	(wwvGetTime@y),(?_rtcBCDToDec)
  3842+ 000750  EC35  F01B         	call	_rtcBCDToDec	;wreg free
  3843+ 000754  0101               	movlb	1	; () banked
  3844+ 000756  0101               	movlb	1	; () banked
  3845+ 000758  6F14               	movwf	((wwvGetTime@yYears1))&0ffh
  3846+                          	line	292
  3847+                          ;wwv.c: 292: yLeap = yYears2 & 0x04;
  3848+ 00075A  0101               	movlb	1	; () banked
  3849+ 00075C  0101               	movlb	1	; () banked
  3850+ 00075E  5115               	movf	((wwvGetTime@yYears2))&0ffh,w
  3851+ 000760  0B04               	andlw	low(04h)
  3852+ 000762  0101               	movlb	1	; () banked
  3853+ 000764  0101               	movlb	1	; () banked
  3854+ 000766  6F13               	movwf	((wwvGetTime@yLeap))&0ffh
  3855+                          	line	293
  3856+                          ;wwv.c: 293: if(yLeap) yLeap = 1;
  3857+ 000768  0101               	movlb	1	; () banked
  3858+ 00076A  0101               	movlb	1	; () banked
  3859+ 00076C  5113               	movf	((wwvGetTime@yLeap))&0ffh,w
  3860+ 00076E  B4D8               	btfsc	status,2
  3861+ 000770  EFBC  F003         	goto	u4111
  3862+ 000774  EFBE  F003         	goto	u4110
  3863+ 000778                     u4111:
  3864+ 000778  EFC6  F003         	goto	l1288
  3865+ 00077C                     u4110:
  3866+ 00077C  0101               	movlb	1	; () banked
  3867+ 00077E  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3868+ 000780  0E01               	movlw	low(01h)
  3869+ 000782  0101               	movlb	1	; () banked
  3870+ 000784  0101               	movlb	1	; () banked
  3871+ 000786  6F13               	movwf	((wwvGetTime@yLeap))&0ffh
  3872+ 000788  0101               	movlb	1	; () banked
  3873+ 00078A  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3874+                          	
  3875+ 00078C                     l1288:		; BSR set to: ?
  3876+                          
  3877+                          	line	304
  3878+                          ;wwv.c: 304: y = ((yYears2 & 0x01) << 1) | yDST;
  3879+ 00078C  C115  F12E         	movff	(wwvGetTime@yYears2),??_wwvGetTime+36+0
  3880+ 000790  0E01               	movlw	01h
  3881+ 000792  0101               	movlb	1	; () banked
  3882+ 000794  172E               	andwf	(??_wwvGetTime+36+0)&0ffh
  3883+ 000796  0101               	movlb	1	; () banked
  3884+ 000798  90D8               	bcf	status,0
  3885+ 00079A  352E               	rlcf	(??_wwvGetTime+36+0)&0ffh,w
  3886+ 00079C  0101               	movlb	1	; () banked
  3887+ 00079E  0101               	movlb	1	; () banked
  3888+ 0007A0  1119               	iorwf	((wwvGetTime@yDST))&0ffh,w
  3889+ 0007A2  0101               	movlb	1	; () banked
  3890+ 0007A4  0101               	movlb	1	; () banked
  3891+ 0007A6  6F12               	movwf	((wwvGetTime@y))&0ffh
  3892+                          	line	305
  3893+                          ;wwv.c: 305: if(y == 2)
  3894+ 0007A8  0101               	movlb	1	; () banked
  3895+ 0007AA  0101               	movlb	1	; () banked
  3896+ 0007AC  5112               	movf	((wwvGetTime@y))&0ffh,w
  3897+ 0007AE  0A02               	xorlw	2
  3898+                          
  3899+ 0007B0  A4D8               	btfss	status,2
  3900+ 0007B2  EFDD  F003         	goto	u4121
  3901+ 0007B6  EFDF  F003         	goto	u4120
  3902+ 0007BA                     u4121:
  3903+ 0007BA  EFE9  F003         	goto	l1289
  3904+ 0007BE                     u4120:
  3905+                          	line	306
  3906+                          ;wwv.c: 306: yDST = 1;
  3907+ 0007BE  0101               	movlb	1	; () banked
  3908+ 0007C0  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3909+ 0007C2  0E01               	movlw	low(01h)
  3910+ 0007C4  0101               	movlb	1	; () banked
  3911+ 0007C6  0101               	movlb	1	; () banked
  3912+ 0007C8  6F19               	movwf	((wwvGetTime@yDST))&0ffh
  3913+ 0007CA  0101               	movlb	1	; () banked
  3914+ 0007CC  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3915+ 0007CE  EFF1  F003         	goto	l1290
  3916+                          	line	307
  3917+                          	
  3918+ 0007D2                     l1289:		; BSR set to: ?
  3919+                          
  3920+                          	line	308
  3921+                          ;wwv.c: 307: else
  3922+                          ;wwv.c: 308: yDST = 0;
  3923+ 0007D2  0101               	movlb	1	; () banked
  3924+ 0007D4  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3925+ 0007D6  0E00               	movlw	low(0)
  3926+ 0007D8  0101               	movlb	1	; () banked
  3927+ 0007DA  0101               	movlb	1	; () banked
  3928+ 0007DC  6F19               	movwf	((wwvGetTime@yDST))&0ffh
  3929+ 0007DE  0101               	movlb	1	; () banked
  3930+ 0007E0  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3931+                          	
  3932+ 0007E2                     l1290:		; BSR set to: ?
  3933+                          
  3934+                          	line	312
  3935+                          ;wwv.c: 312: yTZ = rtcReadRam((UINT8)0xC3);
  3936+ 0007E2  0101               	movlb	1	; () banked
  3937+ 0007E4  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3938+ 0007E6  0EC3               	movlw	low(0C3h)
  3939+ 0007E8  0101               	movlb	1	; () banked
  3940+ 0007EA  0101               	movlb	1	; () banked
  3941+ 0007EC  6F35               	movwf	((?_rtcReadRam))&0ffh
  3942+ 0007EE  0101               	movlb	1	; () banked
  3943+ 0007F0  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3944+ 0007F2  EC65  F01B         	call	_rtcReadRam	;wreg free
  3945+ 0007F6  0101               	movlb	1	; () banked
  3946+ 0007F8  0101               	movlb	1	; () banked
  3947+ 0007FA  6F11               	movwf	((wwvGetTime@yTZ))&0ffh
  3948+                          	line	315
  3949+                          ;wwv.c: 315: rtcWriteRam((UINT8)0xCC, yDST);
  3950+ 0007FC  C119  F136         	movff	(wwvGetTime@yDST),0+(?_rtcWriteRam+01h)
  3951+ 000800  0101               	movlb	1	; () banked
  3952+ 000802  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3953+ 000804  0ECC               	movlw	low(0CCh)
  3954+ 000806  0101               	movlb	1	; () banked
  3955+ 000808  0101               	movlb	1	; () banked
  3956+ 00080A  6F35               	movwf	((?_rtcWriteRam))&0ffh
  3957+ 00080C  0101               	movlb	1	; () banked
  3958+ 00080E  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3959+ 000810  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  3960+                          	line	318
  3961+                          ;wwv.c: 318: wwvMakeTimeStruct(pt, yMin, yHour, 
      +                          wDays, yYears1, yLeap, yDST, yTZ);
  3962+ 000814  C111  F139         	movff	(wwvGetTime@yTZ),0+(?_wwvMakeTimeStruct+0
      +                          9h)
  3963+ 000818  C119  F138         	movff	(wwvGetTime@yDST),0+(?_wwvMakeTimeStruct+
      +                          08h)
  3964+ 00081C  C113  F137         	movff	(wwvGetTime@yLeap),0+(?_wwvMakeTimeStruct
      +                          +07h)
  3965+ 000820  C114  F136         	movff	(wwvGetTime@yYears1),0+(?_wwvMakeTimeStru
      +                          ct+06h)
  3966+ 000824  C11C  F134         	movff	(wwvGetTime@wDays),0+(?_wwvMakeTimeStruct
      +                          +04h)
  3967+ 000828  C11D  F135         	movff	(wwvGetTime@wDays+1),1+(?_wwvMakeTimeStru
      +                          ct+04h)
  3968+ 00082C  C11A  F133         	movff	(wwvGetTime@yHour),0+(?_wwvMakeTimeStruct
      +                          +03h)
  3969+ 000830  C117  F132         	movff	(wwvGetTime@yMin),0+(?_wwvMakeTimeStruct+
      +                          02h)
  3970+ 000834  C108  F130         	movff	(wwvGetTime@pt),(?_wwvMakeTimeStruct)
  3971+ 000838  C109  F131         	movff	(wwvGetTime@pt+1),(?_wwvMakeTimeStruct+1)
  3972+ 00083C  ECEB  F006         	call	_wwvMakeTimeStruct	;wreg free
  3973+                          	line	320
  3974+                          ;wwv.c: 320: rtcBumpLastSync();
  3975+ 000840  ECE7  F015         	call	_rtcBumpLastSync	;wreg free
  3976+                          	line	321
  3977+                          ;wwv.c: 321: rtcSaveLastSync(pt, 0);
  3978+ 000844  0101               	movlb	1	; () banked
  3979+ 000846  6F2E               	movwf	(??_wwvGetTime+36+0)&0ffh
  3980+ 000848  0E00               	movlw	low(0)
  3981+ 00084A  0101               	movlb	1	; () banked
  3982+ 00084C  0101               	movlb	1	; () banked
  3983+ 00084E  6F32               	movwf	(0+(?_rtcSaveLastSync+02h))&0ffh
  3984+ 000850  0101               	movlb	1	; () banked
  3985+ 000852  512E               	movf	(??_wwvGetTime+36+0)&0ffh,w
  3986+ 000854  C108  F130         	movff	(wwvGetTime@pt),(?_rtcSaveLastSync)
  3987+ 000858  C109  F131         	movff	(wwvGetTime@pt+1),(?_rtcSaveLastSync+1)
  3988+ 00085C  ECC0  F010         	call	_rtcSaveLastSync	;wreg free
  3989+                          	line	322
  3990+                          ;wwv.c: 322: return 1;
  3991+ 000860  0E01               	movlw	(01h)&0ffh
  3992+ 000862  EF33  F004         	goto	l1252
  3993+                          	line	324
  3994+                          ;wwv.c: 324: }
  3995+ 000866                     l1252:
  3996+                          			; BSR set to: ?
  3997+                          
  3998+ 000866  0012               	return
  3999+                          	opt stack 0
  4000+                          GLOBAL __end_of_wwvGetTime
  4001+ 000868                     	__end_of_wwvGetTime:
  4002+                          	FNSIZE	_wwvGetTime,38,2
  4003+                          ; =============== function _wwvGetTime ends ====
      +                          ========
  4004+                          
  4005+                          	signat	_wwvGetTime,4217
  4006+                          	global	_memcpy
  4007+                          	global	??_memcpy
  4008+                          	global	?_memcpy
  4009+                          
  4010+                          ; *************** function _memcpy *************
      +                          ****
  4011+                          ; Defined at:
  4012+                          ;		line 10 in file "C:\Program Files\HI-TECH Sof
      +                          tware\PICC-18\PRO\9.66\sources\memcpy.c"
  4013+                          ; Parameters:
  4014+                          ;		d1             size:   2offs:   0	type: PTR v
      +                          oid ; Largest target is 7
  4015+                          ;		 -> g_ts(7), 
  4016+                          ;		s1             size:   2offs:   2	type: PTR c
      +                          onst void ; Largest target is 7
  4017+                          ;		 -> main@tt(7), 
  4018+                          ;		n              size:   2offs:   4	type: unsig
      +                          ned int 
  4019+                          ; Auto variables:
  4020+                          ;		d           	       	type: PTR unsigned char 
      +                          ; Largest target is 7
  4021+                          ;		 -> g_ts(7), 
  4022+                          ;		s           	       	type: PTR const unsigned
      +                           char ; Largest target is 7
  4023+                          ;		 -> main@tt(7), 
  4024+                          ; Return value:
  4025+                          ;		type: PTR void 
  4026+                          ;		size: 2
  4027+                          ; Registers used:
  4028+                          ;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, s
      +                          tatus,0
  4029+                          ; Tracked objects:
  4030+                          ;		On entry : 0/0
  4031+                          ;		On exit  : 0/0
  4032+                          ;		Unchanged: 0/0
  4033+                          ; Data sizes:
  4034+                          ;		Autos:    4
  4035+                          ;		Params:   6
  4036+                          ;		Temp:     0
  4037+                          ;		Total:   10
  4038+                          ; This function calls:
  4039+                          ;		Nothing
  4040+                          ; This function is called by:
  4041+                          ;		_main
  4042+                          ; This function uses a non-reentrant model
  4043+                          ; 
  4044+                                  psect   text7,class=CODE,space=0,reloc=2
  4045+                          
  4046+                          	opt lm
  4047+                          	file	"C:\Program Files\HI-TECH Software\PICC-18
      +                          \PRO\9.66\sources\memcpy.c"
  4048+                          	line	10
  4049+ 000000                     	__size_of_memcpy	equ	__end_of_memcpy-_memcpy
  4050+                          	
  4051+ 003378                     _memcpy:		; BSR set to: ?
  4052+                          
  4053+                          	opt stack 29
  4054+                          	line	19
  4055+ 003378  C10A  F110         	movff	(memcpy@s1),(memcpy@s)
  4056+ 00337C  C10B  F111         	movff	(memcpy@s1+1),(memcpy@s+1)
  4057+                          	line	20
  4058+ 003380  C108  F10E         	movff	(memcpy@d1),(memcpy@d)
  4059+ 003384  C109  F10F         	movff	(memcpy@d1+1),(memcpy@d+1)
  4060+                          	line	21
  4061+ 003388  EFD8  F019         	goto	l1347
  4062+                          	
  4063+ 00338C                     l1348:		; BSR set to: ?
  4064+                          
  4065+                          	line	22
  4066+ 00338C  C110  FFE9         	movff	(memcpy@s),fsr0l
  4067+ 003390  C111  FFEA         	movff	(memcpy@s+1),fsr0h
  4068+ 003394  C10E  FFE1         	movff	(memcpy@d),fsr1l
  4069+ 003398  C10F  FFE2         	movff	(memcpy@d+1),fsr1h
  4070+ 00339C  CFEF FFE7          	movff	indf0,indf1
  4071+ 0033A0  0101               	movlb	1	; () banked
  4072+ 0033A2  0101               	movlb	1	; () banked
  4073+ 0033A4  4B10               	infsnz	((memcpy@s))&0ffh
  4074+ 0033A6  2B11               	incf	((memcpy@s+1))&0ffh
  4075+ 0033A8  0101               	movlb	1	; () banked
  4076+ 0033AA  0101               	movlb	1	; () banked
  4077+ 0033AC  4B0E               	infsnz	((memcpy@d))&0ffh
  4078+ 0033AE  2B0F               	incf	((memcpy@d+1))&0ffh
  4079+                          	
  4080+ 0033B0                     l1347:		; BSR set to: ?
  4081+                          
  4082+                          	line	21
  4083+ 0033B0  0101               	movlb	1	; () banked
  4084+ 0033B2  0101               	movlb	1	; () banked
  4085+ 0033B4  070C               	decf	((memcpy@n))&0ffh
  4086+ 0033B6  A0D8               	btfss	status,0
  4087+ 0033B8  070D               	decf	((memcpy@n+1))&0ffh
  4088+ 0033BA  0101               	movlb	1	; () banked
  4089+ 0033BC  290C               	incf	((memcpy@n))&0ffh,w
  4090+ 0033BE  B4D8               	btfsc	status,2
  4091+ 0033C0  290D               	incf ((memcpy@n+1))&0ffh,w
  4092+                          
  4093+ 0033C2  A4D8               	btfss	status,2
  4094+ 0033C4  EFE6  F019         	goto	u4131
  4095+ 0033C8  EFE8  F019         	goto	u4130
  4096+ 0033CC                     u4131:
  4097+ 0033CC  EFC6  F019         	goto	l1348
  4098+ 0033D0                     u4130:
  4099+                          	
  4100+ 0033D0                     l1349:		; BSR set to: ?
  4101+                          
  4102+                          	line	23
  4103+ 0033D0  EFEA  F019         	goto	l1346
  4104+                          	line	24
  4105+ 0033D4                     l1346:
  4106+                          			; BSR set to: ?
  4107+                          
  4108+ 0033D4  0012               	return
  4109+                          	opt stack 0
  4110+                          GLOBAL __end_of_memcpy
  4111+ 0033D6                     	__end_of_memcpy:
  4112+                          	FNSIZE	_memcpy,4,6
  4113+                          ; =============== function _memcpy ends ========
      +                          ====
  4114+                          
  4115+                          	signat	_memcpy,12410
  4116+                          	global	_rtcInit
  4117+                          	global	??_rtcInit
  4118+                          	global	?_rtcInit
  4119+                          
  4120+                          ; *************** function _rtcInit ************
      +                          *****
  4121+                          ; Defined at:
  4122+                          ;		line 40 in file "rtc.c"
  4123+                          ; Parameters:
  4124+                          ;		None
  4125+                          ; Auto variables:
  4126+                          ;		y           	       	type: unsigned char 
  4127+                          ;		tt          	       	type: struct _TIMESTRUCT
  4128+                          ; Return value:
  4129+                          ;		type: void 
  4130+                          ;		size: 0
  4131+                          ; Registers used:
  4132+                          ;		wreg, fsr0l, fsr0h, status,2, status,0, cstac
      +                          k
  4133+                          ; Tracked objects:
  4134+                          ;		On entry : 0/0
  4135+                          ;		On exit  : 0/0
  4136+                          ;		Unchanged: 0/0
  4137+                          ; Data sizes:
  4138+                          ;		Autos:    8
  4139+                          ;		Params:   0
  4140+                          ;		Temp:     2
  4141+                          ;		Total:   10
  4142+                          ; This function calls:
  4143+                          ;		_spiInit
  4144+                          ;		_rtcWriteRam
  4145+                          ;		_rtcReadRam
  4146+                          ;		_rtcSetClock
  4147+                          ;		_rtcSaveLastSync
  4148+                          ; This function is called by:
  4149+                          ;		_main
  4150+                          ; This function uses a non-reentrant model
  4151+                          ; 
  4152+                                  psect   text8,class=CODE,space=0,reloc=2
  4153+                          
  4154+                          	opt lm
  4155+                          	file	"rtc.c"
  4156+                          	line	40
  4157+ 000000                     	__size_of_rtcInit	equ	__end_of_rtcInit-_rtcInit
  4158+                          ;rtc.c: 39: void rtcInit(void)
  4159+                          ;rtc.c: 40: {
  4160+                          	
  4161+ 001DE4                     _rtcInit:		; BSR set to: ?
  4162+                          
  4163+                          	opt stack 29
  4164+                          	line	44
  4165+ 001DE4  ECB6  F01B         	call	_spiInit	;wreg free
  4166+                          	line	47
  4167+                          ;rtc.c: 47: rtcWriteRam((UINT8)0x8E, 0x00);
  4168+ 001DE8  0101               	movlb	1	; () banked
  4169+ 001DEA  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4170+ 001DEC  0E00               	movlw	low(0)
  4171+ 001DEE  0101               	movlb	1	; () banked
  4172+ 001DF0  0101               	movlb	1	; () banked
  4173+ 001DF2  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  4174+ 001DF4  0101               	movlb	1	; () banked
  4175+ 001DF6  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4176+ 001DF8  0101               	movlb	1	; () banked
  4177+ 001DFA  6F11               	movwf	(??_rtcInit+9+0)&0ffh
  4178+ 001DFC  0E8E               	movlw	low(08Eh)
  4179+ 001DFE  0101               	movlb	1	; () banked
  4180+ 001E00  0101               	movlb	1	; () banked
  4181+ 001E02  6F35               	movwf	((?_rtcWriteRam))&0ffh
  4182+ 001E04  0101               	movlb	1	; () banked
  4183+ 001E06  5111               	movf	(??_rtcInit+9+0)&0ffh,w
  4184+ 001E08  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  4185+                          	line	50
  4186+                          ;rtc.c: 50: rtcWriteRam((UINT8)0x90, 0xa5);
  4187+ 001E0C  0101               	movlb	1	; () banked
  4188+ 001E0E  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4189+ 001E10  0EA5               	movlw	low(0A5h)
  4190+ 001E12  0101               	movlb	1	; () banked
  4191+ 001E14  0101               	movlb	1	; () banked
  4192+ 001E16  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  4193+ 001E18  0101               	movlb	1	; () banked
  4194+ 001E1A  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4195+ 001E1C  0101               	movlb	1	; () banked
  4196+ 001E1E  6F11               	movwf	(??_rtcInit+9+0)&0ffh
  4197+ 001E20  0E90               	movlw	low(090h)
  4198+ 001E22  0101               	movlb	1	; () banked
  4199+ 001E24  0101               	movlb	1	; () banked
  4200+ 001E26  6F35               	movwf	((?_rtcWriteRam))&0ffh
  4201+ 001E28  0101               	movlb	1	; () banked
  4202+ 001E2A  5111               	movf	(??_rtcInit+9+0)&0ffh,w
  4203+ 001E2C  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  4204+                          	line	53
  4205+                          ;rtc.c: 53: y = rtcReadRam((UINT8)0xC1);
  4206+ 001E30  0101               	movlb	1	; () banked
  4207+ 001E32  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4208+ 001E34  0EC1               	movlw	low(0C1h)
  4209+ 001E36  0101               	movlb	1	; () banked
  4210+ 001E38  0101               	movlb	1	; () banked
  4211+ 001E3A  6F35               	movwf	((?_rtcReadRam))&0ffh
  4212+ 001E3C  0101               	movlb	1	; () banked
  4213+ 001E3E  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4214+ 001E40  EC65  F01B         	call	_rtcReadRam	;wreg free
  4215+ 001E44  0101               	movlb	1	; () banked
  4216+ 001E46  0101               	movlb	1	; () banked
  4217+ 001E48  6F08               	movwf	((rtcInit@y))&0ffh
  4218+                          	line	54
  4219+                          ;rtc.c: 54: if(y != (UINT8)0x95)
  4220+ 001E4A  0101               	movlb	1	; () banked
  4221+ 001E4C  0101               	movlb	1	; () banked
  4222+ 001E4E  5108               	movf	((rtcInit@y))&0ffh,w
  4223+ 001E50  0A95               	xorlw	149
  4224+                          
  4225+ 001E52  B4D8               	btfsc	status,2
  4226+ 001E54  EF2E  F00F         	goto	u4141
  4227+ 001E58  EF30  F00F         	goto	u4140
  4228+ 001E5C                     u4141:
  4229+ 001E5C  EFE1  F00F         	goto	l859
  4230+ 001E60                     u4140:
  4231+                          	line	57
  4232+                          ;rtc.c: 55: {
  4233+                          ;rtc.c: 57: rtcWriteRam( (UINT8)0x80, 0x00);
  4234+ 001E60  0101               	movlb	1	; () banked
  4235+ 001E62  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4236+ 001E64  0E00               	movlw	low(0)
  4237+ 001E66  0101               	movlb	1	; () banked
  4238+ 001E68  0101               	movlb	1	; () banked
  4239+ 001E6A  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  4240+ 001E6C  0101               	movlb	1	; () banked
  4241+ 001E6E  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4242+ 001E70  0101               	movlb	1	; () banked
  4243+ 001E72  6F11               	movwf	(??_rtcInit+9+0)&0ffh
  4244+ 001E74  0E80               	movlw	low(080h)
  4245+ 001E76  0101               	movlb	1	; () banked
  4246+ 001E78  0101               	movlb	1	; () banked
  4247+ 001E7A  6F35               	movwf	((?_rtcWriteRam))&0ffh
  4248+ 001E7C  0101               	movlb	1	; () banked
  4249+ 001E7E  5111               	movf	(??_rtcInit+9+0)&0ffh,w
  4250+ 001E80  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  4251+                          	line	58
  4252+                          ;rtc.c: 58: rtcWriteRam( (UINT8)0xC0, (UINT8)0x9
      +                          5);
  4253+ 001E84  0101               	movlb	1	; () banked
  4254+ 001E86  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4255+ 001E88  0E95               	movlw	low(095h)
  4256+ 001E8A  0101               	movlb	1	; () banked
  4257+ 001E8C  0101               	movlb	1	; () banked
  4258+ 001E8E  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  4259+ 001E90  0101               	movlb	1	; () banked
  4260+ 001E92  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4261+ 001E94  0101               	movlb	1	; () banked
  4262+ 001E96  6F11               	movwf	(??_rtcInit+9+0)&0ffh
  4263+ 001E98  0EC0               	movlw	low(0C0h)
  4264+ 001E9A  0101               	movlb	1	; () banked
  4265+ 001E9C  0101               	movlb	1	; () banked
  4266+ 001E9E  6F35               	movwf	((?_rtcWriteRam))&0ffh
  4267+ 001EA0  0101               	movlb	1	; () banked
  4268+ 001EA2  5111               	movf	(??_rtcInit+9+0)&0ffh,w
  4269+ 001EA4  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  4270+                          	line	59
  4271+                          ;rtc.c: 59: rtcWriteRam( (UINT8)0xC2, 5);
  4272+ 001EA8  0101               	movlb	1	; () banked
  4273+ 001EAA  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4274+ 001EAC  0E05               	movlw	low(05h)
  4275+ 001EAE  0101               	movlb	1	; () banked
  4276+ 001EB0  0101               	movlb	1	; () banked
  4277+ 001EB2  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  4278+ 001EB4  0101               	movlb	1	; () banked
  4279+ 001EB6  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4280+ 001EB8  0101               	movlb	1	; () banked
  4281+ 001EBA  6F11               	movwf	(??_rtcInit+9+0)&0ffh
  4282+ 001EBC  0EC2               	movlw	low(0C2h)
  4283+ 001EBE  0101               	movlb	1	; () banked
  4284+ 001EC0  0101               	movlb	1	; () banked
  4285+ 001EC2  6F35               	movwf	((?_rtcWriteRam))&0ffh
  4286+ 001EC4  0101               	movlb	1	; () banked
  4287+ 001EC6  5111               	movf	(??_rtcInit+9+0)&0ffh,w
  4288+ 001EC8  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  4289+                          	line	62
  4290+                          ;rtc.c: 62: tt.sec= 0x00;
  4291+ 001ECC  0101               	movlb	1	; () banked
  4292+ 001ECE  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4293+ 001ED0  0E00               	movlw	low(0)
  4294+ 001ED2  0101               	movlb	1	; () banked
  4295+ 001ED4  0101               	movlb	1	; () banked
  4296+ 001ED6  6F09               	movwf	((rtcInit@tt))&0ffh
  4297+ 001ED8  0101               	movlb	1	; () banked
  4298+ 001EDA  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4299+                          	line	63
  4300+                          ;rtc.c: 63: tt.min= 0x00;
  4301+ 001EDC  0101               	movlb	1	; () banked
  4302+ 001EDE  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4303+ 001EE0  0E00               	movlw	low(0)
  4304+ 001EE2  0101               	movlb	1	; () banked
  4305+ 001EE4  0101               	movlb	1	; () banked
  4306+ 001EE6  6F0A               	movwf	(0+(rtcInit@tt+01h))&0ffh
  4307+ 001EE8  0101               	movlb	1	; () banked
  4308+ 001EEA  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4309+                          	line	64
  4310+                          ;rtc.c: 64: tt.hr= 0x00;
  4311+ 001EEC  0101               	movlb	1	; () banked
  4312+ 001EEE  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4313+ 001EF0  0E00               	movlw	low(0)
  4314+ 001EF2  0101               	movlb	1	; () banked
  4315+ 001EF4  0101               	movlb	1	; () banked
  4316+ 001EF6  6F0B               	movwf	(0+(rtcInit@tt+02h))&0ffh
  4317+ 001EF8  0101               	movlb	1	; () banked
  4318+ 001EFA  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4319+                          	line	65
  4320+                          ;rtc.c: 65: tt.date= 0x01;
  4321+ 001EFC  0101               	movlb	1	; () banked
  4322+ 001EFE  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4323+ 001F00  0E01               	movlw	low(01h)
  4324+ 001F02  0101               	movlb	1	; () banked
  4325+ 001F04  0101               	movlb	1	; () banked
  4326+ 001F06  6F0C               	movwf	(0+(rtcInit@tt+03h))&0ffh
  4327+ 001F08  0101               	movlb	1	; () banked
  4328+ 001F0A  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4329+                          	line	66
  4330+                          ;rtc.c: 66: tt.month=0x01;
  4331+ 001F0C  0101               	movlb	1	; () banked
  4332+ 001F0E  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4333+ 001F10  0E01               	movlw	low(01h)
  4334+ 001F12  0101               	movlb	1	; () banked
  4335+ 001F14  0101               	movlb	1	; () banked
  4336+ 001F16  6F0D               	movwf	(0+(rtcInit@tt+04h))&0ffh
  4337+ 001F18  0101               	movlb	1	; () banked
  4338+ 001F1A  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4339+                          	line	67
  4340+                          ;rtc.c: 67: tt.day= 0x05;
  4341+ 001F1C  0101               	movlb	1	; () banked
  4342+ 001F1E  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4343+ 001F20  0E05               	movlw	low(05h)
  4344+ 001F22  0101               	movlb	1	; () banked
  4345+ 001F24  0101               	movlb	1	; () banked
  4346+ 001F26  6F0E               	movwf	(0+(rtcInit@tt+05h))&0ffh
  4347+ 001F28  0101               	movlb	1	; () banked
  4348+ 001F2A  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4349+                          	line	68
  4350+                          ;rtc.c: 68: tt.year= 0x10;
  4351+ 001F2C  0101               	movlb	1	; () banked
  4352+ 001F2E  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4353+ 001F30  0E10               	movlw	low(010h)
  4354+ 001F32  0101               	movlb	1	; () banked
  4355+ 001F34  0101               	movlb	1	; () banked
  4356+ 001F36  6F0F               	movwf	(0+(rtcInit@tt+06h))&0ffh
  4357+ 001F38  0101               	movlb	1	; () banked
  4358+ 001F3A  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4359+                          	line	69
  4360+                          ;rtc.c: 69: rtcWriteRam((UINT8)0xCC, 0x00);
  4361+ 001F3C  0101               	movlb	1	; () banked
  4362+ 001F3E  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4363+ 001F40  0E00               	movlw	low(0)
  4364+ 001F42  0101               	movlb	1	; () banked
  4365+ 001F44  0101               	movlb	1	; () banked
  4366+ 001F46  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  4367+ 001F48  0101               	movlb	1	; () banked
  4368+ 001F4A  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4369+ 001F4C  0101               	movlb	1	; () banked
  4370+ 001F4E  6F11               	movwf	(??_rtcInit+9+0)&0ffh
  4371+ 001F50  0ECC               	movlw	low(0CCh)
  4372+ 001F52  0101               	movlb	1	; () banked
  4373+ 001F54  0101               	movlb	1	; () banked
  4374+ 001F56  6F35               	movwf	((?_rtcWriteRam))&0ffh
  4375+ 001F58  0101               	movlb	1	; () banked
  4376+ 001F5A  5111               	movf	(??_rtcInit+9+0)&0ffh,w
  4377+ 001F5C  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  4378+                          	line	70
  4379+                          ;rtc.c: 70: rtcSetClock(&tt);
  4380+ 001F60  0101               	movlb	1	; () banked
  4381+ 001F62  0E09               	movlw	low(rtcInit@tt)
  4382+ 001F64  0101               	movlb	1	; () banked
  4383+ 001F66  0101               	movlb	1	; () banked
  4384+ 001F68  6F12               	movwf	((?_rtcSetClock))&0ffh
  4385+ 001F6A  0101               	movlb	1	; () banked
  4386+ 001F6C  0E01               	movlw	high(rtcInit@tt)
  4387+ 001F6E  0101               	movlb	1	; () banked
  4388+ 001F70  6F13               	movwf	((?_rtcSetClock+1))&0ffh
  4389+ 001F72  ECF7  F012         	call	_rtcSetClock	;wreg free
  4390+                          	line	71
  4391+                          ;rtc.c: 71: rtcSaveLastSync(&tt, 0);
  4392+ 001F76  0101               	movlb	1	; () banked
  4393+ 001F78  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4394+ 001F7A  0E00               	movlw	low(0)
  4395+ 001F7C  0101               	movlb	1	; () banked
  4396+ 001F7E  0101               	movlb	1	; () banked
  4397+ 001F80  6F32               	movwf	(0+(?_rtcSaveLastSync+02h))&0ffh
  4398+ 001F82  0101               	movlb	1	; () banked
  4399+ 001F84  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4400+ 001F86  0101               	movlb	1	; () banked
  4401+ 001F88  0E09               	movlw	low(rtcInit@tt)
  4402+ 001F8A  0101               	movlb	1	; () banked
  4403+ 001F8C  0101               	movlb	1	; () banked
  4404+ 001F8E  6F30               	movwf	((?_rtcSaveLastSync))&0ffh
  4405+ 001F90  0101               	movlb	1	; () banked
  4406+ 001F92  0E01               	movlw	high(rtcInit@tt)
  4407+ 001F94  0101               	movlb	1	; () banked
  4408+ 001F96  6F31               	movwf	((?_rtcSaveLastSync+1))&0ffh
  4409+ 001F98  ECC0  F010         	call	_rtcSaveLastSync	;wreg free
  4410+                          	line	72
  4411+                          ;rtc.c: 72: rtcSaveLastSync(&tt, 1);
  4412+ 001F9C  0101               	movlb	1	; () banked
  4413+ 001F9E  6F10               	movwf	(??_rtcInit+8+0)&0ffh
  4414+ 001FA0  0E01               	movlw	low(01h)
  4415+ 001FA2  0101               	movlb	1	; () banked
  4416+ 001FA4  0101               	movlb	1	; () banked
  4417+ 001FA6  6F32               	movwf	(0+(?_rtcSaveLastSync+02h))&0ffh
  4418+ 001FA8  0101               	movlb	1	; () banked
  4419+ 001FAA  5110               	movf	(??_rtcInit+8+0)&0ffh,w
  4420+ 001FAC  0101               	movlb	1	; () banked
  4421+ 001FAE  0E09               	movlw	low(rtcInit@tt)
  4422+ 001FB0  0101               	movlb	1	; () banked
  4423+ 001FB2  0101               	movlb	1	; () banked
  4424+ 001FB4  6F30               	movwf	((?_rtcSaveLastSync))&0ffh
  4425+ 001FB6  0101               	movlb	1	; () banked
  4426+ 001FB8  0E01               	movlw	high(rtcInit@tt)
  4427+ 001FBA  0101               	movlb	1	; () banked
  4428+ 001FBC  6F31               	movwf	((?_rtcSaveLastSync+1))&0ffh
  4429+ 001FBE  ECC0  F010         	call	_rtcSaveLastSync	;wreg free
  4430+                          	line	73
  4431+                          	
  4432+ 001FC2                     l859:		; BSR set to: ?
  4433+                          
  4434+                          	line	75
  4435+                          ;rtc.c: 73: }
  4436+                          ;rtc.c: 75: }
  4437+ 001FC2                     l858:
  4438+                          			; BSR set to: ?
  4439+                          
  4440+ 001FC2  0012               	return
  4441+                          	opt stack 0
  4442+                          GLOBAL __end_of_rtcInit
  4443+ 001FC4                     	__end_of_rtcInit:
  4444+                          	FNSIZE	_rtcInit,10,0
  4445+                          ; =============== function _rtcInit ends =======
      +                          =====
  4446+                          
  4447+                          	signat	_rtcInit,88
  4448+                          	global	_spiInit
  4449+                          	global	??_spiInit
  4450+                          	global	?_spiInit
  4451+                          
  4452+                          ; *************** function _spiInit ************
      +                          *****
  4453+                          ; Defined at:
  4454+                          ;		line 42 in file "spi.c"
  4455+                          ; Parameters:
  4456+                          ;		None
  4457+                          ; Auto variables:
  4458+                          ;		None
  4459+                          ; Return value:
  4460+                          ;		type: void 
  4461+                          ;		size: 0
  4462+                          ; Registers used:
  4463+                          ;		None
  4464+                          ; Tracked objects:
  4465+                          ;		On entry : 0/0
  4466+                          ;		On exit  : 0/0
  4467+                          ;		Unchanged: 0/0
  4468+                          ; Data sizes:
  4469+                          ;		Autos:    0
  4470+                          ;		Params:   0
  4471+                          ;		Temp:     0
  4472+                          ;		Total:    0
  4473+                          ; This function calls:
  4474+                          ;		Nothing
  4475+                          ; This function is called by:
  4476+                          ;		_rtcInit
  4477+                          ; This function uses a non-reentrant model
  4478+                          ; 
  4479+                                  psect   text9,class=CODE,space=0,reloc=2
  4480+                          
  4481+                          	opt lm
  4482+                          	file	"spi.c"
  4483+                          	line	42
  4484+ 000000                     	__size_of_spiInit	equ	__end_of_spiInit-_spiInit
  4485+                          ;spi.c: 41: void spiInit(void)
  4486+                          ;spi.c: 42: {
  4487+                          	
  4488+ 00376C                     _spiInit:		; BSR set to: ?
  4489+                          
  4490+                          	opt stack 28
  4491+                          	line	44
  4492+ 00376C  9A89               	bcf	c:(31821/8),(31821)&7	;volatile
  4493+                          	line	45
  4494+                          ;spi.c: 45: TRISA4 = 0;
  4495+ 00376E  9892               	bcf	c:(31892/8),(31892)&7	;volatile
  4496+                          	line	46
  4497+                          ;spi.c: 46: LATA4 = 0;
  4498+ 003770  9889               	bcf	c:(31820/8),(31820)&7	;volatile
  4499+                          	line	47
  4500+                          ;spi.c: 47: LATA3 = 0;
  4501+ 003772  9689               	bcf	c:(31819/8),(31819)&7	;volatile
  4502+                          	line	49
  4503+                          ;spi.c: 49: }
  4504+ 003774                     l1056:
  4505+                          			; BSR set to: ?
  4506+                          
  4507+ 003774  0012               	return
  4508+                          	opt stack 0
  4509+                          GLOBAL __end_of_spiInit
  4510+ 003776                     	__end_of_spiInit:
  4511+                          	FNSIZE	_spiInit,0,0
  4512+                          ; =============== function _spiInit ends =======
      +                          =====
  4513+                          
  4514+                          	signat	_spiInit,88
  4515+                          	global	_glcdMakeLastSyncString
  4516+                          	global	??_glcdMakeLastSyncString
  4517+                          	global	?_glcdMakeLastSyncString
  4518+                          
  4519+                          ; *************** function _glcdMakeLastSyncStri
      +                          ng *****************
  4520+                          ; Defined at:
  4521+                          ;		line 693 in file "wwv.c"
  4522+                          ; Parameters:
  4523+                          ;		pBuffer        size:   2offs:   0	type: PTR u
      +                          nsigned char ; Largest target is 16
  4524+                          ;		 -> wwvGetTime@sz(16), 
  4525+                          ;		yMonth         size:   1offs:   2	type: unsig
      +                          ned char 
  4526+                          ;		yDate          size:   1offs:   3	type: unsig
      +                          ned char 
  4527+                          ;		yHour          size:   1offs:   4	type: unsig
      +                          ned char 
  4528+                          ;		yMin           size:   1offs:   5	type: unsig
      +                          ned char 
  4529+                          ; Auto variables:
  4530+                          ;		yChar       	       	type: unsigned char 
  4531+                          ;		yPos        	       	type: unsigned char 
  4532+                          ; Return value:
  4533+                          ;		type: void 
  4534+                          ;		size: 0
  4535+                          ; Registers used:
  4536+                          ;		wreg, fsr0l, fsr0h, status,2, status,0
  4537+                          ; Tracked objects:
  4538+                          ;		On entry : 0/0
  4539+                          ;		On exit  : 0/0
  4540+                          ;		Unchanged: 0/0
  4541+                          ; Data sizes:
  4542+                          ;		Autos:    2
  4543+                          ;		Params:   6
  4544+                          ;		Temp:     1
  4545+                          ;		Total:    9
  4546+                          ; This function calls:
  4547+                          ; This function is called by:
  4548+                          ;		_wwvGetTime
  4549+                          ; This function uses a non-reentrant model
  4550+                          ; 
  4551+                                  psect   text10,class=CODE,space=0,reloc=
      +                          2
  4552+                          
  4553+                          	opt lm
  4554+                          	file	"wwv.c"
  4555+                          	line	693
  4556+ 000000                     	__size_of_glcdMakeLastSyncString	equ	__end_of_g
      +                          lcdMakeLastSyncString-_glcdMakeLastSyncString
  4557+                          ;wwv.c: 691: static void glcdMakeLastSyncString(
      +                          UINT8 *pBuffer, UINT8 yMonth, UINT8 yDate,
  4558+                          ;wwv.c: 692: UINT8 yHour, UINT8 yMin)
  4559+                          ;wwv.c: 693: {
  4560+                          	
  4561+ 00171E                     _glcdMakeLastSyncString:		; BSR set to: ?
  4562+                          
  4563+                          	opt stack 28
  4564+                          	line	697
  4565+                          ;wwv.c: 694: UINT8 yPos, yChar;
  4566+                          ;wwv.c: 697: yPos = 0;
  4567+ 00171E  0101               	movlb	1	; () banked
  4568+ 001720  6F38               	movwf	(??_glcdMakeLastSyncString+2+0)&0ffh
  4569+ 001722  0E00               	movlw	low(0)
  4570+ 001724  0101               	movlb	1	; () banked
  4571+ 001726  0101               	movlb	1	; () banked
  4572+ 001728  6F37               	movwf	((glcdMakeLastSyncString@yPos))&0ffh
  4573+ 00172A  0101               	movlb	1	; () banked
  4574+ 00172C  5138               	movf	(??_glcdMakeLastSyncString+2+0)&0ffh,w
  4575+                          	line	698
  4576+                          ;wwv.c: 698: yChar = (yMonth & 0xf0) >> 4;
  4577+ 00172E  C132  F138         	movff	(glcdMakeLastSyncString@yMonth),??_glcdMa
      +                          keLastSyncString+2+0
  4578+ 001732  0EF0               	movlw	0F0h
  4579+ 001734  0101               	movlb	1	; () banked
  4580+ 001736  1738               	andwf	(??_glcdMakeLastSyncString+2+0)&0ffh
  4581+ 001738  0101               	movlb	1	; () banked
  4582+ 00173A  3938               	swapf	(??_glcdMakeLastSyncString+2+0)&0ffh,w
  4583+ 00173C  0B0F               	andlw	(0ffh shr 4) & 0ffh
  4584+ 00173E  0101               	movlb	1	; () banked
  4585+ 001740  0101               	movlb	1	; () banked
  4586+ 001742  6F36               	movwf	((glcdMakeLastSyncString@yChar))&0ffh
  4587+                          	line	699
  4588+                          ;wwv.c: 699: if(yChar)
  4589+ 001744  0101               	movlb	1	; () banked
  4590+ 001746  0101               	movlb	1	; () banked
  4591+ 001748  5136               	movf	((glcdMakeLastSyncString@yChar))&0ffh,w
  4592+ 00174A  B4D8               	btfsc	status,2
  4593+ 00174C  EFAA  F00B         	goto	u4151
  4594+ 001750  EFAC  F00B         	goto	u4150
  4595+ 001754                     u4151:
  4596+ 001754  EFC1  F00B         	goto	l1344
  4597+ 001758                     u4150:
  4598+                          	line	700
  4599+ 001758  0101               	movlb	1	; () banked
  4600+ 00175A  0101               	movlb	1	; () banked
  4601+ 00175C  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4602+ 00175E  0101               	movlb	1	; () banked
  4603+ 001760  0101               	movlb	1	; () banked
  4604+ 001762  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4605+ 001764  6EE9               	movwf	c:fsr0l
  4606+ 001766  0101               	movlb	1	; () banked
  4607+ 001768  0E00               	movlw	0
  4608+ 00176A  0101               	movlb	1	; () banked
  4609+ 00176C  0101               	movlb	1	; () banked
  4610+ 00176E  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
      +                          h,w
  4611+ 001770  6EEA               	movwf	1+c:fsr0l
  4612+ 001772  0101               	movlb	1	; () banked
  4613+ 001774  0101               	movlb	1	; () banked
  4614+ 001776  5136               	movf	((glcdMakeLastSyncString@yChar))&0ffh,w
  4615+ 001778  0930               	iorlw	low(030h)
  4616+ 00177A  6EEF               	movwf	indf0
  4617+                          
  4618+                          ;wwv.c: 700: pBuffer[yPos++] = yChar | 0x30;
  4619+ 00177C  0101               	movlb	1	; () banked
  4620+ 00177E  0101               	movlb	1	; () banked
  4621+ 001780  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4622+                          	
  4623+ 001782                     l1344:		; BSR set to: ?
  4624+                          
  4625+                          	line	701
  4626+ 001782  0101               	movlb	1	; () banked
  4627+ 001784  0101               	movlb	1	; () banked
  4628+ 001786  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4629+ 001788  0101               	movlb	1	; () banked
  4630+ 00178A  0101               	movlb	1	; () banked
  4631+ 00178C  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4632+ 00178E  6EE9               	movwf	c:fsr0l
  4633+ 001790  0101               	movlb	1	; () banked
  4634+ 001792  0E00               	movlw	0
  4635+ 001794  0101               	movlb	1	; () banked
  4636+ 001796  0101               	movlb	1	; () banked
  4637+ 001798  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
      +                          h,w
  4638+ 00179A  6EEA               	movwf	1+c:fsr0l
  4639+ 00179C  0101               	movlb	1	; () banked
  4640+ 00179E  0101               	movlb	1	; () banked
  4641+ 0017A0  5132               	movf	((glcdMakeLastSyncString@yMonth))&0ffh,w
  4642+ 0017A2  0B0F               	andlw	low(0Fh)
  4643+ 0017A4  0930               	iorlw	low(030h)
  4644+ 0017A6  6EEF               	movwf	indf0
  4645+                          
  4646+                          ;wwv.c: 701: pBuffer[yPos++] = (yMonth & 0x0f) |
      +                           0x30;
  4647+ 0017A8  0101               	movlb	1	; () banked
  4648+ 0017AA  0101               	movlb	1	; () banked
  4649+ 0017AC  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4650+                          	line	702
  4651+ 0017AE  0101               	movlb	1	; () banked
  4652+ 0017B0  0101               	movlb	1	; () banked
  4653+ 0017B2  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4654+ 0017B4  0101               	movlb	1	; () banked
  4655+ 0017B6  0101               	movlb	1	; () banked
  4656+ 0017B8  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4657+ 0017BA  6EE9               	movwf	c:fsr0l
  4658+ 0017BC  0101               	movlb	1	; () banked
  4659+ 0017BE  0E00               	movlw	0
  4660+ 0017C0  0101               	movlb	1	; () banked
  4661+ 0017C2  0101               	movlb	1	; () banked
  4662+ 0017C4  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
      +                          h,w
  4663+ 0017C6  6EEA               	movwf	1+c:fsr0l
  4664+ 0017C8  0E2F               	movlw	low(02Fh)
  4665+ 0017CA  6EEF               	movwf	indf0
  4666+                          ;wwv.c: 702: pBuffer[yPos++] = '/';
  4667+ 0017CC  0101               	movlb	1	; () banked
  4668+ 0017CE  0101               	movlb	1	; () banked
  4669+ 0017D0  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4670+                          	line	705
  4671+                          ;wwv.c: 705: yChar = (yDate & 0xf0) >> 4;
  4672+ 0017D2  C133  F138         	movff	(glcdMakeLastSyncString@yDate),??_glcdMak
      +                          eLastSyncString+2+0
  4673+ 0017D6  0EF0               	movlw	0F0h
  4674+ 0017D8  0101               	movlb	1	; () banked
  4675+ 0017DA  1738               	andwf	(??_glcdMakeLastSyncString+2+0)&0ffh
  4676+ 0017DC  0101               	movlb	1	; () banked
  4677  0017DE  3938               	swapf	(??_glcdMakeLastSyncString+2+0)&0ffh,w
  4678  0017E0  0B0F               	andlw	(0ffh shr 4) & 0ffh
  4679  0017E2  0101               	movlb	1	; () banked
  4680  0017E4  0101               	movlb	1	; () banked
  4681  0017E6  6F36               	movwf	((glcdMakeLastSyncString@yChar))&0ffh
  4682                           	line	706
  4683                           ;wwv.c: 706: if(yChar)
  4684  0017E8  0101               	movlb	1	; () banked
  4685  0017EA  0101               	movlb	1	; () banked
  4686  0017EC  5136               	movf	((glcdMakeLastSyncString@yChar))&0ffh,w
  4687  0017EE  B4D8               	btfsc	status,2
  4688  0017F0  EFFC  F00B         	goto	u4161
  4689  0017F4  EFFE  F00B         	goto	u4160
  4690  0017F8                     u4161:
  4691  0017F8  EF13  F00C         	goto	l1345
  4692  0017FC                     u4160:
  4693                           	line	707
  4694  0017FC  0101               	movlb	1	; () banked
  4695  0017FE  0101               	movlb	1	; () banked
  4696  001800  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4697  001802  0101               	movlb	1	; () banked
  4698  001804  0101               	movlb	1	; () banked
  4699  001806  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4700  001808  6EE9               	movwf	c:fsr0l
  4701  00180A  0101               	movlb	1	; () banked
  4702  00180C  0E00               	movlw	0
  4703  00180E  0101               	movlb	1	; () banked
  4704  001810  0101               	movlb	1	; () banked
  4705  001812  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
                                 h,w
  4706  001814  6EEA               	movwf	1+c:fsr0l
  4707  001816  0101               	movlb	1	; () banked
  4708  001818  0101               	movlb	1	; () banked
  4709  00181A  5136               	movf	((glcdMakeLastSyncString@yChar))&0ffh,w
  4710  00181C  0930               	iorlw	low(030h)
  4711  00181E  6EEF               	movwf	indf0
  4712                           
  4713                           ;wwv.c: 707: pBuffer[yPos++] = yChar | 0x30;
  4714  001820  0101               	movlb	1	; () banked
  4715  001822  0101               	movlb	1	; () banked
  4716  001824  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4717                           	
  4718  001826                     l1345:		; BSR set to: ?
  4719                           
  4720                           	line	708
  4721  001826  0101               	movlb	1	; () banked
  4722  001828  0101               	movlb	1	; () banked
  4723  00182A  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4724  00182C  0101               	movlb	1	; () banked
  4725  00182E  0101               	movlb	1	; () banked
  4726  001830  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4727  001832  6EE9               	movwf	c:fsr0l
  4728  001834  0101               	movlb	1	; () banked
  4729  001836  0E00               	movlw	0
  4730  001838  0101               	movlb	1	; () banked
  4731  00183A  0101               	movlb	1	; () banked
  4732  00183C  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
                                 h,w
  4733  00183E  6EEA               	movwf	1+c:fsr0l
  4734  001840  0101               	movlb	1	; () banked
  4735  001842  0101               	movlb	1	; () banked
  4736  001844  5133               	movf	((glcdMakeLastSyncString@yDate))&0ffh,w
  4737  001846  0B0F               	andlw	low(0Fh)
  4738  001848  0930               	iorlw	low(030h)
  4739  00184A  6EEF               	movwf	indf0
  4740                           
  4741                           ;wwv.c: 708: pBuffer[yPos++] = (yDate & 0x0f) | 
                                 0x30;
  4742  00184C  0101               	movlb	1	; () banked
  4743  00184E  0101               	movlb	1	; () banked
  4744  001850  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4745                           	line	709
  4746  001852  0101               	movlb	1	; () banked
  4747  001854  0101               	movlb	1	; () banked
  4748  001856  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4749  001858  0101               	movlb	1	; () banked
  4750  00185A  0101               	movlb	1	; () banked
  4751  00185C  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4752  00185E  6EE9               	movwf	c:fsr0l
  4753  001860  0101               	movlb	1	; () banked
  4754  001862  0E00               	movlw	0
  4755  001864  0101               	movlb	1	; () banked
  4756  001866  0101               	movlb	1	; () banked
  4757  001868  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
                                 h,w
  4758  00186A  6EEA               	movwf	1+c:fsr0l
  4759  00186C  0E20               	movlw	low(020h)
  4760  00186E  6EEF               	movwf	indf0
  4761                           ;wwv.c: 709: pBuffer[yPos++] = ' ';
  4762  001870  0101               	movlb	1	; () banked
  4763  001872  0101               	movlb	1	; () banked
  4764  001874  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4765                           	line	712
  4766                           ;wwv.c: 712: yChar = (yHour & 0xf0) >> 4;
  4767  001876  C134  F138         	movff	(glcdMakeLastSyncString@yHour),??_glcdMak
                                 eLastSyncString+2+0
  4768  00187A  0EF0               	movlw	0F0h
  4769  00187C  0101               	movlb	1	; () banked
  4770  00187E  1738               	andwf	(??_glcdMakeLastSyncString+2+0)&0ffh
  4771  001880  0101               	movlb	1	; () banked
  4772  001882  3938               	swapf	(??_glcdMakeLastSyncString+2+0)&0ffh,w
  4773  001884  0B0F               	andlw	(0ffh shr 4) & 0ffh
  4774  001886  0101               	movlb	1	; () banked
  4775  001888  0101               	movlb	1	; () banked
  4776  00188A  6F36               	movwf	((glcdMakeLastSyncString@yChar))&0ffh
  4777                           	line	713
  4778  00188C  0101               	movlb	1	; () banked
  4779  00188E  0101               	movlb	1	; () banked
  4780  001890  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4781  001892  0101               	movlb	1	; () banked
  4782  001894  0101               	movlb	1	; () banked
  4783  001896  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4784  001898  6EE9               	movwf	c:fsr0l
  4785  00189A  0101               	movlb	1	; () banked
  4786  00189C  0E00               	movlw	0
  4787  00189E  0101               	movlb	1	; () banked
  4788  0018A0  0101               	movlb	1	; () banked
  4789  0018A2  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
                                 h,w
  4790  0018A4  6EEA               	movwf	1+c:fsr0l
  4791  0018A6  0101               	movlb	1	; () banked
  4792  0018A8  0101               	movlb	1	; () banked
  4793  0018AA  5136               	movf	((glcdMakeLastSyncString@yChar))&0ffh,w
  4794  0018AC  0930               	iorlw	low(030h)
  4795  0018AE  6EEF               	movwf	indf0
  4796                           
  4797                           ;wwv.c: 713: pBuffer[yPos++] = yChar | 0x30;
  4798  0018B0  0101               	movlb	1	; () banked
  4799  0018B2  0101               	movlb	1	; () banked
  4800  0018B4  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4801                           	line	714
  4802  0018B6  0101               	movlb	1	; () banked
  4803  0018B8  0101               	movlb	1	; () banked
  4804  0018BA  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4805  0018BC  0101               	movlb	1	; () banked
  4806  0018BE  0101               	movlb	1	; () banked
  4807  0018C0  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4808  0018C2  6EE9               	movwf	c:fsr0l
  4809  0018C4  0101               	movlb	1	; () banked
  4810  0018C6  0E00               	movlw	0
  4811  0018C8  0101               	movlb	1	; () banked
  4812  0018CA  0101               	movlb	1	; () banked
  4813  0018CC  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
                                 h,w
  4814  0018CE  6EEA               	movwf	1+c:fsr0l
  4815  0018D0  0101               	movlb	1	; () banked
  4816  0018D2  0101               	movlb	1	; () banked
  4817  0018D4  5134               	movf	((glcdMakeLastSyncString@yHour))&0ffh,w
  4818  0018D6  0B0F               	andlw	low(0Fh)
  4819  0018D8  0930               	iorlw	low(030h)
  4820  0018DA  6EEF               	movwf	indf0
  4821                           
  4822                           ;wwv.c: 714: pBuffer[yPos++] = (yHour & 0x0f) | 
                                 0x30;
  4823  0018DC  0101               	movlb	1	; () banked
  4824  0018DE  0101               	movlb	1	; () banked
  4825  0018E0  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4826                           	line	715
  4827  0018E2  0101               	movlb	1	; () banked
  4828  0018E4  0101               	movlb	1	; () banked
  4829  0018E6  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4830  0018E8  0101               	movlb	1	; () banked
  4831  0018EA  0101               	movlb	1	; () banked
  4832  0018EC  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4833  0018EE  6EE9               	movwf	c:fsr0l
  4834  0018F0  0101               	movlb	1	; () banked
  4835  0018F2  0E00               	movlw	0
  4836  0018F4  0101               	movlb	1	; () banked
  4837  0018F6  0101               	movlb	1	; () banked
  4838  0018F8  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
                                 h,w
  4839  0018FA  6EEA               	movwf	1+c:fsr0l
  4840  0018FC  0E3A               	movlw	low(03Ah)
  4841  0018FE  6EEF               	movwf	indf0
  4842                           ;wwv.c: 715: pBuffer[yPos++] = ':';
  4843  001900  0101               	movlb	1	; () banked
  4844  001902  0101               	movlb	1	; () banked
  4845  001904  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4846                           	line	718
  4847                           ;wwv.c: 718: yChar = (yMin & 0xf0) >> 4;
  4848  001906  C135  F138         	movff	(glcdMakeLastSyncString@yMin),??_glcdMake
                                 LastSyncString+2+0
  4849  00190A  0EF0               	movlw	0F0h
  4850  00190C  0101               	movlb	1	; () banked
  4851  00190E  1738               	andwf	(??_glcdMakeLastSyncString+2+0)&0ffh
  4852  001910  0101               	movlb	1	; () banked
  4853  001912  3938               	swapf	(??_glcdMakeLastSyncString+2+0)&0ffh,w
  4854  001914  0B0F               	andlw	(0ffh shr 4) & 0ffh
  4855  001916  0101               	movlb	1	; () banked
  4856  001918  0101               	movlb	1	; () banked
  4857  00191A  6F36               	movwf	((glcdMakeLastSyncString@yChar))&0ffh
  4858                           	line	719
  4859  00191C  0101               	movlb	1	; () banked
  4860  00191E  0101               	movlb	1	; () banked
  4861  001920  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4862  001922  0101               	movlb	1	; () banked
  4863  001924  0101               	movlb	1	; () banked
  4864  001926  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4865  001928  6EE9               	movwf	c:fsr0l
  4866  00192A  0101               	movlb	1	; () banked
  4867  00192C  0E00               	movlw	0
  4868  00192E  0101               	movlb	1	; () banked
  4869  001930  0101               	movlb	1	; () banked
  4870  001932  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
                                 h,w
  4871  001934  6EEA               	movwf	1+c:fsr0l
  4872  001936  0101               	movlb	1	; () banked
  4873  001938  0101               	movlb	1	; () banked
  4874  00193A  5136               	movf	((glcdMakeLastSyncString@yChar))&0ffh,w
  4875  00193C  0930               	iorlw	low(030h)
  4876  00193E  6EEF               	movwf	indf0
  4877                           
  4878                           ;wwv.c: 719: pBuffer[yPos++] = yChar | 0x30;
  4879  001940  0101               	movlb	1	; () banked
  4880  001942  0101               	movlb	1	; () banked
  4881  001944  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4882                           	line	720
  4883  001946  0101               	movlb	1	; () banked
  4884  001948  0101               	movlb	1	; () banked
  4885  00194A  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4886  00194C  0101               	movlb	1	; () banked
  4887  00194E  0101               	movlb	1	; () banked
  4888  001950  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4889  001952  6EE9               	movwf	c:fsr0l
  4890  001954  0101               	movlb	1	; () banked
  4891  001956  0E00               	movlw	0
  4892  001958  0101               	movlb	1	; () banked
  4893  00195A  0101               	movlb	1	; () banked
  4894  00195C  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
                                 h,w
  4895  00195E  6EEA               	movwf	1+c:fsr0l
  4896  001960  0101               	movlb	1	; () banked
  4897  001962  0101               	movlb	1	; () banked
  4898  001964  5135               	movf	((glcdMakeLastSyncString@yMin))&0ffh,w
  4899  001966  0B0F               	andlw	low(0Fh)
  4900  001968  0930               	iorlw	low(030h)
  4901  00196A  6EEF               	movwf	indf0
  4902                           
  4903                           ;wwv.c: 720: pBuffer[yPos++] = (yMin & 0x0f) | 0
                                 x30;
  4904  00196C  0101               	movlb	1	; () banked
  4905  00196E  0101               	movlb	1	; () banked
  4906  001970  2B37               	incf	((glcdMakeLastSyncString@yPos))&0ffh
  4907                           	line	721
  4908                           ;wwv.c: 721: pBuffer[yPos] = '\0';
  4909  001972  0101               	movlb	1	; () banked
  4910  001974  0101               	movlb	1	; () banked
  4911  001976  5137               	movf	((glcdMakeLastSyncString@yPos))&0ffh,w
  4912  001978  0101               	movlb	1	; () banked
  4913  00197A  0101               	movlb	1	; () banked
  4914  00197C  2530               	addwf	((glcdMakeLastSyncString@pBuffer))&0ffh,w
  4915  00197E  6EE9               	movwf	c:fsr0l
  4916  001980  0101               	movlb	1	; () banked
  4917  001982  0E00               	movlw	0
  4918  001984  0101               	movlb	1	; () banked
  4919  001986  0101               	movlb	1	; () banked
  4920  001988  2131               	addwfc	((glcdMakeLastSyncString@pBuffer+1))&0ff
                                 h,w
  4921  00198A  6EEA               	movwf	1+c:fsr0l
  4922  00198C  0E00               	movlw	low(0)
  4923  00198E  6EEF               	movwf	indf0
  4924                           	line	724
  4925                           ;wwv.c: 724: }
  4926  001990                     l1343:
  4927                           			; BSR set to: ?
  4928                           
  4929  001990  0012               	return
  4930                           	opt stack 0
  4931                           GLOBAL __end_of_glcdMakeLastSyncString
  4932  001992                     	__end_of_glcdMakeLastSyncString:
  4933                           	FNSIZE	_glcdMakeLastSyncString,3,6
  4934                           ; =============== function _glcdMakeLastSyncStri
                                 ng ends ============
  4935                           
  4936                           	signat	_glcdMakeLastSyncString,20600
  4937                           	global	_wwvStartFrameTimer
  4938                           	global	??_wwvStartFrameTimer
  4939                           	global	?_wwvStartFrameTimer
  4940                           
  4941                           ; *************** function _wwvStartFrameTimer *
                                 ****************
  4942                           ; Defined at:
  4943                           ;		line 508 in file "wwv.c"
  4944                           ; Parameters:
  4945                           ;		None
  4946                           ; Auto variables:
  4947                           ;		None
  4948                           ; Return value:
  4949                           ;		type: void 
  4950                           ;		size: 0
  4951                           ; Registers used:
  4952                           ;		wreg, status,2
  4953                           ; Tracked objects:
  4954                           ;		On entry : 0/0
  4955                           ;		On exit  : 0/0
  4956                           ;		Unchanged: 0/0
  4957                           ; Data sizes:
  4958                           ;		Autos:    0
  4959                           ;		Params:   0
  4960                           ;		Temp:     0
  4961                           ;		Total:    0
  4962                           ; This function calls:
  4963                           ;		Nothing
  4964                           ; This function is called by:
  4965                           ;		_wwvGetTime
  4966                           ; This function uses a non-reentrant model
  4967                           ; 
  4968                                   psect   text11,class=CODE,space=0,reloc=
                                 2
  4969                           
  4970                           	opt lm
  4971                           	file	"wwv.c"
  4972                           	line	508
  4973  000000                     	__size_of_wwvStartFrameTimer	equ	__end_of_wwvSt
                                 artFrameTimer-_wwvStartFrameTimer
  4974                           ;wwv.c: 507: static void wwvStartFrameTimer(void
                                 )
  4975                           ;wwv.c: 508: {
  4976                           	
  4977  003738                     _wwvStartFrameTimer:		; BSR set to: ?
  4978                           
  4979                           	opt stack 28
  4980                           	line	509
  4981  003738  909E               	bcf	((c:3998)),c,0	;volatile
  4982                           	line	511
  4983                           ;wwv.c: 511: TMR1L = ((UINT8)(40535));
  4984  00373A  0E57               	movlw	low(057h)
  4985  00373C  6ECE               	movwf	((c:4046)),c	;volatile
  4986                           	line	512
  4987                           ;wwv.c: 512: TMR1H = ((UINT8)(((UINT16)(40535) >
                                 > (UINT8)8) & 0xff));
  4988  00373E  0E9E               	movlw	low(09Eh)
  4989  003740  6ECF               	movwf	((c:4047)),c	;volatile
  4990                           	line	513
  4991                           ;wwv.c: 513: g_yTimedOut = 0;
  4992  003742  0E00               	movlw	low(0)
  4993  003744  6E09               	movwf	((c:9)),c	;volatile
  4994                           	line	514
  4995                           ;wwv.c: 514: g_wFrameCounter = 0;
  4996  003746  0E00               	movlw	low(0)
  4997  003748  6E0B               	movwf	((c:11)),c	;volatile
  4998  00374A  0E00               	movlw	high(0)
  4999  00374C  6E0C               	movwf	((c:11+1)),c	;volatile
  5000                           	line	515
  5001                           ;wwv.c: 515: T1CONbits.TMR1ON = 1;
  5002  00374E  80CD               	bsf	((c:4045)),c,0	;volatile
  5003                           	line	517
  5004                           ;wwv.c: 517: }
  5005  003750                     l1318:
  5006                           			; BSR set to: ?
  5007                           
  5008  003750  0012               	return
  5009                           	opt stack 0
  5010                           GLOBAL __end_of_wwvStartFrameTimer
  5011  003752                     	__end_of_wwvStartFrameTimer:
  5012                           	FNSIZE	_wwvStartFrameTimer,0,0
  5013                           ; =============== function _wwvStartFrameTimer e
                                 nds ============
  5014                           
  5015                           	signat	_wwvStartFrameTimer,88
  5016                           	global	_glcdDrawImage
  5017                           	global	??_glcdDrawImage
  5018                           	global	?_glcdDrawImage
  5019                           
  5020                           ; *************** function _glcdDrawImage ******
                                 ***********
  5021                           ; Defined at:
  5022                           ;		line 360 in file "glcd.c"
  5023                           ; Parameters:
  5024                           ;		yNum           size:   1offs:   0	type: unsig
                                 ned char 
  5025                           ; Auto variables:
  5026                           ;		yH          	       	type: unsigned char 
  5027                           ;		yW          	       	type: unsigned char 
  5028                           ;		py          	       	type: PTR const unsigned
                                  char ; Largest target is 46
  5029                           ;		 -> digPM(46), digAM(46), digColon(18), digBl
                                 ank(39), 
  5030                           ;		 -> dig9(39), dig8(39), dig7(39), dig6(39), 
  5031                           ;		 -> dig5(39), dig4(39), dig3(39), dig2(39), 
  5032                           ;		 -> dig1(39), dig0(39), 
  5033                           ; Return value:
  5034                           ;		type: void 
  5035                           ;		size: 0
  5036                           ; Registers used:
  5037                           ;		wreg, status,2, status,0, tblptrl, tblptrh, t
                                 blptru, tablat, cstack
  5038                           ; Tracked objects:
  5039                           ;		On entry : 0/0
  5040                           ;		On exit  : 0/0
  5041                           ;		Unchanged: 0/0
  5042                           ; Data sizes:
  5043                           ;		Autos:    4
  5044                           ;		Params:   1
  5045                           ;		Temp:     1
  5046                           ;		Total:    6
  5047                           ; This function calls:
  5048                           ;		_glcdDrawBitmap
  5049                           ; This function is called by:
  5050                           ;		_DisplayTime
  5051                           ; This function uses a non-reentrant model
  5052                           ; 
  5053                                   psect   text12,class=CODE,space=0,reloc=
                                 2
  5054                           
  5055                           	opt lm
  5056                           	file	"glcd.c"
  5057                           	line	360
  5058  000000                     	__size_of_glcdDrawImage	equ	__end_of_glcdDrawIm
                                 age-_glcdDrawImage
  5059                           ;glcd.c: 359: void glcdDrawImage(UINT8 yNum)
  5060                           ;glcd.c: 360: {
  5061                           	
  5062  001156                     _glcdDrawImage:		; BSR set to: ?
  5063                           
  5064                           	opt stack 28
  5065                           	line	364
  5066  001156  EF0D  F00A         	goto	l419
  5067                           	line	368
  5068                           ;glcd.c: 365: {
  5069                           ;glcd.c: 368: case 0: yW = 13; yH = 3; py = dig0
                                 ; break;
  5070                           	
  5071  00115A                     l420:		; BSR set to: ?
  5072                           
  5073  00115A  0101               	movlb	1	; () banked
  5074  00115C  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5075  00115E  0E0D               	movlw	low(0Dh)
  5076  001160  0101               	movlb	1	; () banked
  5077  001162  0101               	movlb	1	; () banked
  5078  001164  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5079  001166  0101               	movlb	1	; () banked
  5080  001168  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5081  00116A  0101               	movlb	1	; () banked
  5082  00116C  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5083  00116E  0E03               	movlw	low(03h)
  5084  001170  0101               	movlb	1	; () banked
  5085  001172  0101               	movlb	1	; () banked
  5086  001174  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5087  001176  0101               	movlb	1	; () banked
  5088  001178  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5089  00117A  0ECD               	movlw	low(_dig0)
  5090  00117C  0101               	movlb	1	; () banked
  5091  00117E  0101               	movlb	1	; () banked
  5092  001180  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5093  001182  0E3D               	movlw	high(_dig0)
  5094  001184  0101               	movlb	1	; () banked
  5095  001186  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5096  001188  EF39  F00A         	goto	l418
  5097                           	line	369
  5098                           ;glcd.c: 369: case 1: yW = 13; yH = 3; py = dig1
                                 ; break;
  5099                           	
  5100  00118C                     l421:		; BSR set to: ?
  5101                           
  5102  00118C  0101               	movlb	1	; () banked
  5103  00118E  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5104  001190  0E0D               	movlw	low(0Dh)
  5105  001192  0101               	movlb	1	; () banked
  5106  001194  0101               	movlb	1	; () banked
  5107  001196  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5108  001198  0101               	movlb	1	; () banked
  5109  00119A  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5110  00119C  0101               	movlb	1	; () banked
  5111  00119E  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5112  0011A0  0E03               	movlw	low(03h)
  5113  0011A2  0101               	movlb	1	; () banked
  5114  0011A4  0101               	movlb	1	; () banked
  5115  0011A6  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5116  0011A8  0101               	movlb	1	; () banked
  5117  0011AA  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5118  0011AC  0EF4               	movlw	low(_dig1)
  5119  0011AE  0101               	movlb	1	; () banked
  5120  0011B0  0101               	movlb	1	; () banked
  5121  0011B2  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5122  0011B4  0E3D               	movlw	high(_dig1)
  5123  0011B6  0101               	movlb	1	; () banked
  5124  0011B8  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5125  0011BA  EF39  F00A         	goto	l418
  5126                           	line	370
  5127                           ;glcd.c: 370: case 2: yW = 13; yH = 3; py = dig2
                                 ; break;
  5128                           	
  5129  0011BE                     l422:		; BSR set to: ?
  5130                           
  5131  0011BE  0101               	movlb	1	; () banked
  5132  0011C0  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5133  0011C2  0E0D               	movlw	low(0Dh)
  5134  0011C4  0101               	movlb	1	; () banked
  5135  0011C6  0101               	movlb	1	; () banked
  5136  0011C8  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5137  0011CA  0101               	movlb	1	; () banked
  5138  0011CC  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5139  0011CE  0101               	movlb	1	; () banked
  5140  0011D0  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5141  0011D2  0E03               	movlw	low(03h)
  5142  0011D4  0101               	movlb	1	; () banked
  5143  0011D6  0101               	movlb	1	; () banked
  5144  0011D8  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5145  0011DA  0101               	movlb	1	; () banked
  5146  0011DC  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5147  0011DE  0E1B               	movlw	low(_dig2)
  5148  0011E0  0101               	movlb	1	; () banked
  5149  0011E2  0101               	movlb	1	; () banked
  5150  0011E4  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5151  0011E6  0E3E               	movlw	high(_dig2)
  5152  0011E8  0101               	movlb	1	; () banked
  5153  0011EA  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5154  0011EC  EF39  F00A         	goto	l418
  5155                           	line	371
  5156                           ;glcd.c: 371: case 3: yW = 13; yH = 3; py = dig3
                                 ; break;
  5157                           	
  5158  0011F0                     l423:		; BSR set to: ?
  5159                           
  5160  0011F0  0101               	movlb	1	; () banked
  5161  0011F2  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5162  0011F4  0E0D               	movlw	low(0Dh)
  5163  0011F6  0101               	movlb	1	; () banked
  5164  0011F8  0101               	movlb	1	; () banked
  5165  0011FA  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5166  0011FC  0101               	movlb	1	; () banked
  5167  0011FE  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5168  001200  0101               	movlb	1	; () banked
  5169  001202  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5170  001204  0E03               	movlw	low(03h)
  5171  001206  0101               	movlb	1	; () banked
  5172  001208  0101               	movlb	1	; () banked
  5173  00120A  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5174  00120C  0101               	movlb	1	; () banked
  5175  00120E  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5176  001210  0E42               	movlw	low(_dig3)
  5177  001212  0101               	movlb	1	; () banked
  5178  001214  0101               	movlb	1	; () banked
  5179  001216  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5180  001218  0E3E               	movlw	high(_dig3)
  5181  00121A  0101               	movlb	1	; () banked
  5182  00121C  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5183  00121E  EF39  F00A         	goto	l418
  5184                           	line	372
  5185                           ;glcd.c: 372: case 4: yW = 13; yH = 3; py = dig4
                                 ; break;
  5186                           	
  5187  001222                     l424:		; BSR set to: ?
  5188                           
  5189  001222  0101               	movlb	1	; () banked
  5190  001224  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5191  001226  0E0D               	movlw	low(0Dh)
  5192  001228  0101               	movlb	1	; () banked
  5193  00122A  0101               	movlb	1	; () banked
  5194  00122C  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5195  00122E  0101               	movlb	1	; () banked
  5196  001230  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5197  001232  0101               	movlb	1	; () banked
  5198  001234  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5199  001236  0E03               	movlw	low(03h)
  5200  001238  0101               	movlb	1	; () banked
  5201  00123A  0101               	movlb	1	; () banked
  5202  00123C  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5203  00123E  0101               	movlb	1	; () banked
  5204  001240  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5205  001242  0E69               	movlw	low(_dig4)
  5206  001244  0101               	movlb	1	; () banked
  5207  001246  0101               	movlb	1	; () banked
  5208  001248  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5209  00124A  0E3E               	movlw	high(_dig4)
  5210  00124C  0101               	movlb	1	; () banked
  5211  00124E  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5212  001250  EF39  F00A         	goto	l418
  5213                           	line	373
  5214                           ;glcd.c: 373: case 5: yW = 13; yH = 3; py = dig5
                                 ; break;
  5215                           	
  5216  001254                     l425:		; BSR set to: ?
  5217                           
  5218  001254  0101               	movlb	1	; () banked
  5219  001256  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5220  001258  0E0D               	movlw	low(0Dh)
  5221  00125A  0101               	movlb	1	; () banked
  5222  00125C  0101               	movlb	1	; () banked
  5223  00125E  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5224  001260  0101               	movlb	1	; () banked
  5225  001262  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5226  001264  0101               	movlb	1	; () banked
  5227  001266  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5228  001268  0E03               	movlw	low(03h)
  5229  00126A  0101               	movlb	1	; () banked
  5230  00126C  0101               	movlb	1	; () banked
  5231  00126E  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5232  001270  0101               	movlb	1	; () banked
  5233  001272  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5234  001274  0E90               	movlw	low(_dig5)
  5235  001276  0101               	movlb	1	; () banked
  5236  001278  0101               	movlb	1	; () banked
  5237  00127A  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5238  00127C  0E3E               	movlw	high(_dig5)
  5239  00127E  0101               	movlb	1	; () banked
  5240  001280  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5241  001282  EF39  F00A         	goto	l418
  5242                           	line	374
  5243                           ;glcd.c: 374: case 6: yW = 13; yH = 3; py = dig6
                                 ; break;
  5244                           	
  5245  001286                     l426:		; BSR set to: ?
  5246                           
  5247  001286  0101               	movlb	1	; () banked
  5248  001288  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5249  00128A  0E0D               	movlw	low(0Dh)
  5250  00128C  0101               	movlb	1	; () banked
  5251  00128E  0101               	movlb	1	; () banked
  5252  001290  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5253  001292  0101               	movlb	1	; () banked
  5254  001294  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5255  001296  0101               	movlb	1	; () banked
  5256  001298  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5257  00129A  0E03               	movlw	low(03h)
  5258+ 00129C  0101               	movlb	1	; () banked
  5259+ 00129E  0101               	movlb	1	; () banked
  5260+ 0012A0  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5261+ 0012A2  0101               	movlb	1	; () banked
  5262+ 0012A4  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5263+ 0012A6  0EB7               	movlw	low(_dig6)
  5264+ 0012A8  0101               	movlb	1	; () banked
  5265+ 0012AA  0101               	movlb	1	; () banked
  5266+ 0012AC  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5267+ 0012AE  0E3E               	movlw	high(_dig6)
  5268+ 0012B0  0101               	movlb	1	; () banked
  5269+ 0012B2  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5270+ 0012B4  EF39  F00A         	goto	l418
  5271+                          	line	375
  5272+                          ;glcd.c: 375: case 7: yW = 13; yH = 3; py = dig7
      +                          ; break;
  5273+                          	
  5274+ 0012B8                     l427:		; BSR set to: ?
  5275+                          
  5276+ 0012B8  0101               	movlb	1	; () banked
  5277+ 0012BA  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5278+ 0012BC  0E0D               	movlw	low(0Dh)
  5279+ 0012BE  0101               	movlb	1	; () banked
  5280+ 0012C0  0101               	movlb	1	; () banked
  5281+ 0012C2  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5282+ 0012C4  0101               	movlb	1	; () banked
  5283+ 0012C6  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5284+ 0012C8  0101               	movlb	1	; () banked
  5285+ 0012CA  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5286+ 0012CC  0E03               	movlw	low(03h)
  5287+ 0012CE  0101               	movlb	1	; () banked
  5288+ 0012D0  0101               	movlb	1	; () banked
  5289+ 0012D2  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5290+ 0012D4  0101               	movlb	1	; () banked
  5291+ 0012D6  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5292+ 0012D8  0EDE               	movlw	low(_dig7)
  5293+ 0012DA  0101               	movlb	1	; () banked
  5294+ 0012DC  0101               	movlb	1	; () banked
  5295+ 0012DE  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5296+ 0012E0  0E3E               	movlw	high(_dig7)
  5297+ 0012E2  0101               	movlb	1	; () banked
  5298+ 0012E4  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5299+ 0012E6  EF39  F00A         	goto	l418
  5300+                          	line	376
  5301+                          ;glcd.c: 376: case 8: yW = 13; yH = 3; py = dig8
      +                          ; break;
  5302+                          	
  5303+ 0012EA                     l428:		; BSR set to: ?
  5304+                          
  5305+ 0012EA  0101               	movlb	1	; () banked
  5306+ 0012EC  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5307+ 0012EE  0E0D               	movlw	low(0Dh)
  5308+ 0012F0  0101               	movlb	1	; () banked
  5309+ 0012F2  0101               	movlb	1	; () banked
  5310+ 0012F4  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5311+ 0012F6  0101               	movlb	1	; () banked
  5312+ 0012F8  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5313+ 0012FA  0101               	movlb	1	; () banked
  5314+ 0012FC  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5315+ 0012FE  0E03               	movlw	low(03h)
  5316+ 001300  0101               	movlb	1	; () banked
  5317+ 001302  0101               	movlb	1	; () banked
  5318+ 001304  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5319+ 001306  0101               	movlb	1	; () banked
  5320+ 001308  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5321+ 00130A  0E05               	movlw	low(_dig8)
  5322+ 00130C  0101               	movlb	1	; () banked
  5323+ 00130E  0101               	movlb	1	; () banked
  5324+ 001310  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5325+ 001312  0E3F               	movlw	high(_dig8)
  5326+ 001314  0101               	movlb	1	; () banked
  5327+ 001316  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5328+ 001318  EF39  F00A         	goto	l418
  5329+                          	line	377
  5330+                          ;glcd.c: 377: case 9: yW = 13; yH = 3; py = dig9
      +                          ; break;
  5331+                          	
  5332+ 00131C                     l429:		; BSR set to: ?
  5333+                          
  5334+ 00131C  0101               	movlb	1	; () banked
  5335+ 00131E  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5336+ 001320  0E0D               	movlw	low(0Dh)
  5337+ 001322  0101               	movlb	1	; () banked
  5338+ 001324  0101               	movlb	1	; () banked
  5339+ 001326  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5340+ 001328  0101               	movlb	1	; () banked
  5341+ 00132A  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5342+ 00132C  0101               	movlb	1	; () banked
  5343+ 00132E  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5344+ 001330  0E03               	movlw	low(03h)
  5345+ 001332  0101               	movlb	1	; () banked
  5346+ 001334  0101               	movlb	1	; () banked
  5347+ 001336  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5348+ 001338  0101               	movlb	1	; () banked
  5349+ 00133A  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5350+ 00133C  0E2C               	movlw	low(_dig9)
  5351+ 00133E  0101               	movlb	1	; () banked
  5352+ 001340  0101               	movlb	1	; () banked
  5353+ 001342  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5354+ 001344  0E3F               	movlw	high(_dig9)
  5355+ 001346  0101               	movlb	1	; () banked
  5356+ 001348  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5357+ 00134A  EF39  F00A         	goto	l418
  5358+                          	line	378
  5359+                          ;glcd.c: 378: case 10: yW = 13; yH = 3; py = dig
      +                          Blank; break;
  5360+                          	
  5361+ 00134E                     l430:		; BSR set to: ?
  5362+                          
  5363+ 00134E  0101               	movlb	1	; () banked
  5364+ 001350  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5365+ 001352  0E0D               	movlw	low(0Dh)
  5366+ 001354  0101               	movlb	1	; () banked
  5367+ 001356  0101               	movlb	1	; () banked
  5368+ 001358  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5369+ 00135A  0101               	movlb	1	; () banked
  5370+ 00135C  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5371+ 00135E  0101               	movlb	1	; () banked
  5372+ 001360  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5373+ 001362  0E03               	movlw	low(03h)
  5374+ 001364  0101               	movlb	1	; () banked
  5375+ 001366  0101               	movlb	1	; () banked
  5376+ 001368  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5377+ 00136A  0101               	movlb	1	; () banked
  5378+ 00136C  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5379+ 00136E  0E53               	movlw	low(_digBlank)
  5380+ 001370  0101               	movlb	1	; () banked
  5381+ 001372  0101               	movlb	1	; () banked
  5382+ 001374  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5383+ 001376  0E3F               	movlw	high(_digBlank)
  5384+ 001378  0101               	movlb	1	; () banked
  5385+ 00137A  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5386+ 00137C  EF39  F00A         	goto	l418
  5387+                          	line	379
  5388+                          ;glcd.c: 379: case 11: yW = 6; yH = 3; py = digC
      +                          olon; break;
  5389+                          	
  5390+ 001380                     l431:		; BSR set to: ?
  5391+                          
  5392+ 001380  0101               	movlb	1	; () banked
  5393+ 001382  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5394+ 001384  0E06               	movlw	low(06h)
  5395+ 001386  0101               	movlb	1	; () banked
  5396+ 001388  0101               	movlb	1	; () banked
  5397+ 00138A  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5398+ 00138C  0101               	movlb	1	; () banked
  5399+ 00138E  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5400+ 001390  0101               	movlb	1	; () banked
  5401+ 001392  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5402+ 001394  0E03               	movlw	low(03h)
  5403+ 001396  0101               	movlb	1	; () banked
  5404+ 001398  0101               	movlb	1	; () banked
  5405+ 00139A  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5406+ 00139C  0101               	movlb	1	; () banked
  5407+ 00139E  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5408+ 0013A0  0ED6               	movlw	low(_digColon)
  5409+ 0013A2  0101               	movlb	1	; () banked
  5410+ 0013A4  0101               	movlb	1	; () banked
  5411+ 0013A6  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5412+ 0013A8  0E3F               	movlw	high(_digColon)
  5413+ 0013AA  0101               	movlb	1	; () banked
  5414+ 0013AC  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5415+ 0013AE  EF39  F00A         	goto	l418
  5416+                          	line	380
  5417+                          ;glcd.c: 380: case 12: yW = 23; yH = 2; py = dig
      +                          AM; break;
  5418+                          	
  5419+ 0013B2                     l432:		; BSR set to: ?
  5420+                          
  5421+ 0013B2  0101               	movlb	1	; () banked
  5422+ 0013B4  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5423+ 0013B6  0E17               	movlw	low(017h)
  5424+ 0013B8  0101               	movlb	1	; () banked
  5425+ 0013BA  0101               	movlb	1	; () banked
  5426+ 0013BC  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5427+ 0013BE  0101               	movlb	1	; () banked
  5428+ 0013C0  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5429+ 0013C2  0101               	movlb	1	; () banked
  5430+ 0013C4  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5431+ 0013C6  0E02               	movlw	low(02h)
  5432+ 0013C8  0101               	movlb	1	; () banked
  5433+ 0013CA  0101               	movlb	1	; () banked
  5434+ 0013CC  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5435+ 0013CE  0101               	movlb	1	; () banked
  5436+ 0013D0  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5437+ 0013D2  0E71               	movlw	low(_digAM)
  5438+ 0013D4  0101               	movlb	1	; () banked
  5439+ 0013D6  0101               	movlb	1	; () banked
  5440+ 0013D8  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5441+ 0013DA  0E3D               	movlw	high(_digAM)
  5442+ 0013DC  0101               	movlb	1	; () banked
  5443+ 0013DE  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5444+ 0013E0  EF39  F00A         	goto	l418
  5445+                          	line	381
  5446+                          ;glcd.c: 381: case 13: yW = 23; yH = 2; py = dig
      +                          PM; break;
  5447+                          	
  5448+ 0013E4                     l433:		; BSR set to: ?
  5449+                          
  5450+ 0013E4  0101               	movlb	1	; () banked
  5451+ 0013E6  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5452+ 0013E8  0E17               	movlw	low(017h)
  5453+ 0013EA  0101               	movlb	1	; () banked
  5454+ 0013EC  0101               	movlb	1	; () banked
  5455+ 0013EE  6F36               	movwf	((glcdDrawImage@yW))&0ffh
  5456+ 0013F0  0101               	movlb	1	; () banked
  5457+ 0013F2  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5458+ 0013F4  0101               	movlb	1	; () banked
  5459+ 0013F6  6F39               	movwf	(??_glcdDrawImage+4+0)&0ffh
  5460+ 0013F8  0E02               	movlw	low(02h)
  5461+ 0013FA  0101               	movlb	1	; () banked
  5462+ 0013FC  0101               	movlb	1	; () banked
  5463+ 0013FE  6F35               	movwf	((glcdDrawImage@yH))&0ffh
  5464+ 001400  0101               	movlb	1	; () banked
  5465+ 001402  5139               	movf	(??_glcdDrawImage+4+0)&0ffh,w
  5466+ 001404  0E9F               	movlw	low(_digPM)
  5467+ 001406  0101               	movlb	1	; () banked
  5468+ 001408  0101               	movlb	1	; () banked
  5469+ 00140A  6F37               	movwf	((glcdDrawImage@py))&0ffh
  5470+ 00140C  0E3D               	movlw	high(_digPM)
  5471+ 00140E  0101               	movlb	1	; () banked
  5472+ 001410  6F38               	movwf	((glcdDrawImage@py+1))&0ffh
  5473+ 001412  EF39  F00A         	goto	l418
  5474+                          	line	382
  5475+                          ;glcd.c: 382: default: return;
  5476+                          	
  5477+ 001416                     l434:		; BSR set to: ?
  5478+                          
  5479+ 001416  EF43  F00A         	goto	l417
  5480+                          	line	364
  5481+                          	
  5482+ 00141A                     l419:		; BSR set to: ?
  5483+                          
  5484+ 00141A  0101               	movlb	1	; () banked
  5485+ 00141C  0101               	movlb	1	; () banked
  5486+ 00141E  5134               	movf	((glcdDrawImage@yNum))&0ffh,w
  5487+ 001420  0A00               	xorlw	0 ^ 0
  5488+ 001422  E101 D69A          	bz	l420
  5489+ 001426  0A01               	xorlw	1 ^ 0
  5490+ 001428  E101 D6B0          	bz	l421
  5491+ 00142C  0A03               	xorlw	2 ^ 1
  5492+ 00142E  E101 D6C6          	bz	l422
  5493+ 001432  0A01               	xorlw	3 ^ 2
  5494+ 001434  E101 D6DC          	bz	l423
  5495+ 001438  0A07               	xorlw	4 ^ 3
  5496+ 00143A  E101 D6F2          	bz	l424
  5497+ 00143E  0A01               	xorlw	5 ^ 4
  5498+ 001440  E101 D708          	bz	l425
  5499+ 001444  0A03               	xorlw	6 ^ 5
  5500+ 001446  E101 D71E          	bz	l426
  5501+ 00144A  0A01               	xorlw	7 ^ 6
  5502+ 00144C  E101 D734          	bz	l427
  5503+ 001450  0A0F               	xorlw	8 ^ 7
  5504+ 001452  E101 D74A          	bz	l428
  5505+ 001456  0A01               	xorlw	9 ^ 8
  5506+ 001458  E101 D760          	bz	l429
  5507+ 00145C  0A03               	xorlw	10 ^ 9
  5508+ 00145E  E101 D776          	bz	l430
  5509+ 001462  0A01               	xorlw	11 ^ 10
  5510+ 001464  E08D               	bz	l431
  5511+ 001466  0A07               	xorlw	12 ^ 11
  5512+ 001468  E0A4               	bz	l432
  5513+ 00146A  0A01               	xorlw	13 ^ 12
  5514+ 00146C  E0BB               	bz	l433
  5515+ 00146E  EF0B  F00A         	goto	l434
  5516+                          
  5517+                          	line	383
  5518+                          	
  5519+ 001472                     l418:		; BSR set to: ?
  5520+                          
  5521+                          	line	385
  5522+                          ;glcd.c: 385: glcdDrawBitmap((UINT8*)py, yW, yH)
      +                          ;
  5523+ 001472  C135  F13D         	movff	(glcdDrawImage@yH),0+(?_glcdDrawBitmap+03
      +                          h)
  5524+ 001476  C136  F13C         	movff	(glcdDrawImage@yW),0+(?_glcdDrawBitmap+02
      +                          h)
  5525+ 00147A  C137  F13A         	movff	(glcdDrawImage@py),(?_glcdDrawBitmap)
  5526+ 00147E  C138  F13B         	movff	(glcdDrawImage@py+1),(?_glcdDrawBitmap+1)
  5527+ 001482  EC33  F014         	call	_glcdDrawBitmap	;wreg free
  5528+                          	line	387
  5529+                          ;glcd.c: 387: }
  5530+ 001486                     l417:
  5531+                          			; BSR set to: ?
  5532+                          
  5533+ 001486  0012               	return
  5534+                          	opt stack 0
  5535+                          GLOBAL __end_of_glcdDrawImage
  5536+ 001488                     	__end_of_glcdDrawImage:
  5537+                          	FNSIZE	_glcdDrawImage,5,1
  5538+                          ; =============== function _glcdDrawImage ends =
      +                          ===========
  5539+                          
  5540+                          	signat	_glcdDrawImage,4216
  5541+                          	global	_rtc24to12Hour
  5542+                          	global	??_rtc24to12Hour
  5543+                          	global	?_rtc24to12Hour
  5544+                          
  5545+                          ; *************** function _rtc24to12Hour ******
      +                          ***********
  5546+                          ; Defined at:
  5547+                          ;		line 281 in file "rtc.c"
  5548+                          ; Parameters:
  5549+                          ;		yHour          size:   1offs:   0	type: unsig
      +                          ned char 
  5550+                          ;		pPM            size:   2offs:   1	type: PTR u
      +                          nsigned char ; Largest target is 1
  5551+                          ;		 -> DisplayTime@yPM(1), 
  5552+                          ; Auto variables:
  5553+                          ;		yHr         	       	type: unsigned char 
  5554+                          ;		yBin        	       	type: unsigned char 
  5555+                          ; Return value:
  5556+                          ;		type: unsigned char 
  5557+                          ;		size: 1
  5558+                          ; Registers used:
  5559+                          ;		wreg, fsr0l, fsr0h, status,2, status,0, prodl
      +                          , prodh, cstack
  5560+                          ; Tracked objects:
  5561+                          ;		On entry : 0/0
  5562+                          ;		On exit  : 0/0
  5563+                          ;		Unchanged: 0/0
  5564+                          ; Data sizes:
  5565+                          ;		Autos:    2
  5566+                          ;		Params:   3
  5567+                          ;		Temp:     1
  5568+                          ;		Total:    6
  5569+                          ; This function calls:
  5570+                          ;		_rtcBCDToDec
  5571+                          ;		_rtcDecToBCD
  5572+                          ; This function is called by:
  5573+                          ;		_DisplayTime
  5574+                          ; This function uses a non-reentrant model
  5575+                          ; 
  5576+                                  psect   text13,class=CODE,space=0,reloc=
      +                          2
  5577+                          
  5578+                          	opt lm
  5579+                          	file	"rtc.c"
  5580+                          	line	281
  5581+ 000000                     	__size_of_rtc24to12Hour	equ	__end_of_rtc24to12H
      +                          our-_rtc24to12Hour
  5582+                          ;rtc.c: 280: UINT8 rtc24to12Hour(UINT8 yHour, UI
      +                          NT8 *pPM)
  5583+                          ;rtc.c: 281: {
  5584+                          	
  5585+ 002E1C                     _rtc24to12Hour:		; BSR set to: ?
  5586+                          
  5587+                          	opt stack 28
  5588+                          	line	285
  5589+ 002E1C  C134  F143         	movff	(rtc24to12Hour@yHour),(?_rtcBCDToDec)
  5590+ 002E20  EC35  F01B         	call	_rtcBCDToDec	;wreg free
  5591+ 002E24  0101               	movlb	1	; () banked
  5592+ 002E26  0101               	movlb	1	; () banked
  5593+ 002E28  6F38               	movwf	((rtc24to12Hour@yBin))&0ffh
  5594+                          	line	287
  5595+                          ;rtc.c: 287: if(!yBin)
  5596+ 002E2A  0101               	movlb	1	; () banked
  5597+ 002E2C  0101               	movlb	1	; () banked
  5598+ 002E2E  6738               	tstfsz	((rtc24to12Hour@yBin))&0ffh
  5599+ 002E30  EF1C  F017         	goto	u4171
  5600+ 002E34  EF1E  F017         	goto	u4170
  5601+ 002E38                     u4171:
  5602+ 002E38  EF2E  F017         	goto	l867
  5603+ 002E3C                     u4170:
  5604+                          	line	289
  5605+                          ;rtc.c: 288: {
  5606+                          ;rtc.c: 289: yHr = 12;
  5607+ 002E3C  0101               	movlb	1	; () banked
  5608+ 002E3E  6F39               	movwf	(??_rtc24to12Hour+2+0)&0ffh
  5609+ 002E40  0E0C               	movlw	low(0Ch)
  5610+ 002E42  0101               	movlb	1	; () banked
  5611+ 002E44  0101               	movlb	1	; () banked
  5612+ 002E46  6F37               	movwf	((rtc24to12Hour@yHr))&0ffh
  5613+ 002E48  0101               	movlb	1	; () banked
  5614+ 002E4A  5139               	movf	(??_rtc24to12Hour+2+0)&0ffh,w
  5615+                          	line	290
  5616+                          ;rtc.c: 290: *pPM = 0;
  5617+ 002E4C  C135  FFE9         	movff	(rtc24to12Hour@pPM),fsr0l
  5618+ 002E50  C136  FFEA         	movff	(rtc24to12Hour@pPM+1),fsr0h
  5619+ 002E54  0E00               	movlw	low(0)
  5620+ 002E56  6EEF               	movwf	indf0
  5621+                          	line	291
  5622+                          ;rtc.c: 291: }
  5623+ 002E58  EF64  F017         	goto	l868
  5624+                          	line	294
  5625+                          	
  5626+ 002E5C                     l867:		; BSR set to: ?
  5627+                          
  5628+                          ;rtc.c: 294: else if(yBin < (UINT8)12)
  5629+ 002E5C  0E0C               	movlw	(0Ch)&0ffh
  5630+ 002E5E  0101               	movlb	1	; () banked
  5631+ 002E60  0101               	movlb	1	; () banked
  5632+ 002E62  6138               	cpfslt	((rtc24to12Hour@yBin))&0ffh
  5633+ 002E64  EF36  F017         	goto	u4181
  5634+ 002E68  EF38  F017         	goto	u4180
  5635+ 002E6C                     u4181:
  5636+ 002E6C  EF42  F017         	goto	l869
  5637+ 002E70                     u4180:
  5638+                          	line	296
  5639+                          ;rtc.c: 295: {
  5640+                          ;rtc.c: 296: yHr = yBin;
  5641+ 002E70  C138  F137         	movff	(rtc24to12Hour@yBin),(rtc24to12Hour@yHr)
  5642+                          	line	297
  5643+                          ;rtc.c: 297: *pPM = 0;
  5644+ 002E74  C135  FFE9         	movff	(rtc24to12Hour@pPM),fsr0l
  5645+ 002E78  C136  FFEA         	movff	(rtc24to12Hour@pPM+1),fsr0h
  5646+ 002E7C  0E00               	movlw	low(0)
  5647+ 002E7E  6EEF               	movwf	indf0
  5648+                          	line	298
  5649+                          ;rtc.c: 298: }
  5650+ 002E80  EF64  F017         	goto	l868
  5651+                          	line	301
  5652+                          	
  5653+ 002E84                     l869:		; BSR set to: ?
  5654+                          
  5655+                          ;rtc.c: 301: else if(yBin == 12)
  5656+ 002E84  0101               	movlb	1	; () banked
  5657+ 002E86  0101               	movlb	1	; () banked
  5658+ 002E88  5138               	movf	((rtc24to12Hour@yBin))&0ffh,w
  5659+ 002E8A  0A0C               	xorlw	12
  5660+                          
  5661+ 002E8C  A4D8               	btfss	status,2
  5662+ 002E8E  EF4B  F017         	goto	u4191
  5663+ 002E92  EF4D  F017         	goto	u4190
  5664+ 002E96                     u4191:
  5665+ 002E96  EF57  F017         	goto	l871
  5666+ 002E9A                     u4190:
  5667+                          	line	303
  5668+                          ;rtc.c: 302: {
  5669+                          ;rtc.c: 303: yHr = yBin;
  5670+ 002E9A  C138  F137         	movff	(rtc24to12Hour@yBin),(rtc24to12Hour@yHr)
  5671+                          	line	304
  5672+                          ;rtc.c: 304: *pPM = 1;
  5673+ 002E9E  C135  FFE9         	movff	(rtc24to12Hour@pPM),fsr0l
  5674+ 002EA2  C136  FFEA         	movff	(rtc24to12Hour@pPM+1),fsr0h
  5675+ 002EA6  0E01               	movlw	low(01h)
  5676+ 002EA8  6EEF               	movwf	indf0
  5677+                          	line	305
  5678+                          ;rtc.c: 305: }
  5679+ 002EAA  EF64  F017         	goto	l868
  5680+                          	line	308
  5681+                          	
  5682+ 002EAE                     l871:		; BSR set to: ?
  5683+                          
  5684+                          	line	310
  5685+                          ;rtc.c: 308: else
  5686+                          ;rtc.c: 309: {
  5687+                          ;rtc.c: 310: yHr = yBin - (UINT8)12;
  5688+ 002EAE  0101               	movlb	1	; () banked
  5689+ 002EB0  0101               	movlb	1	; () banked
  5690+ 002EB2  5138               	movf	((rtc24to12Hour@yBin))&0ffh,w
  5691+ 002EB4  0FF4               	addlw	low(0F4h)
  5692+ 002EB6  0101               	movlb	1	; () banked
  5693+ 002EB8  0101               	movlb	1	; () banked
  5694+ 002EBA  6F37               	movwf	((rtc24to12Hour@yHr))&0ffh
  5695+                          	line	311
  5696+                          ;rtc.c: 311: *pPM = 1;
  5697+ 002EBC  C135  FFE9         	movff	(rtc24to12Hour@pPM),fsr0l
  5698+ 002EC0  C136  FFEA         	movff	(rtc24to12Hour@pPM+1),fsr0h
  5699+ 002EC4  0E01               	movlw	low(01h)
  5700+ 002EC6  6EEF               	movwf	indf0
  5701+                          	line	312
  5702+                          	
  5703+ 002EC8                     l872:		; BSR set to: ?
  5704+                          
  5705+                          	
  5706+ 002EC8                     l870:		; BSR set to: ?
  5707+                          
  5708+                          	
  5709+ 002EC8                     l868:		; BSR set to: ?
  5710+                          
  5711+                          	line	314
  5712+                          ;rtc.c: 312: }
  5713+                          ;rtc.c: 314: return rtcDecToBCD(yHr);
  5714+ 002EC8  C137  F143         	movff	(rtc24to12Hour@yHr),(?_rtcDecToBCD)
  5715+ 002ECC  ECEB  F019         	call	_rtcDecToBCD	;wreg free
  5716+ 002ED0  EF6A  F017         	goto	l866
  5717+                          	line	316
  5718+                          ;rtc.c: 316: }
  5719+ 002ED4                     l866:
  5720+                          			; BSR set to: ?
  5721+                          
  5722+ 002ED4  0012               	return
  5723+                          	opt stack 0
  5724+                          GLOBAL __end_of_rtc24to12Hour
  5725+ 002ED6                     	__end_of_rtc24to12Hour:
  5726+                          	FNSIZE	_rtc24to12Hour,3,3
  5727+                          ; =============== function _rtc24to12Hour ends =
      +                          ===========
  5728+                          
  5729+                          	signat	_rtc24to12Hour,8313
  5730+                          	global	_MakeDateString
  5731+                          	global	??_MakeDateString
  5732+                          	global	?_MakeDateString
  5733+                          
  5734+                          ; *************** function _MakeDateString *****
      +                          ************
  5735+                          ; Defined at:
  5736+                          ;		line 302 in file "main.c"
  5737+                          ; Parameters:
  5738+                          ;		ptt            size:   2offs:   0	type: PTR s
      +                          truct _TIMESTRUCT; Largest target is 7
  5739+                          ;		 -> main@tt(7), 
  5740+                          ;		pszBuffer      size:   2offs:   2	type: PTR u
      +                          nsigned char ; Largest target is 32
  5741+                          ;		 -> DisplayTime@sz(32), 
  5742+                          ; Auto variables:
  5743+                          ;		yChar       	       	type: unsigned char 
  5744+                          ;		yPos        	       	type: unsigned char 
  5745+                          ;		wYear       	       	type: unsigned int 
  5746+                          ;		sz          	       	type: unsigned char [8]
  5747+                          ; Return value:
  5748+                          ;		type: void 
  5749+                          ;		size: 0
  5750+                          ; Registers used:
  5751+                          ;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, s
      +                          tatus,0, tblptrl, tblptrh, tblptru, tablat, prod
      +                          l, prodh, cstack
  5752+                          ; Tracked objects:
  5753+                          ;		On entry : 0/0
  5754+                          ;		On exit  : 0/0
  5755+                          ;		Unchanged: 0/0
  5756+                          ; Data sizes:
  5757+                          ;		Autos:   10
  5758+                          ;		Params:   4
  5759+                          ;		Temp:     1
  5760+                          ;		Total:   15
  5761+                          ; This function calls:
  5762+                          ;		_rtcBCDToDec
  5763+                          ;		___wmul
  5764+                          ;		_strcpy
  5765+                          ;		_strcat
  5766+                          ; This function is called by:
  5767+                          ;		_DisplayTime
  5768+                          ; This function uses a non-reentrant model
  5769+                          ; 
  5770+                                  psect   text14,class=CODE,space=0,reloc=
      +                          2
  5771+                          
  5772+                          	opt lm
  5773+                          	file	"main.c"
  5774+                          	line	302
  5775+ 000000                     	__size_of_MakeDateString	equ	__end_of_MakeDateS
      +                          tring-_MakeDateString
  5776+                          ;main.c: 301: void MakeDateString(TIMESTRUCT *pt
      +                          t, UINT8 *pszBuffer)
  5777+                          ;main.c: 302: {
  5778+                          	
  5779+ 001992                     _MakeDateString:		; BSR set to: ?
  5780+                          
  5781+                          	opt stack 28
  5782+                          	line	307
  5783+ 001992  0E04               	movlw	low(04h)
  5784+ 001994  0101               	movlb	1	; () banked
  5785+ 001996  0101               	movlb	1	; () banked
  5786+ 001998  2534               	addwf	((MakeDateString@ptt))&0ffh,w
  5787+ 00199A  6EE9               	movwf	c:fsr0l
  5788+ 00199C  0E00               	movlw	high(04h)
  5789+ 00199E  0101               	movlb	1	; () banked
  5790+ 0019A0  0101               	movlb	1	; () banked
  5791+ 0019A2  2135               	addwfc	((MakeDateString@ptt+1))&0ffh,w
  5792+ 0019A4  6EEA               	movwf	1+c:fsr0l
  5793+ 0019A6  50EF               	movf	indf0,w
  5794+ 0019A8  0101               	movlb	1	; () banked
  5795+ 0019AA  0101               	movlb	1	; () banked
  5796+ 0019AC  6F43               	movwf	((?_rtcBCDToDec))&0ffh
  5797+ 0019AE  EC35  F01B         	call	_rtcBCDToDec	;wreg free
  5798+ 0019B2  0101               	movlb	1	; () banked
  5799+ 0019B4  6F42               	movwf	(??_MakeDateString+10+0)&0ffh
  5800+ 0019B6  0101               	movlb	1	; () banked
  5801+ 0019B8  0542               	decf	((??_MakeDateString+10+0))&0ffh,w
  5802+ 0019BA  0D0A               	mullw	0Ah
  5803+ 0019BC  0E32               	movlw	low(_cszMonth)
  5804+ 0019BE  24F3               	addwf	(prodl),c,w
  5805+ 0019C0  0101               	movlb	1	; () banked
  5806+                          	
  5807+ 0019C2  0101               	movlb	1	; () banked
  5808+ 0019C4  6F45               	movwf	(0+(?_strcpy+02h))&0ffh
  5809+ 0019C6  0101               	movlb	1	; () banked
  5810+ 0019C8  6B46               	clrf	1+(0+(?_strcpy+02h))&0ffh
  5811+ 0019CA  0E3C               	movlw	high(_cszMonth)
  5812+ 0019CC  0101               	movlb	1	; () banked
  5813+ 0019CE  2346               	addwfc	1+(0+(?_strcpy+02h))&0ffh
  5814+ 0019D0  C136  F143         	movff	(MakeDateString@pszBuffer),(?_strcpy)
  5815+ 0019D4  C137  F144         	movff	(MakeDateString@pszBuffer+1),(?_strcpy+1)
  5816+ 0019D8  EC18  F01A         	call	_strcpy	;wreg free
  5817+                          	line	310
  5818+                          ;main.c: 310: yPos = 0;
  5819+ 0019DC  0101               	movlb	1	; () banked
  5820+ 0019DE  6F42               	movwf	(??_MakeDateString+10+0)&0ffh
  5821+ 0019E0  0E00               	movlw	low(0)
  5822+ 0019E2  0101               	movlb	1	; () banked
  5823+ 0019E4  0101               	movlb	1	; () banked
  5824+ 0019E6  6F39               	movwf	((MakeDateString@yPos))&0ffh
  5825+ 0019E8  0101               	movlb	1	; () banked
  5826+ 0019EA  5142               	movf	(??_MakeDateString+10+0)&0ffh,w
  5827+                          	line	311
  5828+ 0019EC  0101               	movlb	1	; () banked
  5829+ 0019EE  0E3A               	movlw	low(MakeDateString@sz)
  5830+ 0019F0  0101               	movlb	1	; () banked
  5831+ 0019F2  0101               	movlb	1	; () banked
  5832+ 0019F4  2539               	addwf	((MakeDateString@yPos))&0ffh,w
  5833+ 0019F6  6EE9               	movwf	c:fsr0l
  5834+ 0019F8  6AEA               	clrf	1+c:fsr0l
  5835+ 0019FA  0101               	movlb	1	; () banked
  5836+ 0019FC  0E01               	movlw	high(MakeDateString@sz)
  5837+ 0019FE  22EA               	addwfc	1+c:fsr0l
  5838+ 001A00  0E20               	movlw	low(020h)
  5839+ 001A02  6EEF               	movwf	indf0
  5840+                          ;main.c: 311: sz[yPos++] = ' ';
  5841+ 001A04  0101               	movlb	1	; () banked
  5842+ 001A06  0101               	movlb	1	; () banked
  5843+ 001A08  2B39               	incf	((MakeDateString@yPos))&0ffh
  5844+                          	line	312
  5845+                          ;main.c: 312: yChar = (ptt->date & 0xf0) >> 4;
  5846+ 001A0A  0E03               	movlw	low(03h)
  5847+ 001A0C  0101               	movlb	1	; () banked
  5848+ 001A0E  0101               	movlb	1	; () banked
  5849+ 001A10  2534               	addwf	((MakeDateString@ptt))&0ffh,w
  5850+ 001A12  6EE9               	movwf	c:fsr0l
  5851+ 001A14  0E00               	movlw	high(03h)
  5852+ 001A16  0101               	movlb	1	; () banked
  5853+ 001A18  0101               	movlb	1	; () banked
  5854+ 001A1A  2135               	addwfc	((MakeDateString@ptt+1))&0ffh,w
  5855+ 001A1C  6EEA               	movwf	1+c:fsr0l
  5856+ 001A1E  50EF               	movf	indf0,w
  5857+ 001A20  0101               	movlb	1	; () banked
  5858+ 001A22  6F42               	movwf	(??_MakeDateString+10+0)&0ffh
  5859+ 001A24  0EF0               	movlw	0F0h
  5860+ 001A26  0101               	movlb	1	; () banked
  5861+ 001A28  1742               	andwf	((??_MakeDateString+10+0))&0ffh
  5862+ 001A2A  0101               	movlb	1	; () banked
  5863+ 001A2C  3942               	swapf	((??_MakeDateString+10+0))&0ffh,w
  5864+ 001A2E  0B0F               	andlw	(0ffh shr 4) & 0ffh
  5865+ 001A30  0101               	movlb	1	; () banked
  5866+ 001A32  0101               	movlb	1	; () banked
  5867+ 001A34  6F38               	movwf	((MakeDateString@yChar))&0ffh
  5868+                          	line	313
  5869+                          ;main.c: 313: if(yChar)
  5870+ 001A36  0101               	movlb	1	; () banked
  5871+ 001A38  0101               	movlb	1	; () banked
  5872+ 001A3A  5138               	movf	((MakeDateString@yChar))&0ffh,w
  5873+ 001A3C  B4D8               	btfsc	status,2
  5874+ 001A3E  EF23  F00D         	goto	u4201
  5875+ 001A42  EF25  F00D         	goto	u4200
  5876+ 001A46                     u4201:
  5877+ 001A46  EF37  F00D         	goto	l636
  5878+ 001A4A                     u4200:
  5879+                          	line	314
  5880+ 001A4A  0101               	movlb	1	; () banked
  5881+ 001A4C  0E3A               	movlw	low(MakeDateString@sz)
  5882+ 001A4E  0101               	movlb	1	; () banked
  5883+ 001A50  0101               	movlb	1	; () banked
  5884+ 001A52  2539               	addwf	((MakeDateString@yPos))&0ffh,w
  5885+ 001A54  6EE9               	movwf	c:fsr0l
  5886+ 001A56  6AEA               	clrf	1+c:fsr0l
  5887+ 001A58  0101               	movlb	1	; () banked
  5888+ 001A5A  0E01               	movlw	high(MakeDateString@sz)
  5889+ 001A5C  22EA               	addwfc	1+c:fsr0l
  5890+ 001A5E  0101               	movlb	1	; () banked
  5891+ 001A60  0101               	movlb	1	; () banked
  5892+ 001A62  5138               	movf	((MakeDateString@yChar))&0ffh,w
  5893+ 001A64  0930               	iorlw	low(030h)
  5894+ 001A66  6EEF               	movwf	indf0
  5895+                          
  5896+                          ;main.c: 314: sz[yPos++] = yChar | 0x30;
  5897+ 001A68  0101               	movlb	1	; () banked
  5898+ 001A6A  0101               	movlb	1	; () banked
  5899+ 001A6C  2B39               	incf	((MakeDateString@yPos))&0ffh
  5900+                          	
  5901+ 001A6E                     l636:		; BSR set to: ?
  5902+                          
  5903+                          	line	316
  5904+ 001A6E  0101               	movlb	1	; () banked
  5905+ 001A70  0E3A               	movlw	low(MakeDateString@sz)
  5906+ 001A72  0101               	movlb	1	; () banked
  5907+ 001A74  0101               	movlb	1	; () banked
  5908+ 001A76  2539               	addwf	((MakeDateString@yPos))&0ffh,w
  5909+ 001A78  6EE9               	movwf	c:fsr0l
  5910+ 001A7A  6AEA               	clrf	1+c:fsr0l
  5911+ 001A7C  0101               	movlb	1	; () banked
  5912+ 001A7E  0E01               	movlw	high(MakeDateString@sz)
  5913+ 001A80  22EA               	addwfc	1+c:fsr0l
  5914+ 001A82  0E03               	movlw	low(03h)
  5915+ 001A84  0101               	movlb	1	; () banked
  5916+ 001A86  0101               	movlb	1	; () banked
  5917+ 001A88  2534               	addwf	((MakeDateString@ptt))&0ffh,w
  5918+ 001A8A  6EE1               	movwf	c:fsr1l
  5919+ 001A8C  0E00               	movlw	high(03h)
  5920+ 001A8E  0101               	movlb	1	; () banked
  5921+ 001A90  0101               	movlb	1	; () banked
  5922+ 001A92  2135               	addwfc	((MakeDateString@ptt+1))&0ffh,w
  5923+ 001A94  6EE2               	movwf	1+c:fsr1l
  5924+ 001A96  50E7               	movf	indf1,w
  5925+ 001A98  0B0F               	andlw	low(0Fh)
  5926+ 001A9A  0930               	iorlw	low(030h)
  5927+ 001A9C  6EEF               	movwf	indf0
  5928+                          
  5929+                          ;main.c: 316: sz[yPos++] = (ptt->date & 0x0f) | 
      +                          0x30;
  5930+ 001A9E  0101               	movlb	1	; () banked
  5931+ 001AA0  0101               	movlb	1	; () banked
  5932+ 001AA2  2B39               	incf	((MakeDateString@yPos))&0ffh
  5933+                          	line	317
  5934+ 001AA4  0101               	movlb	1	; () banked
  5935+ 001AA6  0E3A               	movlw	low(MakeDateString@sz)
  5936+ 001AA8  0101               	movlb	1	; () banked
  5937+ 001AAA  0101               	movlb	1	; () banked
  5938+ 001AAC  2539               	addwf	((MakeDateString@yPos))&0ffh,w
  5939+ 001AAE  6EE9               	movwf	c:fsr0l
  5940+ 001AB0  6AEA               	clrf	1+c:fsr0l
  5941+ 001AB2  0101               	movlb	1	; () banked
  5942+ 001AB4  0E01               	movlw	high(MakeDateString@sz)
  5943+ 001AB6  22EA               	addwfc	1+c:fsr0l
  5944+ 001AB8  0E2C               	movlw	low(02Ch)
  5945+ 001ABA  6EEF               	movwf	indf0
  5946+                          ;main.c: 317: sz[yPos++] = ',';
  5947+ 001ABC  0101               	movlb	1	; () banked
  5948+ 001ABE  0101               	movlb	1	; () banked
  5949+ 001AC0  2B39               	incf	((MakeDateString@yPos))&0ffh
  5950+                          	line	318
  5951+ 001AC2  0101               	movlb	1	; () banked
  5952+ 001AC4  0E3A               	movlw	low(MakeDateString@sz)
  5953+ 001AC6  0101               	movlb	1	; () banked
  5954+ 001AC8  0101               	movlb	1	; () banked
  5955+ 001ACA  2539               	addwf	((MakeDateString@yPos))&0ffh,w
  5956+ 001ACC  6EE9               	movwf	c:fsr0l
  5957+ 001ACE  6AEA               	clrf	1+c:fsr0l
  5958+ 001AD0  0101               	movlb	1	; () banked
  5959+ 001AD2  0E01               	movlw	high(MakeDateString@sz)
  5960+ 001AD4  22EA               	addwfc	1+c:fsr0l
  5961+ 001AD6  0E20               	movlw	low(020h)
  5962+ 001AD8  6EEF               	movwf	indf0
  5963+                          ;main.c: 318: sz[yPos++] = ' ';
  5964+ 001ADA  0101               	movlb	1	; () banked
  5965+ 001ADC  0101               	movlb	1	; () banked
  5966+ 001ADE  2B39               	incf	((MakeDateString@yPos))&0ffh
  5967+                          	line	319
  5968+                          ;main.c: 319: sz[yPos] = '\0';
  5969+ 001AE0  0101               	movlb	1	; () banked
  5970+ 001AE2  0E3A               	movlw	low(MakeDateString@sz)
  5971+ 001AE4  0101               	movlb	1	; () banked
  5972+ 001AE6  0101               	movlb	1	; () banked
  5973+ 001AE8  2539               	addwf	((MakeDateString@yPos))&0ffh,w
  5974+ 001AEA  6EE9               	movwf	c:fsr0l
  5975+ 001AEC  6AEA               	clrf	1+c:fsr0l
  5976+ 001AEE  0101               	movlb	1	; () banked
  5977+ 001AF0  0E01               	movlw	high(MakeDateString@sz)
  5978+ 001AF2  22EA               	addwfc	1+c:fsr0l
  5979+ 001AF4  0E00               	movlw	low(0)
  5980+ 001AF6  6EEF               	movwf	indf0
  5981+                          	line	320
  5982+                          ;main.c: 320: strcat(pszBuffer, sz);
  5983+ 001AF8  0101               	movlb	1	; () banked
  5984+ 001AFA  0E3A               	movlw	low(MakeDateString@sz)
  5985+ 001AFC  0101               	movlb	1	; () banked
  5986+ 001AFE  0101               	movlb	1	; () banked
  5987+ 001B00  6F45               	movwf	(0+(?_strcat+02h))&0ffh
  5988+ 001B02  0101               	movlb	1	; () banked
  5989+ 001B04  0E01               	movlw	high(MakeDateString@sz)
  5990+ 001B06  0101               	movlb	1	; () banked
  5991+ 001B08  6F46               	movwf	(1+(?_strcat+02h))&0ffh
  5992+ 001B0A  C136  F143         	movff	(MakeDateString@pszBuffer),(?_strcat)
  5993+ 001B0E  C137  F144         	movff	(MakeDateString@pszBuffer+1),(?_strcat+1)
  5994+ 001B12  ECE3  F018         	call	_strcat	;wreg free
  5995+                          	line	323
  5996+                          ;main.c: 323: sz[0] = '2';
  5997+ 001B16  0101               	movlb	1	; () banked
  5998+ 001B18  6F42               	movwf	(??_MakeDateString+10+0)&0ffh
  5999+ 001B1A  0E32               	movlw	low(032h)
  6000+ 001B1C  0101               	movlb	1	; () banked
  6001+ 001B1E  0101               	movlb	1	; () banked
  6002+ 001B20  6F3A               	movwf	((MakeDateString@sz))&0ffh
  6003+ 001B22  0101               	movlb	1	; () banked
  6004+ 001B24  5142               	movf	(??_MakeDateString+10+0)&0ffh,w
  6005+                          	line	324
  6006+                          ;main.c: 324: sz[1] = '0';
  6007+ 001B26  0101               	movlb	1	; () banked
  6008+ 001B28  6F42               	movwf	(??_MakeDateString+10+0)&0ffh
  6009+ 001B2A  0E30               	movlw	low(030h)
  6010+ 001B2C  0101               	movlb	1	; () banked
  6011+ 001B2E  0101               	movlb	1	; () banked
  6012+ 001B30  6F3B               	movwf	(0+(MakeDateString@sz+01h))&0ffh
  6013+ 001B32  0101               	movlb	1	; () banked
  6014+ 001B34  5142               	movf	(??_MakeDateString+10+0)&0ffh,w
  6015+                          	line	325
  6016+                          ;main.c: 325: sz[2] = ((ptt->year & 0xf0) >> 4) 
      +                          | 0x30;
  6017+ 001B36  0E06               	movlw	low(06h)
  6018+ 001B38  0101               	movlb	1	; () banked
  6019+ 001B3A  0101               	movlb	1	; () banked
  6020+ 001B3C  2534               	addwf	((MakeDateString@ptt))&0ffh,w
  6021+ 001B3E  6EE9               	movwf	c:fsr0l
  6022+ 001B40  0E00               	movlw	high(06h)
  6023+ 001B42  0101               	movlb	1	; () banked
  6024+ 001B44  0101               	movlb	1	; () banked
  6025+ 001B46  2135               	addwfc	((MakeDateString@ptt+1))&0ffh,w
  6026+ 001B48  6EEA               	movwf	1+c:fsr0l
  6027+ 001B4A  50EF               	movf	indf0,w
  6028+ 001B4C  0101               	movlb	1	; () banked
  6029+ 001B4E  6F42               	movwf	(??_MakeDateString+10+0)&0ffh
  6030+ 001B50  0EF0               	movlw	0F0h
  6031+ 001B52  0101               	movlb	1	; () banked
  6032+ 001B54  1742               	andwf	((??_MakeDateString+10+0))&0ffh
  6033+ 001B56  0101               	movlb	1	; () banked
  6034+ 001B58  3942               	swapf	((??_MakeDateString+10+0))&0ffh,w
  6035+ 001B5A  0B0F               	andlw	(0ffh shr 4) & 0ffh
  6036+ 001B5C  0930               	iorlw	low(030h)
  6037+ 001B5E  0101               	movlb	1	; () banked
  6038+ 001B60  0101               	movlb	1	; () banked
  6039+ 001B62  6F3C               	movwf	(0+(MakeDateString@sz+02h))&0ffh
  6040+                          	line	326
  6041+                          ;main.c: 326: sz[3] = (ptt->year & 0x0f) | 0x30;
  6042+ 001B64  0E06               	movlw	low(06h)
  6043+ 001B66  0101               	movlb	1	; () banked
  6044+ 001B68  0101               	movlb	1	; () banked
  6045+ 001B6A  2534               	addwf	((MakeDateString@ptt))&0ffh,w
  6046+ 001B6C  6EE9               	movwf	c:fsr0l
  6047+ 001B6E  0E00               	movlw	high(06h)
  6048+ 001B70  0101               	movlb	1	; () banked
  6049+ 001B72  0101               	movlb	1	; () banked
  6050+ 001B74  2135               	addwfc	((MakeDateString@ptt+1))&0ffh,w
  6051+ 001B76  6EEA               	movwf	1+c:fsr0l
  6052+ 001B78  50EF               	movf	indf0,w
  6053+ 001B7A  0B0F               	andlw	low(0Fh)
  6054+ 001B7C  0930               	iorlw	low(030h)
  6055+ 001B7E  0101               	movlb	1	; () banked
  6056+ 001B80  0101               	movlb	1	; () banked
  6057+ 001B82  6F3D               	movwf	(0+(MakeDateString@sz+03h))&0ffh
  6058+                          	line	327
  6059+                          ;main.c: 327: sz[4] = ' ';
  6060+ 001B84  0101               	movlb	1	; () banked
  6061+ 001B86  6F42               	movwf	(??_MakeDateString+10+0)&0ffh
  6062+ 001B88  0E20               	movlw	low(020h)
  6063+ 001B8A  0101               	movlb	1	; () banked
  6064+ 001B8C  0101               	movlb	1	; () banked
  6065+ 001B8E  6F3E               	movwf	(0+(MakeDateString@sz+04h))&0ffh
  6066+ 001B90  0101               	movlb	1	; () banked
  6067+ 001B92  5142               	movf	(??_MakeDateString+10+0)&0ffh,w
  6068+                          	line	328
  6069+                          ;main.c: 328: sz[5] = '\0';
  6070+ 001B94  0101               	movlb	1	; () banked
  6071+ 001B96  6F42               	movwf	(??_MakeDateString+10+0)&0ffh
  6072+ 001B98  0E00               	movlw	low(0)
  6073+ 001B9A  0101               	movlb	1	; () banked
  6074+ 001B9C  0101               	movlb	1	; () banked
  6075+ 001B9E  6F3F               	movwf	(0+(MakeDateString@sz+05h))&0ffh
  6076+ 001BA0  0101               	movlb	1	; () banked
  6077+ 001BA2  5142               	movf	(??_MakeDateString+10+0)&0ffh,w
  6078+                          	line	330
  6079+                          ;main.c: 330: strcat(pszBuffer, sz);
  6080+ 001BA4  0101               	movlb	1	; () banked
  6081+ 001BA6  0E3A               	movlw	low(MakeDateString@sz)
  6082+ 001BA8  0101               	movlb	1	; () banked
  6083+ 001BAA  0101               	movlb	1	; () banked
  6084+ 001BAC  6F45               	movwf	(0+(?_strcat+02h))&0ffh
  6085+ 001BAE  0101               	movlb	1	; () banked
  6086+ 001BB0  0E01               	movlw	high(MakeDateString@sz)
  6087+ 001BB2  0101               	movlb	1	; () banked
  6088+ 001BB4  6F46               	movwf	(1+(?_strcat+02h))&0ffh
  6089+ 001BB6  C136  F143         	movff	(MakeDateString@pszBuffer),(?_strcat)
  6090+ 001BBA  C137  F144         	movff	(MakeDateString@pszBuffer+1),(?_strcat+1)
  6091+ 001BBE  ECE3  F018         	call	_strcat	;wreg free
  6092+                          	line	332
  6093+                          ;main.c: 332: }
  6094+ 001BC2                     l635:
  6095+                          			; BSR set to: ?
  6096+                          
  6097+ 001BC2  0012               	return
  6098+                          	opt stack 0
  6099+                          GLOBAL __end_of_MakeDateString
  6100+ 001BC4                     	__end_of_MakeDateString:
  6101+                          	FNSIZE	_MakeDateString,11,4
  6102+                          ; =============== function _MakeDateString ends 
      +                          ============
  6103+                          
  6104+                          	signat	_MakeDateString,8312
  6105+                          	global	_wwvMakeTimeStruct
  6106+                          	global	??_wwvMakeTimeStruct
  6107+                          	global	?_wwvMakeTimeStruct
  6108+                          
  6109+                          ; *************** function _wwvMakeTimeStruct **
      +                          ***************
  6110+                          ; Defined at:
  6111+                          ;		line 355 in file "wwv.c"
  6112+                          ; Parameters:
  6113+                          ;		pt             size:   2offs:   0	type: PTR s
      +                          truct _TIMESTRUCT; Largest target is 7
  6114+                          ;		 -> main@tt(7), 
  6115+                          ;		yMin           size:   1offs:   2	type: unsig
      +                          ned char 
  6116+                          ;		yHour          size:   1offs:   3	type: unsig
      +                          ned char 
  6117+                          ;		wDays          size:   2offs:   4	type: unsig
      +                          ned int 
  6118+                          ;		yYears         size:   1offs:   6	type: unsig
      +                          ned char 
  6119+                          ;		yLeap          size:   1offs:   7	type: unsig
      +                          ned char 
  6120+                          ;		yDST           size:   1offs:   8	type: unsig
      +                          ned char 
  6121+                          ;		yTZ            size:   1offs:   9	type: unsig
      +                          ned char 
  6122+                          ; Auto variables:
  6123+                          ;		wDD         	       	type: unsigned int 
  6124+                          ;		nEndMonth   	       	type: unsigned int 
  6125+                          ;		lTime       	       	type: long 
  6126+                          ; Return value:
  6127+                          ;		type: void 
  6128+                          ;		size: 0
  6129+                          ; Registers used:
  6130+                          ;		wreg, fsr0l, fsr0h, status,2, status,0, tblpt
      +                          rl, tblptrh, tblptru, tablat, prodl, prodh, csta
      +                          ck
  6131+                          ; Tracked objects:
  6132+                          ;		On entry : 0/0
  6133+                          ;		On exit  : 0/0
  6134+                          ;		Unchanged: 0/0
  6135+                          ; Data sizes:
  6136+                          ;		Autos:    4
  6137+                          ;		Params:  10
  6138+                          ;		Temp:     5
  6139+                          ;		Total:   19
  6140+                          ; This function calls:
  6141+                          ;		___awmod
  6142+                          ;		_rtcDecToBCD
  6143+                          ;		_wwvGetWeekDay
  6144+                          ; This function is called by:
  6145+                          ;		_wwvGetTime
  6146+                          ; This function uses a non-reentrant model
  6147+                          ; 
  6148+                                  psect   text15,class=CODE,space=0,reloc=
      +                          2
  6149+                          
  6150+                          	opt lm
  6151+                          	file	"wwv.c"
  6152+                          	line	355
  6153+ 000000                     	__size_of_wwvMakeTimeStruct	equ	__end_of_wwvMak
      +                          eTimeStruct-_wwvMakeTimeStruct
  6154+                          ;wwv.c: 353: static void wwvMakeTimeStruct(TIMES
      +                          TRUCT *pt, UINT8 yMin, UINT8 yHour,
  6155+                          ;wwv.c: 354: UINT16 wDays, UINT8 yYears, UINT8 y
      +                          Leap, UINT8 yDST, UINT8 yTZ)
  6156+                          ;wwv.c: 355: {
  6157+                          	
  6158+ 000DD6                     _wwvMakeTimeStruct:		; BSR set to: ?
  6159+                          
  6160+                          	opt stack 28
  6161+                          	line	361
  6162+ 000DD6  0101               	movlb	1	; () banked
  6163+ 000DD8  0101               	movlb	1	; () banked
  6164+ 000DDA  5138               	movf	((wwvMakeTimeStruct@yDST))&0ffh,w
  6165+ 000DDC  0101               	movlb	1	; () banked
  6166+ 000DDE  C139  F13E         	movff	(wwvMakeTimeStruct@yTZ),??_wwvMakeTimeStr
      +                          uct+4+0
  6167+ 000DE2  0101               	movlb	1	; () banked
  6168+ 000DE4  6B3F               	clrf	(??_wwvMakeTimeStruct+4+0+1)&0ffh
  6169+ 000DE6  0101               	movlb	1	; () banked
  6170+ 000DE8  5F3E               	subwf	(??_wwvMakeTimeStruct+4+0)&0ffh
  6171+ 000DEA  0E00               	movlw	0
  6172+ 000DEC  5B3F               	subwfb	(??_wwvMakeTimeStruct+4+1)&0ffh
  6173+ 000DEE  0101               	movlb	1	; () banked
  6174+ 000DF0  C133  F140         	movff	(wwvMakeTimeStruct@yHour),??_wwvMakeTimeS
      +                          truct+6+0
  6175+ 000DF4  0101               	movlb	1	; () banked
  6176+ 000DF6  6B41               	clrf	(??_wwvMakeTimeStruct+6+0+1)&0ffh
  6177+ 000DF8  0101               	movlb	1	; () banked
  6178+ 000DFA  5141               	movf	(??_wwvMakeTimeStruct+6+1)&0ffh,w
  6179+ 000DFC  0A80               	xorlw	80h
  6180+ 000DFE  0101               	movlb	1	; () banked
  6181+ 000E00  6F42               	movwf	(??_wwvMakeTimeStruct+8+0)&0ffh
  6182+ 000E02  0101               	movlb	1	; () banked
  6183+ 000E04  513E               	movf	(??_wwvMakeTimeStruct+4+0)&0ffh,w
  6184+ 000E06  0101               	movlb	1	; () banked
  6185+ 000E08  5D40               	subwf	(??_wwvMakeTimeStruct+6+0)&0ffh,w
  6186+ 000E0A  0101               	movlb	1	; () banked
  6187+ 000E0C  513F               	movf	(??_wwvMakeTimeStruct+4+1)&0ffh,w
  6188+ 000E0E  0A80               	xorlw	80h
  6189+ 000E10  0101               	movlb	1	; () banked
  6190+ 000E12  5942               	subwfb	(??_wwvMakeTimeStruct+8+0)&0ffh,w
  6191+ 000E14  B0D8               	btfsc	status,0
  6192+ 000E16  EF0F  F007         	goto	u4211
  6193+ 000E1A  EF11  F007         	goto	u4210
  6194+ 000E1E                     u4211:
  6195+ 000E1E  EF67  F007         	goto	l1292
  6196+ 000E22                     u4210:
  6197+                          	line	364
  6198+                          ;wwv.c: 362: {
  6199+                          ;wwv.c: 364: yHour = ((yHour + yDST + 24) - yTZ)
      +                           % 24;
  6200+ 000E22  0E18               	movlw	low(018h)
  6201+ 000E24  0101               	movlb	1	; () banked
  6202+ 000E26  0101               	movlb	1	; () banked
  6203+ 000E28  6F55               	movwf	(0+(?___awmod+02h))&0ffh
  6204+ 000E2A  0E00               	movlw	high(018h)
  6205+ 000E2C  0101               	movlb	1	; () banked
  6206+ 000E2E  6F56               	movwf	(1+(?___awmod+02h))&0ffh
  6207+ 000E30  0101               	movlb	1	; () banked
  6208+ 000E32  0101               	movlb	1	; () banked
  6209+ 000E34  5138               	movf	((wwvMakeTimeStruct@yDST))&0ffh,w
  6210+ 000E36  0101               	movlb	1	; () banked
  6211+ 000E38  C133  F13E         	movff	(wwvMakeTimeStruct@yHour),??_wwvMakeTimeS
      +                          truct+4+0
  6212+ 000E3C  0101               	movlb	1	; () banked
  6213+ 000E3E  6B3F               	clrf	(??_wwvMakeTimeStruct+4+0+1)&0ffh
  6214+ 000E40  0101               	movlb	1	; () banked
  6215+ 000E42  273E               	addwf	(??_wwvMakeTimeStruct+4+0)&0ffh
  6216+ 000E44  0E00               	movlw	0
  6217+ 000E46  233F               	addwfc	(??_wwvMakeTimeStruct+4+1)&0ffh
  6218+ 000E48  0E18               	movlw	018h
  6219+ 000E4A  0101               	movlb	1	; () banked
  6220+ 000E4C  273E               	addwf	(??_wwvMakeTimeStruct+4+0)&0ffh
  6221+ 000E4E  0E00               	movlw	0
  6222+ 000E50  233F               	addwfc	(??_wwvMakeTimeStruct+4+1)&0ffh
  6223+ 000E52  0101               	movlb	1	; () banked
  6224+ 000E54  0101               	movlb	1	; () banked
  6225+ 000E56  5139               	movf	((wwvMakeTimeStruct@yTZ))&0ffh,w
  6226+ 000E58  0101               	movlb	1	; () banked
  6227+ 000E5A  5D3E               	subwf	(??_wwvMakeTimeStruct+4+0)&0ffh,w
  6228+ 000E5C  0101               	movlb	1	; () banked
  6229+                          	
  6230+ 000E5E  0101               	movlb	1	; () banked
  6231+ 000E60  6F53               	movwf	((?___awmod))&0ffh
  6232+ 000E62  0101               	movlb	1	; () banked
  6233+ 000E64  513F               	movf	(??_wwvMakeTimeStruct+4+1)&0ffh,w
  6234+ 000E66  A0D8               	btfss	status,0
  6235+ 000E68  053F               	decf	(??_wwvMakeTimeStruct+4+1)&0ffh,w
  6236+ 000E6A  0101               	movlb	1	; () banked
  6237+ 000E6C  6F54               	movwf	1+((?___awmod))&0ffh
  6238+ 000E6E  EC9A  F013         	call	___awmod	;wreg free
  6239+ 000E72  0101               	movlb	1	; () banked
  6240+ 000E74  0101               	movlb	1	; () banked
  6241+ 000E76  5153               	movf	(0+?___awmod)&0ffh,w
  6242+ 000E78  0101               	movlb	1	; () banked
  6243+ 000E7A  0101               	movlb	1	; () banked
  6244+ 000E7C  6F33               	movwf	((wwvMakeTimeStruct@yHour))&0ffh
  6245+                          	line	365
  6246+                          ;wwv.c: 365: if(wDays == 1)
  6247+ 000E7E  0101               	movlb	1	; () banked
  6248+ 000E80  0101               	movlb	1	; () banked
  6249+ 000E82  0534               	decf	((wwvMakeTimeStruct@wDays))&0ffh,w
  6250+ 000E84  1135               	iorwf ((wwvMakeTimeStruct@wDays+1))&0ffh,w
  6251+                          
  6252+ 000E86  A4D8               	btfss	status,2
  6253+ 000E88  EF48  F007         	goto	u4221
  6254+ 000E8C  EF4A  F007         	goto	u4220
  6255+ 000E90                     u4221:
  6256+ 000E90  EF60  F007         	goto	l1293
  6257+ 000E94                     u4220:
  6258+                          	line	368
  6259+                          ;wwv.c: 366: {
  6260+                          ;wwv.c: 368: wDays = 366;
  6261+ 000E94  0E6E               	movlw	low(016Eh)
  6262+ 000E96  0101               	movlb	1	; () banked
  6263+ 000E98  0101               	movlb	1	; () banked
  6264+ 000E9A  6F34               	movwf	((wwvMakeTimeStruct@wDays))&0ffh
  6265+ 000E9C  0E01               	movlw	high(016Eh)
  6266+ 000E9E  0101               	movlb	1	; () banked
  6267+ 000EA0  6F35               	movwf	((wwvMakeTimeStruct@wDays+1))&0ffh
  6268+                          	line	369
  6269+                          ;wwv.c: 369: if(yYears) yYears--;
  6270+ 000EA2  0101               	movlb	1	; () banked
  6271+ 000EA4  0101               	movlb	1	; () banked
  6272+ 000EA6  5136               	movf	((wwvMakeTimeStruct@yYears))&0ffh,w
  6273+ 000EA8  B4D8               	btfsc	status,2
  6274+ 000EAA  EF59  F007         	goto	u4231
  6275+ 000EAE  EF5B  F007         	goto	u4230
  6276+ 000EB2                     u4231:
  6277+ 000EB2  EF5E  F007         	goto	l1294
  6278+ 000EB6                     u4230:
  6279+ 000EB6  0101               	movlb	1	; () banked
  6280+ 000EB8  0101               	movlb	1	; () banked
  6281+ 000EBA  0736               	decf	((wwvMakeTimeStruct@yYears))&0ffh
  6282+                          	
  6283+ 000EBC                     l1294:		; BSR set to: ?
  6284+                          
  6285+                          	line	370
  6286+                          ;wwv.c: 370: }
  6287+ 000EBC  EF65  F007         	goto	l1295
  6288+                          	line	371
  6289+                          	
  6290+ 000EC0                     l1293:		; BSR set to: ?
  6291+                          
  6292+                          	line	372
  6293+                          ;wwv.c: 371: else
  6294+                          ;wwv.c: 372: wDays--;
  6295+ 000EC0  0101               	movlb	1	; () banked
  6296+ 000EC2  0101               	movlb	1	; () banked
  6297+ 000EC4  0734               	decf	((wwvMakeTimeStruct@wDays))&0ffh
  6298+ 000EC6  A0D8               	btfss	status,0
  6299+ 000EC8  0735               	decf	((wwvMakeTimeStruct@wDays+1))&0ffh
  6300+                          	
  6301+ 000ECA                     l1295:		; BSR set to: ?
  6302+                          
  6303+                          	line	373
  6304+                          ;wwv.c: 373: }
  6305+ 000ECA  EF70  F007         	goto	l1296
  6306+                          	line	374
  6307+                          	
  6308+ 000ECE                     l1292:		; BSR set to: ?
  6309+                          
  6310+                          	line	375
  6311+                          ;wwv.c: 374: else
  6312+                          ;wwv.c: 375: yHour -= (yTZ - yDST);
  6313+ 000ECE  0101               	movlb	1	; () banked
  6314+ 000ED0  0101               	movlb	1	; () banked
  6315+ 000ED2  5138               	movf	((wwvMakeTimeStruct@yDST))&0ffh,w
  6316+ 000ED4  0101               	movlb	1	; () banked
  6317+ 000ED6  0101               	movlb	1	; () banked
  6318+ 000ED8  5D39               	subwf	((wwvMakeTimeStruct@yTZ))&0ffh,w
  6319+ 000EDA  0101               	movlb	1	; () banked
  6320+ 000EDC  0101               	movlb	1	; () banked
  6321+ 000EDE  5F33               	subwf	((wwvMakeTimeStruct@yHour))&0ffh
  6322+                          	
  6323+ 000EE0                     l1296:		; BSR set to: ?
  6324+                          
  6325+                          	line	379
  6326+                          ;wwv.c: 379: if(yMin == 59)
  6327+ 000EE0  0101               	movlb	1	; () banked
  6328+ 000EE2  0101               	movlb	1	; () banked
  6329+ 000EE4  5132               	movf	((wwvMakeTimeStruct@yMin))&0ffh,w
  6330+ 000EE6  0A3B               	xorlw	59
  6331+                          
  6332+ 000EE8  A4D8               	btfss	status,2
  6333+ 000EEA  EF79  F007         	goto	u4241
  6334+ 000EEE  EF7B  F007         	goto	u4240
  6335+ 000EF2                     u4241:
  6336+ 000EF2  EFBA  F007         	goto	l1297
  6337+ 000EF6                     u4240:
  6338+                          	line	381
  6339+                          ;wwv.c: 380: {
  6340+                          ;wwv.c: 381: yMin = 0;
  6341+ 000EF6  0101               	movlb	1	; () banked
  6342+ 000EF8  6F3E               	movwf	(??_wwvMakeTimeStruct+4+0)&0ffh
  6343+ 000EFA  0E00               	movlw	low(0)
  6344+ 000EFC  0101               	movlb	1	; () banked
  6345+ 000EFE  0101               	movlb	1	; () banked
  6346+ 000F00  6F32               	movwf	((wwvMakeTimeStruct@yMin))&0ffh
  6347+ 000F02  0101               	movlb	1	; () banked
  6348+ 000F04  513E               	movf	(??_wwvMakeTimeStruct+4+0)&0ffh,w
  6349+                          	line	382
  6350+                          ;wwv.c: 382: if(yHour == 23)
  6351+ 000F06  0101               	movlb	1	; () banked
  6352+ 000F08  0101               	movlb	1	; () banked
  6353+ 000F0A  5133               	movf	((wwvMakeTimeStruct@yHour))&0ffh,w
  6354+ 000F0C  0A17               	xorlw	23
  6355+                          
  6356+ 000F0E  A4D8               	btfss	status,2
  6357+ 000F10  EF8C  F007         	goto	u4251
  6358+ 000F14  EF8E  F007         	goto	u4250
  6359+ 000F18                     u4251:
  6360+ 000F18  EFB5  F007         	goto	l1298
  6361+ 000F1C                     u4250:
  6362+                          	line	384
  6363+                          ;wwv.c: 383: {
  6364+                          ;wwv.c: 384: yHour = 0;
  6365+ 000F1C  0101               	movlb	1	; () banked
  6366+ 000F1E  6F3E               	movwf	(??_wwvMakeTimeStruct+4+0)&0ffh
  6367+ 000F20  0E00               	movlw	low(0)
  6368+ 000F22  0101               	movlb	1	; () banked
  6369+ 000F24  0101               	movlb	1	; () banked
  6370+ 000F26  6F33               	movwf	((wwvMakeTimeStruct@yHour))&0ffh
  6371+ 000F28  0101               	movlb	1	; () banked
  6372+ 000F2A  513E               	movf	(??_wwvMakeTimeStruct+4+0)&0ffh,w
  6373+                          	line	385
  6374+                          ;wwv.c: 385: if(wDays == 366)
  6375+ 000F2C  0101               	movlb	1	; () banked
  6376+ 000F2E  0101               	movlb	1	; () banked
  6377+ 000F30  0535               	decf	((wwvMakeTimeStruct@wDays+1))&0ffh,w
  6378+ 000F32  0E6E               	movlw	110
  6379+ 000F34  B4D8               	btfsc	status,2
  6380+ 000F36  1934               	xorwf ((wwvMakeTimeStruct@wDays))&0ffh,w
  6381+                          
  6382+ 000F38  A4D8               	btfss	status,2
  6383+ 000F3A  EFA1  F007         	goto	u4261
  6384+ 000F3E  EFA3  F007         	goto	u4260
  6385+ 000F42                     u4261:
  6386+ 000F42  EFAF  F007         	goto	l1299
  6387+ 000F46                     u4260:
  6388+                          	line	387
  6389+                          ;wwv.c: 386: {
  6390+                          ;wwv.c: 387: wDays = 1;
  6391+ 000F46  0E01               	movlw	low(01h)
  6392+ 000F48  0101               	movlb	1	; () banked
  6393+ 000F4A  0101               	movlb	1	; () banked
  6394+ 000F4C  6F34               	movwf	((wwvMakeTimeStruct@wDays))&0ffh
  6395+ 000F4E  0E00               	movlw	high(01h)
  6396+ 000F50  0101               	movlb	1	; () banked
  6397+ 000F52  6F35               	movwf	((wwvMakeTimeStruct@wDays+1))&0ffh
  6398+                          	line	388
  6399+                          ;wwv.c: 388: ++yYears;
  6400+ 000F54  0101               	movlb	1	; () banked
  6401+ 000F56  0101               	movlb	1	; () banked
  6402+ 000F58  2B36               	incf	((wwvMakeTimeStruct@yYears))&0ffh
  6403+                          	line	389
  6404+                          ;wwv.c: 389: }
  6405+ 000F5A  EFB3  F007         	goto	l1300
  6406+                          	line	390
  6407+                          	
  6408+ 000F5E                     l1299:		; BSR set to: ?
  6409+                          
  6410+                          	line	391
  6411+                          ;wwv.c: 390: else
  6412+                          ;wwv.c: 391: ++wDays;
  6413+ 000F5E  0101               	movlb	1	; () banked
  6414+ 000F60  0101               	movlb	1	; () banked
  6415+ 000F62  4B34               	infsnz	((wwvMakeTimeStruct@wDays))&0ffh
  6416+ 000F64  2B35               	incf	((wwvMakeTimeStruct@wDays+1))&0ffh
  6417+                          	
  6418+ 000F66                     l1300:		; BSR set to: ?
  6419+                          
  6420+                          	line	392
  6421+                          ;wwv.c: 392: }
  6422+ 000F66  EFB8  F007         	goto	l1301
  6423+                          	line	393
  6424+                          	
  6425+ 000F6A                     l1298:		; BSR set to: ?
  6426+                          
  6427+                          	line	394
  6428+                          ;wwv.c: 393: else
  6429+                          ;wwv.c: 394: ++yHour;
  6430+ 000F6A  0101               	movlb	1	; () banked
  6431+ 000F6C  0101               	movlb	1	; () banked
  6432+ 000F6E  2B33               	incf	((wwvMakeTimeStruct@yHour))&0ffh
  6433+                          	
  6434+ 000F70                     l1301:		; BSR set to: ?
  6435+                          
  6436+                          	line	395
  6437+                          ;wwv.c: 395: }
  6438+ 000F70  EFBD  F007         	goto	l1302
  6439+                          	line	396
  6440+                          	
  6441+ 000F74                     l1297:		; BSR set to: ?
  6442+                          
  6443+                          	line	397
  6444+                          ;wwv.c: 396: else
  6445+                          ;wwv.c: 397: ++yMin;
  6446+ 000F74  0101               	movlb	1	; () banked
  6447+ 000F76  0101               	movlb	1	; () banked
  6448+ 000F78  2B32               	incf	((wwvMakeTimeStruct@yMin))&0ffh
  6449+                          	
  6450+ 000F7A                     l1302:		; BSR set to: ?
  6451+                          
  6452+                          	line	401
  6453+                          ;wwv.c: 401: nEndMonth = 0;
  6454+ 000F7A  0E00               	movlw	low(0)
  6455+ 000F7C  0101               	movlb	1	; () banked
  6456+ 000F7E  0101               	movlb	1	; () banked
  6457  000F80  6F3C               	movwf	((wwvMakeTimeStruct@nEndMonth))&0ffh
  6458  000F82  0E00               	movlw	high(0)
  6459  000F84  0101               	movlb	1	; () banked
  6460  000F86  6F3D               	movwf	((wwvMakeTimeStruct@nEndMonth+1))&0ffh
  6461                           	line	402
  6462                           ;wwv.c: 402: while(wDays > wEOM[nEndMonth++][yLe
                                 ap])
  6463  000F88  EFC6  F007         	goto	l1303
  6464                           	line	403
  6465                           ;wwv.c: 403: ;
  6466                           	
  6467  000F8C                     l1303:		; BSR set to: ?
  6468                           
  6469                           	line	402
  6470  000F8C  0101               	movlb	1	; () banked
  6471  000F8E  0101               	movlb	1	; () banked
  6472  000F90  5137               	movf	((wwvMakeTimeStruct@yLeap))&0ffh,w
  6473  000F92  0D02               	mullw	02h
  6474  000F94  0101               	movlb	1	; () banked
  6475  000F96  0101               	movlb	1	; () banked
  6476  000F98  513C               	movf	((wwvMakeTimeStruct@nEndMonth))&0ffh,w
  6477  000F9A  0101               	movlb	1	; () banked
  6478  000F9C  6F3E               	movwf	(??_wwvMakeTimeStruct+4+0)&0ffh
  6479  000F9E  0101               	movlb	1	; () banked
  6480  000FA0  0101               	movlb	1	; () banked
  6481  000FA2  513D               	movf	((wwvMakeTimeStruct@nEndMonth+1))&0ffh,w
  6482  000FA4  0101               	movlb	1	; () banked
  6483  000FA6  6F3F               	movwf	1+(??_wwvMakeTimeStruct+4+0)&0ffh
  6484  000FA8  0101               	movlb	1	; () banked
  6485  000FAA  4B3C               	infsnz	((wwvMakeTimeStruct@nEndMonth))&0ffh
  6486  000FAC  2B3D               	incf	((wwvMakeTimeStruct@nEndMonth+1))&0ffh
  6487  000FAE  90D8               	bcf	status,0
  6488  000FB0  0101               	movlb	1	; () banked
  6489  000FB2  373E               	rlcf	(??_wwvMakeTimeStruct+4+0)&0ffh
  6490  000FB4  90D8               	bcf	status,0
  6491  000FB6  0101               	movlb	1	; () banked
  6492  000FB8  373E               	rlcf	(??_wwvMakeTimeStruct+4+0)&0ffh
  6493                           
  6494  000FBA  0101               	movlb	1	; () banked
  6495  000FBC  513E               	movf	(??_wwvMakeTimeStruct+4+0)&0ffh,w
  6496  000FBE  24F3               	addwf	(prodl),c,w
  6497  000FC0  0101               	movlb	1	; () banked
  6498  000FC2  6F40               	movwf	(??_wwvMakeTimeStruct+6+0)&0ffh
  6499  000FC4  0E3D               	movlw	low((_wEOM))
  6500  000FC6  0101               	movlb	1	; () banked
  6501  000FC8  2540               	addwf	((??_wwvMakeTimeStruct+6+0))&0ffh,w
  6502  000FCA  6EF6               	movwf	tblptrl
  6503  000FCC  6AF7               	clrf	tblptrh
  6504  000FCE  0E3D               	movlw	high((_wEOM))
  6505  000FD0  22F7               	addwfc	tblptrh
  6506  000FD2  0009               	tblrd	*+
  6507                           	
  6508  000FD4  CFF5 F141          	movff	tablat,??_wwvMakeTimeStruct+7+0
  6509  000FD8  0009               	tblrd	*+
  6510                           	
  6511  000FDA  CFF5 F142          	movff	tablat,??_wwvMakeTimeStruct+7+0+1
  6512  000FDE  0101               	movlb	1	; () banked
  6513  000FE0  0101               	movlb	1	; () banked
  6514  000FE2  5134               	movf	((wwvMakeTimeStruct@wDays))&0ffh,w
  6515  000FE4  0101               	movlb	1	; () banked
  6516  000FE6  5D41               	subwf	(??_wwvMakeTimeStruct+7+0)&0ffh,w
  6517  000FE8  0101               	movlb	1	; () banked
  6518  000FEA  0101               	movlb	1	; () banked
  6519  000FEC  5135               	movf	((wwvMakeTimeStruct@wDays+1))&0ffh,w
  6520  000FEE  0101               	movlb	1	; () banked
  6521  000FF0  5942               	subwfb	(??_wwvMakeTimeStruct+7+1)&0ffh,w
  6522  000FF2  A0D8               	btfss	status,0
  6523  000FF4  EFFE  F007         	goto	u4271
  6524  000FF8  EF00  F008         	goto	u4270
  6525  000FFC                     u4271:
  6526  000FFC  EFC6  F007         	goto	l1303
  6527  001000                     u4270:
  6528                           	
  6529  001000                     l1305:		; BSR set to: ?
  6530                           
  6531                           	line	404
  6532                           ;wwv.c: 404: --nEndMonth;
  6533  001000  0101               	movlb	1	; () banked
  6534  001002  0101               	movlb	1	; () banked
  6535  001004  073C               	decf	((wwvMakeTimeStruct@nEndMonth))&0ffh
  6536  001006  A0D8               	btfss	status,0
  6537  001008  073D               	decf	((wwvMakeTimeStruct@nEndMonth+1))&0ffh
  6538                           	line	406
  6539                           ;wwv.c: 406: wDD = wDays - wEOM[nEndMonth-1][yLe
                                 ap];
  6540  00100A  0101               	movlb	1	; () banked
  6541  00100C  0101               	movlb	1	; () banked
  6542  00100E  5137               	movf	((wwvMakeTimeStruct@yLeap))&0ffh,w
  6543  001010  0D02               	mullw	02h
  6544  001012  C13C  F13E         	movff	(wwvMakeTimeStruct@nEndMonth),??_wwvMakeT
                                 imeStruct+4+0
  6545  001016  90D8               	bcf	status,0
  6546  001018  0101               	movlb	1	; () banked
  6547  00101A  373E               	rlcf	(??_wwvMakeTimeStruct+4+0)&0ffh
  6548  00101C  90D8               	bcf	status,0
  6549  00101E  0101               	movlb	1	; () banked
  6550  001020  373E               	rlcf	(??_wwvMakeTimeStruct+4+0)&0ffh
  6551                           
  6552  001022  0101               	movlb	1	; () banked
  6553  001024  513E               	movf	(??_wwvMakeTimeStruct+4+0)&0ffh,w
  6554  001026  24F3               	addwf	(prodl),c,w
  6555  001028  0101               	movlb	1	; () banked
  6556  00102A  6F3F               	movwf	(??_wwvMakeTimeStruct+5+0)&0ffh
  6557  00102C  0EFC               	movlw	-4
  6558  00102E  0101               	movlb	1	; () banked
  6559  001030  273F               	addwf	((??_wwvMakeTimeStruct+5+0))&0ffh
  6560  001032  0E3D               	movlw	low((_wEOM))
  6561  001034  0101               	movlb	1	; () banked
  6562  001036  253F               	addwf	((??_wwvMakeTimeStruct+5+0))&0ffh,w
  6563  001038  6EF6               	movwf	tblptrl
  6564  00103A  6AF7               	clrf	tblptrh
  6565  00103C  0E3D               	movlw	high((_wEOM))
  6566  00103E  22F7               	addwfc	tblptrh
  6567  001040  0009               	tblrd	*+
  6568                           	
  6569  001042  CFF5 F140          	movff	tablat,??_wwvMakeTimeStruct+6+0
  6570  001046  0009               	tblrd	*+
  6571                           	
  6572  001048  CFF5 F141          	movff	tablat,??_wwvMakeTimeStruct+6+0+1
  6573  00104C  0101               	movlb	1	; () banked
  6574  00104E  5140               	movf	(??_wwvMakeTimeStruct+6+0)&0ffh,w
  6575  001050  0101               	movlb	1	; () banked
  6576  001052  0101               	movlb	1	; () banked
  6577  001054  5D34               	subwf	((wwvMakeTimeStruct@wDays))&0ffh,w
  6578  001056  0101               	movlb	1	; () banked
  6579                           	
  6580  001058  0101               	movlb	1	; () banked
  6581  00105A  6F3A               	movwf	((wwvMakeTimeStruct@wDD))&0ffh
  6582  00105C  0101               	movlb	1	; () banked
  6583  00105E  5141               	movf	(??_wwvMakeTimeStruct+6+1)&0ffh,w
  6584  001060  0101               	movlb	1	; () banked
  6585  001062  0101               	movlb	1	; () banked
  6586  001064  5935               	subwfb	((wwvMakeTimeStruct@wDays+1))&0ffh,w
  6587  001066  0101               	movlb	1	; () banked
  6588  001068  6F3B               	movwf	1+((wwvMakeTimeStruct@wDD))&0ffh
  6589                           	line	409
  6590                           ;wwv.c: 409: pt->sec = 0;
  6591  00106A  C130  FFE9         	movff	(wwvMakeTimeStruct@pt),fsr0l
  6592  00106E  C131  FFEA         	movff	(wwvMakeTimeStruct@pt+1),fsr0h
  6593  001072  0E00               	movlw	low(0)
  6594  001074  6EEF               	movwf	indf0
  6595                           	line	410
  6596                           ;wwv.c: 410: pt->min = rtcDecToBCD(yMin);
  6597  001076  0E01               	movlw	low(01h)
  6598  001078  0101               	movlb	1	; () banked
  6599  00107A  0101               	movlb	1	; () banked
  6600  00107C  2530               	addwf	((wwvMakeTimeStruct@pt))&0ffh,w
  6601  00107E  6EE9               	movwf	c:fsr0l
  6602  001080  0E00               	movlw	high(01h)
  6603  001082  0101               	movlb	1	; () banked
  6604  001084  0101               	movlb	1	; () banked
  6605  001086  2131               	addwfc	((wwvMakeTimeStruct@pt+1))&0ffh,w
  6606  001088  6EEA               	movwf	1+c:fsr0l
  6607  00108A  C132  F143         	movff	(wwvMakeTimeStruct@yMin),(?_rtcDecToBCD)
  6608  00108E  ECEB  F019         	call	_rtcDecToBCD	;wreg free
  6609  001092  6EEF               	movwf	indf0
  6610                           
  6611                           	line	411
  6612                           ;wwv.c: 411: pt->hr = rtcDecToBCD(yHour);
  6613  001094  0E02               	movlw	low(02h)
  6614  001096  0101               	movlb	1	; () banked
  6615  001098  0101               	movlb	1	; () banked
  6616  00109A  2530               	addwf	((wwvMakeTimeStruct@pt))&0ffh,w
  6617  00109C  6EE9               	movwf	c:fsr0l
  6618  00109E  0E00               	movlw	high(02h)
  6619  0010A0  0101               	movlb	1	; () banked
  6620  0010A2  0101               	movlb	1	; () banked
  6621  0010A4  2131               	addwfc	((wwvMakeTimeStruct@pt+1))&0ffh,w
  6622  0010A6  6EEA               	movwf	1+c:fsr0l
  6623  0010A8  C133  F143         	movff	(wwvMakeTimeStruct@yHour),(?_rtcDecToBCD)
  6624  0010AC  ECEB  F019         	call	_rtcDecToBCD	;wreg free
  6625  0010B0  6EEF               	movwf	indf0
  6626                           
  6627                           	line	412
  6628                           ;wwv.c: 412: pt->day = wwvGetWeekDay(nEndMonth, 
                                 (UINT8)(wDD), (UINT16)yYears + 2000);
  6629  0010B2  0E05               	movlw	low(05h)
  6630  0010B4  0101               	movlb	1	; () banked
  6631  0010B6  0101               	movlb	1	; () banked
  6632  0010B8  2530               	addwf	((wwvMakeTimeStruct@pt))&0ffh,w
  6633  0010BA  6EE9               	movwf	c:fsr0l
  6634  0010BC  0E00               	movlw	high(05h)
  6635  0010BE  0101               	movlb	1	; () banked
  6636  0010C0  0101               	movlb	1	; () banked
  6637  0010C2  2131               	addwfc	((wwvMakeTimeStruct@pt+1))&0ffh,w
  6638  0010C4  6EEA               	movwf	1+c:fsr0l
  6639  0010C6  0ED0               	movlw	low(07D0h)
  6640  0010C8  0101               	movlb	1	; () banked
  6641  0010CA  0101               	movlb	1	; () banked
  6642  0010CC  2536               	addwf	((wwvMakeTimeStruct@yYears))&0ffh,w
  6643  0010CE  0101               	movlb	1	; () banked
  6644                           	
  6645  0010D0  0101               	movlb	1	; () banked
  6646  0010D2  6F47               	movwf	(0+(?_wwvGetWeekDay+04h))&0ffh
  6647  0010D4  0101               	movlb	1	; () banked
  6648  0010D6  6B48               	clrf	1+(0+(?_wwvGetWeekDay+04h))&0ffh
  6649  0010D8  0E07               	movlw	high(07D0h)
  6650  0010DA  0101               	movlb	1	; () banked
  6651  0010DC  2348               	addwfc	1+(0+(?_wwvGetWeekDay+04h))&0ffh
  6652  0010DE  0101               	movlb	1	; () banked
  6653  0010E0  0101               	movlb	1	; () banked
  6654  0010E2  C13A  F145         	movff	(wwvMakeTimeStruct@wDD),0+(?_wwvGetWeekDa
                                 y+02h)
  6655  0010E6  0101               	movlb	1	; () banked
  6656  0010E8  0101               	movlb	1	; () banked
  6657  0010EA  6B46               	clrf	(1+(?_wwvGetWeekDay+02h))&0ffh
  6658  0010EC  C13C  F143         	movff	(wwvMakeTimeStruct@nEndMonth),(?_wwvGetWe
                                 ekDay)
  6659  0010F0  C13D  F144         	movff	(wwvMakeTimeStruct@nEndMonth+1),(?_wwvGet
                                 WeekDay+1)
  6660  0010F4  ECE2  F00F         	call	_wwvGetWeekDay	;wreg free
  6661  0010F8  6EEF               	movwf	indf0
  6662                           
  6663                           	line	413
  6664                           ;wwv.c: 413: pt->date = rtcDecToBCD((UINT8)wDD);
  6665  0010FA  0E03               	movlw	low(03h)
  6666  0010FC  0101               	movlb	1	; () banked
  6667  0010FE  0101               	movlb	1	; () banked
  6668  001100  2530               	addwf	((wwvMakeTimeStruct@pt))&0ffh,w
  6669  001102  6EE9               	movwf	c:fsr0l
  6670  001104  0E00               	movlw	high(03h)
  6671  001106  0101               	movlb	1	; () banked
  6672  001108  0101               	movlb	1	; () banked
  6673  00110A  2131               	addwfc	((wwvMakeTimeStruct@pt+1))&0ffh,w
  6674  00110C  6EEA               	movwf	1+c:fsr0l
  6675  00110E  C13A  F143         	movff	(wwvMakeTimeStruct@wDD),(?_rtcDecToBCD)
  6676  001112  ECEB  F019         	call	_rtcDecToBCD	;wreg free
  6677  001116  6EEF               	movwf	indf0
  6678                           
  6679                           	line	414
  6680                           ;wwv.c: 414: pt->month = rtcDecToBCD(nEndMonth);
  6681  001118  0E04               	movlw	low(04h)
  6682  00111A  0101               	movlb	1	; () banked
  6683  00111C  0101               	movlb	1	; () banked
  6684  00111E  2530               	addwf	((wwvMakeTimeStruct@pt))&0ffh,w
  6685  001120  6EE9               	movwf	c:fsr0l
  6686  001122  0E00               	movlw	high(04h)
  6687  001124  0101               	movlb	1	; () banked
  6688  001126  0101               	movlb	1	; () banked
  6689  001128  2131               	addwfc	((wwvMakeTimeStruct@pt+1))&0ffh,w
  6690  00112A  6EEA               	movwf	1+c:fsr0l
  6691  00112C  C13C  F143         	movff	(wwvMakeTimeStruct@nEndMonth),(?_rtcDecTo
                                 BCD)
  6692  001130  ECEB  F019         	call	_rtcDecToBCD	;wreg free
  6693  001134  6EEF               	movwf	indf0
  6694                           
  6695                           	line	415
  6696                           ;wwv.c: 415: pt->year = rtcDecToBCD(yYears);
  6697  001136  0E06               	movlw	low(06h)
  6698  001138  0101               	movlb	1	; () banked
  6699  00113A  0101               	movlb	1	; () banked
  6700  00113C  2530               	addwf	((wwvMakeTimeStruct@pt))&0ffh,w
  6701  00113E  6EE9               	movwf	c:fsr0l
  6702  001140  0E00               	movlw	high(06h)
  6703  001142  0101               	movlb	1	; () banked
  6704  001144  0101               	movlb	1	; () banked
  6705  001146  2131               	addwfc	((wwvMakeTimeStruct@pt+1))&0ffh,w
  6706  001148  6EEA               	movwf	1+c:fsr0l
  6707  00114A  C136  F143         	movff	(wwvMakeTimeStruct@yYears),(?_rtcDecToBCD
                                 )
  6708  00114E  ECEB  F019         	call	_rtcDecToBCD	;wreg free
  6709  001152  6EEF               	movwf	indf0
  6710                           
  6711                           	line	418
  6712                           ;wwv.c: 418: }
  6713  001154                     l1291:
  6714                           			; BSR set to: ?
  6715                           
  6716  001154  0012               	return
  6717                           	opt stack 0
  6718                           GLOBAL __end_of_wwvMakeTimeStruct
  6719  001156                     	__end_of_wwvMakeTimeStruct:
  6720                           	FNSIZE	_wwvMakeTimeStruct,9,10
  6721                           ; =============== function _wwvMakeTimeStruct en
                                 ds ============
  6722                           
  6723                           	signat	_wwvMakeTimeStruct,32888
  6724                           	global	_rtcBumpLastSync
  6725                           	global	??_rtcBumpLastSync
  6726                           	global	?_rtcBumpLastSync
  6727                           
  6728                           ; *************** function _rtcBumpLastSync ****
                                 *************
  6729                           ; Defined at:
  6730                           ;		line 372 in file "rtc.c"
  6731                           ; Parameters:
  6732                           ;		None
  6733                           ; Auto variables:
  6734                           ;		yDate       	       	type: unsigned char 
  6735                           ;		yHr         	       	type: unsigned char 
  6736                           ;		yMin        	       	type: unsigned char 
  6737                           ;		yMonth      	       	type: unsigned char 
  6738                           ; Return value:
  6739                           ;		type: void 
  6740                           ;		size: 0
  6741                           ; Registers used:
  6742                           ;		wreg, status,2, status,0, cstack
  6743                           ; Tracked objects:
  6744                           ;		On entry : 0/0
  6745                           ;		On exit  : 0/0
  6746                           ;		Unchanged: 0/0
  6747                           ; Data sizes:
  6748                           ;		Autos:    4
  6749                           ;		Params:   0
  6750                           ;		Temp:     1
  6751                           ;		Total:    5
  6752                           ; This function calls:
  6753                           ;		_rtcReadRam
  6754                           ;		_rtcWriteRam
  6755                           ; This function is called by:
  6756                           ;		_wwvGetTime
  6757                           ; This function uses a non-reentrant model
  6758                           ; 
  6759                                   psect   text16,class=CODE,space=0,reloc=
                                 2
  6760                           
  6761                           	opt lm
  6762                           	file	"rtc.c"
  6763                           	line	372
  6764  000000                     	__size_of_rtcBumpLastSync	equ	__end_of_rtcBumpL
                                 astSync-_rtcBumpLastSync
  6765                           ;rtc.c: 371: void rtcBumpLastSync(void)
  6766                           ;rtc.c: 372: {
  6767                           	
  6768  002BCE                     _rtcBumpLastSync:		; BSR set to: ?
  6769                           
  6770                           	opt stack 28
  6771                           	line	375
  6772                           ;rtc.c: 373: UINT8 yMonth, yDate, yHr, yMin;
  6773                           ;rtc.c: 375: yMonth= rtcReadRam((UINT8)0xC5);
  6774  002BCE  0101               	movlb	1	; () banked
  6775  002BD0  6F34               	movwf	(??_rtcBumpLastSync+4+0)&0ffh
  6776  002BD2  0EC5               	movlw	low(0C5h)
  6777  002BD4  0101               	movlb	1	; () banked
  6778  002BD6  0101               	movlb	1	; () banked
  6779  002BD8  6F35               	movwf	((?_rtcReadRam))&0ffh
  6780  002BDA  0101               	movlb	1	; () banked
  6781  002BDC  5134               	movf	(??_rtcBumpLastSync+4+0)&0ffh,w
  6782  002BDE  EC65  F01B         	call	_rtcReadRam	;wreg free
  6783  002BE2  0101               	movlb	1	; () banked
  6784  002BE4  0101               	movlb	1	; () banked
  6785  002BE6  6F33               	movwf	((rtcBumpLastSync@yMonth))&0ffh
  6786                           	line	376
  6787                           ;rtc.c: 376: yDate = rtcReadRam((UINT8)0xC7);
  6788  002BE8  0101               	movlb	1	; () banked
  6789  002BEA  6F34               	movwf	(??_rtcBumpLastSync+4+0)&0ffh
  6790  002BEC  0EC7               	movlw	low(0C7h)
  6791  002BEE  0101               	movlb	1	; () banked
  6792  002BF0  0101               	movlb	1	; () banked
  6793  002BF2  6F35               	movwf	((?_rtcReadRam))&0ffh
  6794  002BF4  0101               	movlb	1	; () banked
  6795  002BF6  5134               	movf	(??_rtcBumpLastSync+4+0)&0ffh,w
  6796  002BF8  EC65  F01B         	call	_rtcReadRam	;wreg free
  6797  002BFC  0101               	movlb	1	; () banked
  6798  002BFE  0101               	movlb	1	; () banked
  6799  002C00  6F30               	movwf	((rtcBumpLastSync@yDate))&0ffh
  6800                           	line	377
  6801                           ;rtc.c: 377: yHr = rtcReadRam((UINT8)0xC9);
  6802  002C02  0101               	movlb	1	; () banked
  6803  002C04  6F34               	movwf	(??_rtcBumpLastSync+4+0)&0ffh
  6804  002C06  0EC9               	movlw	low(0C9h)
  6805  002C08  0101               	movlb	1	; () banked
  6806  002C0A  0101               	movlb	1	; () banked
  6807  002C0C  6F35               	movwf	((?_rtcReadRam))&0ffh
  6808  002C0E  0101               	movlb	1	; () banked
  6809  002C10  5134               	movf	(??_rtcBumpLastSync+4+0)&0ffh,w
  6810  002C12  EC65  F01B         	call	_rtcReadRam	;wreg free
  6811  002C16  0101               	movlb	1	; () banked
  6812  002C18  0101               	movlb	1	; () banked
  6813  002C1A  6F31               	movwf	((rtcBumpLastSync@yHr))&0ffh
  6814                           	line	378
  6815                           ;rtc.c: 378: yMin = rtcReadRam((UINT8)0xCB);
  6816  002C1C  0101               	movlb	1	; () banked
  6817  002C1E  6F34               	movwf	(??_rtcBumpLastSync+4+0)&0ffh
  6818  002C20  0ECB               	movlw	low(0CBh)
  6819  002C22  0101               	movlb	1	; () banked
  6820  002C24  0101               	movlb	1	; () banked
  6821  002C26  6F35               	movwf	((?_rtcReadRam))&0ffh
  6822  002C28  0101               	movlb	1	; () banked
  6823  002C2A  5134               	movf	(??_rtcBumpLastSync+4+0)&0ffh,w
  6824  002C2C  EC65  F01B         	call	_rtcReadRam	;wreg free
  6825  002C30  0101               	movlb	1	; () banked
  6826  002C32  0101               	movlb	1	; () banked
  6827  002C34  6F32               	movwf	((rtcBumpLastSync@yMin))&0ffh
  6828                           	line	380
  6829                           ;rtc.c: 380: rtcWriteRam((UINT8)0xCE, yMonth);
  6830  002C36  C133  F136         	movff	(rtcBumpLastSync@yMonth),0+(?_rtcWriteRam
                                 +01h)
  6831  002C3A  0101               	movlb	1	; () banked
  6832  002C3C  6F34               	movwf	(??_rtcBumpLastSync+4+0)&0ffh
  6833  002C3E  0ECE               	movlw	low(0CEh)
  6834  002C40  0101               	movlb	1	; () banked
  6835  002C42  0101               	movlb	1	; () banked
  6836  002C44  6F35               	movwf	((?_rtcWriteRam))&0ffh
  6837  002C46  0101               	movlb	1	; () banked
  6838  002C48  5134               	movf	(??_rtcBumpLastSync+4+0)&0ffh,w
  6839  002C4A  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  6840                           	line	381
  6841                           ;rtc.c: 381: rtcWriteRam((UINT8)0xD0, yDate);
  6842  002C4E  C130  F136         	movff	(rtcBumpLastSync@yDate),0+(?_rtcWriteRam+
                                 01h)
  6843  002C52  0101               	movlb	1	; () banked
  6844  002C54  6F34               	movwf	(??_rtcBumpLastSync+4+0)&0ffh
  6845  002C56  0ED0               	movlw	low(0D0h)
  6846  002C58  0101               	movlb	1	; () banked
  6847  002C5A  0101               	movlb	1	; () banked
  6848  002C5C  6F35               	movwf	((?_rtcWriteRam))&0ffh
  6849  002C5E  0101               	movlb	1	; () banked
  6850  002C60  5134               	movf	(??_rtcBumpLastSync+4+0)&0ffh,w
  6851  002C62  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  6852                           	line	382
  6853                           ;rtc.c: 382: rtcWriteRam((UINT8)0xD2, yHr);
  6854  002C66  C131  F136         	movff	(rtcBumpLastSync@yHr),0+(?_rtcWriteRam+01
                                 h)
  6855  002C6A  0101               	movlb	1	; () banked
  6856  002C6C  6F34               	movwf	(??_rtcBumpLastSync+4+0)&0ffh
  6857  002C6E  0ED2               	movlw	low(0D2h)
  6858  002C70  0101               	movlb	1	; () banked
  6859  002C72  0101               	movlb	1	; () banked
  6860  002C74  6F35               	movwf	((?_rtcWriteRam))&0ffh
  6861  002C76  0101               	movlb	1	; () banked
  6862  002C78  5134               	movf	(??_rtcBumpLastSync+4+0)&0ffh,w
  6863  002C7A  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  6864                           	line	383
  6865                           ;rtc.c: 383: rtcWriteRam((UINT8)0xD4, yMin);
  6866  002C7E  C132  F136         	movff	(rtcBumpLastSync@yMin),0+(?_rtcWriteRam+0
                                 1h)
  6867  002C82  0101               	movlb	1	; () banked
  6868  002C84  6F34               	movwf	(??_rtcBumpLastSync+4+0)&0ffh
  6869  002C86  0ED4               	movlw	low(0D4h)
  6870  002C88  0101               	movlb	1	; () banked
  6871  002C8A  0101               	movlb	1	; () banked
  6872  002C8C  6F35               	movwf	((?_rtcWriteRam))&0ffh
  6873  002C8E  0101               	movlb	1	; () banked
  6874  002C90  5134               	movf	(??_rtcBumpLastSync+4+0)&0ffh,w
  6875  002C92  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  6876                           	line	386
  6877                           ;rtc.c: 386: }
  6878  002C96                     l876:
  6879                           			; BSR set to: ?
  6880                           
  6881  002C96  0012               	return
  6882                           	opt stack 0
  6883                           GLOBAL __end_of_rtcBumpLastSync
  6884  002C98                     	__end_of_rtcBumpLastSync:
  6885                           	FNSIZE	_rtcBumpLastSync,5,0
  6886                           ; =============== function _rtcBumpLastSync ends
                                  ============
  6887                           
  6888                           	signat	_rtcBumpLastSync,88
  6889                           	global	_DrawTZSetting
  6890                           	global	??_DrawTZSetting
  6891                           	global	?_DrawTZSetting
  6892                           
  6893                           ; *************** function _DrawTZSetting ******
                                 ***********
  6894                           ; Defined at:
  6895                           ;		line 492 in file "main.c"
  6896                           ; Parameters:
  6897                           ;		yTZ            size:   1offs:   0	type: unsig
                                 ned char 
  6898                           ; Auto variables:
  6899                           ;		y           	       	type: unsigned char 
  6900                           ; Return value:
  6901                           ;		type: void 
  6902                           ;		size: 0
  6903                           ; Registers used:
  6904                           ;		wreg, fsr0l, fsr0h, status,2, status,0, tblpt
                                 rl, tblptrh, tblptru, tablat, prodl, prodh, csta
                                 ck
  6905                           ; Tracked objects:
  6906                           ;		On entry : 0/0
  6907                           ;		On exit  : 0/0
  6908                           ;		Unchanged: 0/0
  6909                           ; Data sizes:
  6910                           ;		Autos:    1
  6911                           ;		Params:   1
  6912                           ;		Temp:     2
  6913                           ;		Total:    4
  6914                           ; This function calls:
  6915                           ;		_glcdMoveTo
  6916                           ;		_glcdWriteString
  6917                           ; This function is called by:
  6918                           ;		_ButtonDown
  6919                           ; This function uses a non-reentrant model
  6920                           ; 
  6921                                   psect   text17,class=CODE,space=0,reloc=
                                 2
  6922                           
  6923                           	opt lm
  6924                           	file	"main.c"
  6925                           	line	492
  6926  000000                     	__size_of_DrawTZSetting	equ	__end_of_DrawTZSett
                                 ing-_DrawTZSetting
  6927                           ;main.c: 491: void DrawTZSetting(UINT8 yTZ)
  6928                           ;main.c: 492: {
  6929                           	
  6930  002D60                     _DrawTZSetting:		; BSR set to: ?
  6931                           
  6932                           	opt stack 28
  6933                           	line	495
  6934  002D60  0101               	movlb	1	; () banked
  6935  002D62  6F0E               	movwf	(??_DrawTZSetting+1+0)&0ffh
  6936  002D64  0E00               	movlw	low(0)
  6937  002D66  0101               	movlb	1	; () banked
  6938  002D68  0101               	movlb	1	; () banked
  6939  002D6A  6F0D               	movwf	((DrawTZSetting@y))&0ffh
  6940  002D6C  0101               	movlb	1	; () banked
  6941  002D6E  510E               	movf	(??_DrawTZSetting+1+0)&0ffh,w
  6942  002D70  0E06               	movlw	(07h-1)
  6943  002D72  0101               	movlb	1	; () banked
  6944  002D74  0101               	movlb	1	; () banked
  6945  002D76  650D               	cpfsgt	((DrawTZSetting@y))&0ffh
  6946  002D78  EFC0  F016         	goto	u4281
  6947  002D7C  EFC2  F016         	goto	u4280
  6948  002D80                     u4281:
  6949  002D80  EFC4  F016         	goto	l670
  6950  002D84                     u4280:
  6951  002D84  EF0D  F017         	goto	l671
  6952                           	line	496
  6953                           	
  6954  002D88                     l670:		; BSR set to: ?
  6955                           
  6956                           	line	497
  6957                           ;main.c: 496: {
  6958                           ;main.c: 497: glcdMoveTo(0, y+1);
  6959  002D88  0101               	movlb	1	; () banked
  6960  002D8A  0101               	movlb	1	; () banked
  6961  002D8C  290D               	incf	((DrawTZSetting@y))&0ffh,w
  6962  002D8E  0101               	movlb	1	; () banked
  6963  002D90  0101               	movlb	1	; () banked
  6964  002D92  6F35               	movwf	(0+(?_glcdMoveTo+01h))&0ffh
  6965  002D94  0101               	movlb	1	; () banked
  6966  002D96  6F0E               	movwf	(??_DrawTZSetting+1+0)&0ffh
  6967  002D98  0E00               	movlw	low(0)
  6968  002D9A  0101               	movlb	1	; () banked
  6969  002D9C  0101               	movlb	1	; () banked
  6970  002D9E  6F34               	movwf	((?_glcdMoveTo))&0ffh
  6971  002DA0  0101               	movlb	1	; () banked
  6972  002DA2  510E               	movf	(??_DrawTZSetting+1+0)&0ffh,w
  6973  002DA4  EC69  F01A         	call	_glcdMoveTo	;wreg free
  6974                           	line	499
  6975                           ;main.c: 499: if(y == (yTZ - 4))
  6976  002DA8  0EFC               	movlw	low(-4)
  6977  002DAA  0101               	movlb	1	; () banked
  6978  002DAC  0101               	movlb	1	; () banked
  6979  002DAE  250C               	addwf	((DrawTZSetting@yTZ))&0ffh,w
  6980  002DB0  0101               	movlb	1	; () banked
  6981  002DB2  6F0E               	movwf	(??_DrawTZSetting+1+0)&0ffh
  6982  002DB4  0101               	movlb	1	; () banked
  6983  002DB6  6B0F               	clrf	1+(??_DrawTZSetting+1+0)&0ffh
  6984  002DB8  0EFF               	movlw	high(-4)
  6985  002DBA  0101               	movlb	1	; () banked
  6986  002DBC  230F               	addwfc	1+(??_DrawTZSetting+1+0)&0ffh
  6987  002DBE  0101               	movlb	1	; () banked
  6988  002DC0  0101               	movlb	1	; () banked
  6989  002DC2  510D               	movf	((DrawTZSetting@y))&0ffh,w
  6990  002DC4  0101               	movlb	1	; () banked
  6991  002DC6  190E               	xorwf	(??_DrawTZSetting+1+0)&0ffh,w
  6992  002DC8  110F               	iorwf	(??_DrawTZSetting+1+1)&0ffh,w
  6993                           
  6994  002DCA  A4D8               	btfss	status,2
  6995  002DCC  EFEA  F016         	goto	u4291
  6996  002DD0  EFEC  F016         	goto	u4290
  6997  002DD4                     u4291:
  6998  002DD4  EFF7  F016         	goto	l673
  6999  002DD8                     u4290:
  7000                           	line	500
  7001                           ;main.c: 500: glcdWriteString((UINT8*) cszSet);
  7002  002DD8  0EFA               	movlw	low(_cszSet)
  7003  002DDA  0101               	movlb	1	; () banked
  7004  002DDC  0101               	movlb	1	; () banked
  7005  002DDE  6F34               	movwf	((?_glcdWriteString))&0ffh
  7006  002DE0  0E3F               	movlw	high(_cszSet)
  7007  002DE2  0101               	movlb	1	; () banked
  7008  002DE4  6F35               	movwf	((?_glcdWriteString+1))&0ffh
  7009  002DE6  EC54  F019         	call	_glcdWriteString	;wreg free
  7010  002DEA  EF00  F017         	goto	l674
  7011                           	line	501
  7012                           	
  7013  002DEE                     l673:		; BSR set to: ?
  7014                           
  7015                           	line	502
  7016                           ;main.c: 501: else
  7017                           ;main.c: 502: glcdWriteString((UINT8*) cszBlank)
                                 ;
  7018  002DEE  0EF6               	movlw	low(_cszBlank)
  7019  002DF0  0101               	movlb	1	; () banked
  7020  002DF2  0101               	movlb	1	; () banked
  7021  002DF4  6F34               	movwf	((?_glcdWriteString))&0ffh
  7022  002DF6  0E3F               	movlw	high(_cszBlank)
  7023  002DF8  0101               	movlb	1	; () banked
  7024  002DFA  6F35               	movwf	((?_glcdWriteString+1))&0ffh
  7025  002DFC  EC54  F019         	call	_glcdWriteString	;wreg free
  7026                           	
  7027  002E00                     l674:		; BSR set to: ?
  7028                           
  7029                           	line	495
  7030  002E00  0101               	movlb	1	; () banked
  7031  002E02  0101               	movlb	1	; () banked
  7032  002E04  2B0D               	incf	((DrawTZSetting@y))&0ffh
  7033  002E06  0E06               	movlw	(07h-1)
  7034  002E08  0101               	movlb	1	; () banked
  7035  002E0A  0101               	movlb	1	; () banked
  7036  002E0C  650D               	cpfsgt	((DrawTZSetting@y))&0ffh
  7037  002E0E  EF0B  F017         	goto	u4301
  7038  002E12  EF0D  F017         	goto	u4300
  7039  002E16                     u4301:
  7040  002E16  EFC4  F016         	goto	l670
  7041  002E1A                     u4300:
  7042                           	
  7043  002E1A                     l671:		; BSR set to: ?
  7044                           
  7045                           	line	505
  7046                           ;main.c: 503: }
  7047                           ;main.c: 505: }
  7048  002E1A                     l669:
  7049                           			; BSR set to: ?
  7050                           
  7051  002E1A  0012               	return
  7052                           	opt stack 0
  7053                           GLOBAL __end_of_DrawTZSetting
  7054  002E1C                     	__end_of_DrawTZSetting:
  7055                           	FNSIZE	_DrawTZSetting,3,1
  7056                           ; =============== function _DrawTZSetting ends =
                                 ===========
  7057                           
  7058                           	signat	_DrawTZSetting,4216
  7059                           	global	_wwvGetSyncBit
  7060                           	global	??_wwvGetSyncBit
  7061                           	global	?_wwvGetSyncBit
  7062                           
  7063                           ; *************** function _wwvGetSyncBit ******
                                 ***********
  7064                           ; Defined at:
  7065                           ;		line 540 in file "wwv.c"
  7066                           ; Parameters:
  7067                           ;		None
  7068                           ; Auto variables:
  7069                           ;		None
  7070                           ; Return value:
  7071                           ;		type: unsigned char 
  7072                           ;		size: 1
  7073                           ; Registers used:
  7074                           ;		wreg, status,2, status,0, cstack
  7075                           ; Tracked objects:
  7076                           ;		On entry : 0/0
  7077                           ;		On exit  : 0/0
  7078                           ;		Unchanged: 0/0
  7079                           ; Data sizes:
  7080                           ;		Autos:    0
  7081                           ;		Params:   0
  7082                           ;		Temp:     0
  7083                           ;		Total:    0
  7084                           ; This function calls:
  7085                           ;		_wwvGetBit
  7086                           ; This function is called by:
  7087                           ;		_wwvGetTime
  7088                           ; This function uses a non-reentrant model
  7089                           ; 
  7090                                   psect   text18,class=CODE,space=0,reloc=
                                 2
  7091                           
  7092                           	opt lm
  7093                           	file	"wwv.c"
  7094                           	line	540
  7095  000000                     	__size_of_wwvGetSyncBit	equ	__end_of_wwvGetSync
                                 Bit-_wwvGetSyncBit
  7096                           ;wwv.c: 539: static UINT8 wwvGetSyncBit(void)
  7097                           ;wwv.c: 540: {
  7098                           	
  7099  003484                     _wwvGetSyncBit:		; BSR set to: ?
  7100                           
  7101                           	opt stack 28
  7102                           	line	541
  7103  003484  EF50  F01A         	goto	l1320
  7104                           	
  7105  003488                     l1321:		; BSR set to: ?
  7106                           
  7107                           	line	543
  7108                           ;wwv.c: 542: {
  7109                           ;wwv.c: 543: LATA0 = 1;
  7110  003488  8089               	bsf	c:(31816/8),(31816)&7	;volatile
  7111                           	line	544
  7112                           ;wwv.c: 544: if(g_yTimedOut)
  7113  00348A  5009               	movf	((c:9)),c,w	;volatile
  7114  00348C  B4D8               	btfsc	status,2
  7115  00348E  EF4B  F01A         	goto	u4311
  7116  003492  EF4D  F01A         	goto	u4310
  7117  003496                     u4311:
  7118  003496  EF50  F01A         	goto	l1320
  7119  00349A                     u4310:
  7120                           	line	545
  7121                           ;wwv.c: 545: return 0;
  7122  00349A  0E00               	movlw	(0)&0ffh
  7123  00349C  EF68  F01A         	goto	l1319
  7124                           	line	546
  7125                           	
  7126  0034A0                     l1320:		; BSR set to: ?
  7127                           
  7128                           	line	541
  7129  0034A0  B480               	btfsc	c:(31746/8),(31746)&7	;volatile
  7130  0034A2  EF55  F01A         	goto	u4321
  7131  0034A6  EF57  F01A         	goto	u4320
  7132  0034AA                     u4321:
  7133  0034AA  EF44  F01A         	goto	l1321
  7134  0034AE                     u4320:
  7135                           	
  7136  0034AE                     l1322:		; BSR set to: ?
  7137                           
  7138                           	line	547
  7139                           ;wwv.c: 546: }
  7140                           ;wwv.c: 547: LATA0 = 0;
  7141  0034AE  9089               	bcf	c:(31816/8),(31816)&7	;volatile
  7142                           	line	549
  7143                           ;wwv.c: 549: if(wwvGetBit() == 0x04)
  7144  0034B0  EC8D  F011         	call	_wwvGetBit	;wreg free
  7145  0034B4  0A04               	xorlw	04h
  7146  0034B6  A4D8               	btfss	status,2
  7147  0034B8  EF60  F01A         	goto	u4331
  7148  0034BC  EF62  F01A         	goto	u4330
  7149  0034C0                     u4331:
  7150  0034C0  EF65  F01A         	goto	l1324
  7151  0034C4                     u4330:
  7152                           	line	550
  7153                           ;wwv.c: 550: return 1;
  7154  0034C4  0E01               	movlw	(01h)&0ffh
  7155  0034C6  EF68  F01A         	goto	l1319
  7156                           	
  7157  0034CA                     l1324:		; BSR set to: ?
  7158                           
  7159                           	line	552
  7160                           ;wwv.c: 552: return 0;
  7161  0034CA  0E00               	movlw	(0)&0ffh
  7162  0034CC  EF68  F01A         	goto	l1319
  7163                           	line	554
  7164                           ;wwv.c: 554: }
  7165  0034D0                     l1319:
  7166                           			; BSR set to: ?
  7167                           
  7168  0034D0  0012               	return
  7169                           	opt stack 0
  7170                           GLOBAL __end_of_wwvGetSyncBit
  7171  0034D2                     	__end_of_wwvGetSyncBit:
  7172                           	FNSIZE	_wwvGetSyncBit,0,0
  7173                           ; =============== function _wwvGetSyncBit ends =
                                 ===========
  7174                           
  7175                           	signat	_wwvGetSyncBit,89
  7176                           	global	_wwvRead8BitFrame
  7177                           	global	??_wwvRead8BitFrame
  7178                           	global	?_wwvRead8BitFrame
  7179                           
  7180                           ; *************** function _wwvRead8BitFrame ***
                                 **************
  7181                           ; Defined at:
  7182                           ;		line 576 in file "wwv.c"
  7183                           ; Parameters:
  7184                           ;		pResult        size:   2offs:   0	type: PTR u
                                 nsigned char ; Largest target is 1
  7185                           ;		 -> wwvGetTime@yYears2(1), wwvGetTime@yYears1
                                 (1), wwvGetTime@yDays2(1), wwvGetTime@yDays1(1),
                                  
  7186                           ;		 -> wwvGetTime@yHour(1), wwvGetTime@yMin(1), 
  7187                           ; Auto variables:
  7188                           ;		yCode       	       	type: unsigned char 
  7189                           ;		y           	       	type: unsigned char 
  7190                           ; Return value:
  7191                           ;		type: unsigned char 
  7192                           ;		size: 1
  7193                           ; Registers used:
  7194                           ;		wreg, fsr0l, fsr0h, status,2, status,0, cstac
                                 k
  7195                           ; Tracked objects:
  7196                           ;		On entry : 0/0
  7197                           ;		On exit  : 0/0
  7198                           ;		Unchanged: 0/0
  7199                           ; Data sizes:
  7200                           ;		Autos:    2
  7201                           ;		Params:   2
  7202                           ;		Temp:     1
  7203                           ;		Total:    5
  7204                           ; This function calls:
  7205                           ;		_wwvGetBit
  7206                           ; This function is called by:
  7207                           ;		_wwvGetTime
  7208                           ; This function uses a non-reentrant model
  7209                           ; 
  7210                                   psect   text19,class=CODE,space=0,reloc=
                                 2
  7211                           
  7212                           	opt lm
  7213                           	file	"wwv.c"
  7214                           	line	576
  7215  000000                     	__size_of_wwvRead8BitFrame	equ	__end_of_wwvRead
                                 8BitFrame-_wwvRead8BitFrame
  7216                           ;wwv.c: 575: static UINT8 wwvRead8BitFrame(UINT8
                                  *pResult)
  7217                           ;wwv.c: 576: {
  7218                           	
  7219  002ED6                     _wwvRead8BitFrame:		; BSR set to: ?
  7220                           
  7221                           	opt stack 28
  7222                           	line	579
  7223                           ;wwv.c: 577: UINT8 y, yCode;
  7224                           ;wwv.c: 579: *pResult = 0;
  7225  002ED6  C130  FFE9         	movff	(wwvRead8BitFrame@pResult),fsr0l
  7226  002EDA  C131  FFEA         	movff	(wwvRead8BitFrame@pResult+1),fsr0h
  7227  002EDE  0E00               	movlw	low(0)
  7228  002EE0  6EEF               	movwf	indf0
  7229                           	line	581
  7230                           ;wwv.c: 581: for(y = 0x80; y; y >>= 1)
  7231  002EE2  0101               	movlb	1	; () banked
  7232  002EE4  6F34               	movwf	(??_wwvRead8BitFrame+2+0)&0ffh
  7233  002EE6  0E80               	movlw	low(080h)
  7234  002EE8  0101               	movlb	1	; () banked
  7235  002EEA  0101               	movlb	1	; () banked
  7236  002EEC  6F33               	movwf	((wwvRead8BitFrame@y))&0ffh
  7237  002EEE  0101               	movlb	1	; () banked
  7238  002EF0  5134               	movf	(??_wwvRead8BitFrame+2+0)&0ffh,w
  7239  002EF2  EFB8  F017         	goto	l1329
  7240                           	line	582
  7241                           	
  7242  002EF6                     l1326:		; BSR set to: ?
  7243                           
  7244                           	line	583
  7245                           ;wwv.c: 582: {
  7246                           ;wwv.c: 583: while(RA2)
  7247  002EF6  EF89  F017         	goto	l1330
  7248                           	
  7249  002EFA                     l1331:		; BSR set to: ?
  7250                           
  7251                           	line	585
  7252                           ;wwv.c: 584: {
  7253                           ;wwv.c: 585: LATA0 = 1;
  7254  002EFA  8089               	bsf	c:(31816/8),(31816)&7	;volatile
  7255                           	line	586
  7256                           ;wwv.c: 586: if(g_yTimedOut)
  7257  002EFC  5009               	movf	((c:9)),c,w	;volatile
  7258  002EFE  B4D8               	btfsc	status,2
  7259  002F00  EF84  F017         	goto	u4341
  7260  002F04  EF86  F017         	goto	u4340
  7261  002F08                     u4341:
  7262  002F08  EF89  F017         	goto	l1330
  7263  002F0C                     u4340:
  7264                           	line	587
  7265                           ;wwv.c: 587: return 0;
  7266  002F0C  0E00               	movlw	(0)&0ffh
  7267  002F0E  EFC4  F017         	goto	l1325
  7268                           	line	588
  7269                           	
  7270  002F12                     l1330:		; BSR set to: ?
  7271                           
  7272                           	line	583
  7273  002F12  B480               	btfsc	c:(31746/8),(31746)&7	;volatile
  7274  002F14  EF8E  F017         	goto	u4351
  7275  002F18  EF90  F017         	goto	u4350
  7276  002F1C                     u4351:
  7277  002F1C  EF7D  F017         	goto	l1331
  7278  002F20                     u4350:
  7279                           	
  7280  002F20                     l1332:		; BSR set to: ?
  7281                           
  7282                           	line	589
  7283                           ;wwv.c: 588: }
  7284                           ;wwv.c: 589: LATA0 = 0;
  7285  002F20  9089               	bcf	c:(31816/8),(31816)&7	;volatile
  7286                           	line	590
  7287                           ;wwv.c: 590: yCode = wwvGetBit();
  7288  002F22  EC8D  F011         	call	_wwvGetBit	;wreg free
  7289  002F26  0101               	movlb	1	; () banked
  7290  002F28  0101               	movlb	1	; () banked
  7291  002F2A  6F32               	movwf	((wwvRead8BitFrame@yCode))&0ffh
  7292                           	line	591
  7293                           ;wwv.c: 591: if(yCode & (0x04 | 0x08) )
  7294  002F2C  0101               	movlb	1	; () banked
  7295  002F2E  0101               	movlb	1	; () banked
  7296  002F30  5132               	movf	((wwvRead8BitFrame@yCode))&0ffh,w
  7297  002F32  0B0C               	andlw	low(0Ch)
  7298  002F34  B4D8               	btfsc	status,2
  7299  002F36  EF9F  F017         	goto	u4361
  7300  002F3A  EFA1  F017         	goto	u4360
  7301  002F3E                     u4361:
  7302  002F3E  EFA4  F017         	goto	l1334
  7303  002F42                     u4360:
  7304                           	line	592
  7305                           ;wwv.c: 592: return 0;
  7306  002F42  0E00               	movlw	(0)&0ffh
  7307  002F44  EFC4  F017         	goto	l1325
  7308                           	
  7309  002F48                     l1334:		; BSR set to: ?
  7310                           
  7311                           	line	593
  7312                           ;wwv.c: 593: if(yCode & 0x02)
  7313  002F48  0101               	movlb	1	; () banked
  7314                           	
  7315  002F4A  0101               	movlb	1	; () banked
  7316  002F4C  A332               	btfss	((wwvRead8BitFrame@yCode))&0ffh,(1)&7
  7317  002F4E  EFAB  F017         	goto	u4371
  7318  002F52  EFAD  F017         	goto	u4370
  7319  002F56                     u4371:
  7320  002F56  EFB5  F017         	goto	l1335
  7321  002F5A                     u4370:
  7322                           	line	594
  7323                           ;wwv.c: 594: *pResult |= y;
  7324  002F5A  C130  FFE9         	movff	(wwvRead8BitFrame@pResult),fsr0l
  7325  002F5E  C131  FFEA         	movff	(wwvRead8BitFrame@pResult+1),fsr0h
  7326  002F62  0101               	movlb	1	; () banked
  7327  002F64  0101               	movlb	1	; () banked
  7328  002F66  5133               	movf	((wwvRead8BitFrame@y))&0ffh,w
  7329  002F68  12EF               	iorwf	indf0
  7330                           	
  7331  002F6A                     l1335:		; BSR set to: ?
  7332                           
  7333                           	line	581
  7334  002F6A  0101               	movlb	1	; () banked
  7335  002F6C  90D8               	bcf status,0
  7336  002F6E  3333               	rrcf	((wwvRead8BitFrame@y))&0ffh
  7337                           
  7338                           	
  7339  002F70                     l1329:		; BSR set to: ?
  7340                           
  7341  002F70  0101               	movlb	1	; () banked
  7342  002F72  0101               	movlb	1	; () banked
  7343  002F74  6733               	tstfsz	((wwvRead8BitFrame@y))&0ffh
  7344  002F76  EFBF  F017         	goto	u4381
  7345  002F7A  EFC1  F017         	goto	u4380
  7346  002F7E                     u4381:
  7347  002F7E  EF7B  F017         	goto	l1326
  7348  002F82                     u4380:
  7349                           	
  7350  002F82                     l1327:		; BSR set to: ?
  7351                           
  7352                           	line	596
  7353                           ;wwv.c: 595: }
  7354                           ;wwv.c: 596: return 1;
  7355  002F82  0E01               	movlw	(01h)&0ffh
  7356  002F84  EFC4  F017         	goto	l1325
  7357                           	line	598
  7358                           ;wwv.c: 598: }
  7359  002F88                     l1325:
  7360                           			; BSR set to: ?
  7361                           
  7362  002F88  0012               	return
  7363                           	opt stack 0
  7364                           GLOBAL __end_of_wwvRead8BitFrame
  7365  002F8A                     	__end_of_wwvRead8BitFrame:
  7366                           	FNSIZE	_wwvRead8BitFrame,3,2
  7367                           ; =============== function _wwvRead8BitFrame end
                                 s ============
  7368                           
  7369                           	signat	_wwvRead8BitFrame,4217
  7370                           	global	_wwvGetAnyBit
  7371                           	global	??_wwvGetAnyBit
  7372                           	global	?_wwvGetAnyBit
  7373                           
  7374                           ; *************** function _wwvGetAnyBit *******
                                 **********
  7375                           ; Defined at:
  7376                           ;		line 620 in file "wwv.c"
  7377                           ; Parameters:
  7378                           ;		None
  7379                           ; Auto variables:
  7380                           ;		yCode       	       	type: unsigned char 
  7381                           ; Return value:
  7382                           ;		type: unsigned char 
  7383                           ;		size: 1
  7384                           ; Registers used:
  7385                           ;		wreg, status,2, status,0, cstack
  7386                           ; Tracked objects:
  7387                           ;		On entry : 0/0
  7388                           ;		On exit  : 0/0
  7389                           ;		Unchanged: 0/0
  7390                           ; Data sizes:
  7391                           ;		Autos:    0
  7392                           ;		Params:   0
  7393                           ;		Temp:     0
  7394                           ;		Total:    0
  7395                           ; This function calls:
  7396                           ;		_wwvGetBit
  7397                           ; This function is called by:
  7398                           ;		_wwvGetTime
  7399                           ; This function uses a non-reentrant model
  7400                           ; 
  7401                                   psect   text20,class=CODE,space=0,reloc=
                                 2
  7402                           
  7403                           	opt lm
  7404                           	file	"wwv.c"
  7405                           	line	620
  7406  000000                     	__size_of_wwvGetAnyBit	equ	__end_of_wwvGetAnyBi
                                 t-_wwvGetAnyBit
  7407                           ;wwv.c: 619: static UINT8 wwvGetAnyBit(void)
  7408                           ;wwv.c: 620: {
  7409                           	
  7410  0035A0                     _wwvGetAnyBit:		; BSR set to: ?
  7411                           
  7412                           	opt stack 28
  7413                           	line	623
  7414  0035A0  EFDE  F01A         	goto	l1337
  7415                           	
  7416  0035A4                     l1338:		; BSR set to: ?
  7417                           
  7418                           	line	625
  7419                           ;wwv.c: 624: {
  7420                           ;wwv.c: 625: LATA0 = 1;
  7421  0035A4  8089               	bsf	c:(31816/8),(31816)&7	;volatile
  7422                           	line	626
  7423                           ;wwv.c: 626: if(g_yTimedOut)
  7424  0035A6  5009               	movf	((c:9)),c,w	;volatile
  7425  0035A8  B4D8               	btfsc	status,2
  7426  0035AA  EFD9  F01A         	goto	u4391
  7427  0035AE  EFDB  F01A         	goto	u4390
  7428  0035B2                     u4391:
  7429  0035B2  EFDE  F01A         	goto	l1337
  7430  0035B6                     u4390:
  7431                           	line	627
  7432                           ;wwv.c: 627: return 0x08;
  7433  0035B6  0E08               	movlw	(08h)&0ffh
  7434  0035B8  EFEA  F01A         	goto	l1336
  7435                           	line	628
  7436                           	
  7437  0035BC                     l1337:		; BSR set to: ?
  7438                           
  7439                           	line	623
  7440  0035BC  B480               	btfsc	c:(31746/8),(31746)&7	;volatile
  7441  0035BE  EFE3  F01A         	goto	u4401
  7442  0035C2  EFE5  F01A         	goto	u4400
  7443  0035C6                     u4401:
  7444  0035C6  EFD2  F01A         	goto	l1338
  7445  0035CA                     u4400:
  7446                           	
  7447  0035CA                     l1339:		; BSR set to: ?
  7448                           
  7449                           	line	629
  7450                           ;wwv.c: 628: }
  7451                           ;wwv.c: 629: LATA0 = 0;
  7452  0035CA  9089               	bcf	c:(31816/8),(31816)&7	;volatile
  7453                           	line	630
  7454                           ;wwv.c: 630: return wwvGetBit();
  7455  0035CC  EC8D  F011         	call	_wwvGetBit	;wreg free
  7456  0035D0  EFEA  F01A         	goto	l1336
  7457                           	line	632
  7458                           ;wwv.c: 632: }
  7459  0035D4                     l1336:
  7460                           			; BSR set to: ?
  7461                           
  7462  0035D4  0012               	return
  7463                           	opt stack 0
  7464                           GLOBAL __end_of_wwvGetAnyBit
  7465  0035D6                     	__end_of_wwvGetAnyBit:
  7466                           	FNSIZE	_wwvGetAnyBit,0,0
  7467                           ; =============== function _wwvGetAnyBit ends ==
                                 ==========
  7468                           
  7469                           	signat	_wwvGetAnyBit,89
  7470                           	global	_glcdClearScreen
  7471                           	global	??_glcdClearScreen
  7472                           	global	?_glcdClearScreen
  7473                           
  7474                           ; *************** function _glcdClearScreen ****
                                 *************
  7475                           ; Defined at:
  7476                           ;		line 79 in file "glcd.c"
  7477                           ; Parameters:
  7478                           ;		None
  7479                           ; Auto variables:
  7480                           ;		yY          	       	type: unsigned char 
  7481                           ;		yX          	       	type: unsigned char 
  7482                           ;		ySeg        	       	type: unsigned char 
  7483                           ; Return value:
  7484                           ;		type: void 
  7485                           ;		size: 0
  7486                           ; Registers used:
  7487                           ;		wreg, status,2, status,0, cstack
  7488                           ; Tracked objects:
  7489                           ;		On entry : 0/0
  7490                           ;		On exit  : 0/0
  7491                           ;		Unchanged: 0/0
  7492                           ; Data sizes:
  7493                           ;		Autos:    3
  7494                           ;		Params:   0
  7495                           ;		Temp:     2
  7496                           ;		Total:    5
  7497                           ; This function calls:
  7498                           ;		_glcdSetPage
  7499                           ;		_glcdSetCol
  7500                           ;		_glbaseWriteData
  7501                           ; This function is called by:
  7502                           ;		_main
  7503                           ;		_ButtonDown
  7504                           ;		_wwvGetTime
  7505                           ; This function uses a non-reentrant model
  7506                           ; 
  7507                                   psect   text21,class=CODE,space=0,reloc=
                                 2
  7508                           
  7509                           	opt lm
  7510                           	file	"glcd.c"
  7511                           	line	79
  7512  000000                     	__size_of_glcdClearScreen	equ	__end_of_glcdClea
                                 rScreen-_glcdClearScreen
  7513                           ;glcd.c: 78: void glcdClearScreen(void)
  7514                           ;glcd.c: 79: {
  7515                           	
  7516  002ABA                     _glcdClearScreen:		; BSR set to: ?
  7517                           
  7518                           	opt stack 28
  7519                           	line	82
  7520  002ABA  0101               	movlb	1	; () banked
  7521  002ABC  6F33               	movwf	(??_glcdClearScreen+3+0)&0ffh
  7522  002ABE  0E00               	movlw	low(0)
  7523  002AC0  0101               	movlb	1	; () banked
  7524  002AC2  0101               	movlb	1	; () banked
  7525  002AC4  6F32               	movwf	((glcdClearScreen@ySeg))&0ffh
  7526  002AC6  0101               	movlb	1	; () banked
  7527  002AC8  5133               	movf	(??_glcdClearScreen+3+0)&0ffh,w
  7528  002ACA  0E01               	movlw	(02h-1)
  7529  002ACC  0101               	movlb	1	; () banked
  7530  002ACE  0101               	movlb	1	; () banked
  7531  002AD0  6532               	cpfsgt	((glcdClearScreen@ySeg))&0ffh
  7532  002AD2  EF6D  F015         	goto	u4411
  7533  002AD6  EF6F  F015         	goto	u4410
  7534  002ADA                     u4411:
  7535  002ADA  EF71  F015         	goto	l379
  7536  002ADE                     u4410:
  7537  002ADE  EFE6  F015         	goto	l380
  7538                           	line	83
  7539                           	
  7540  002AE2                     l379:		; BSR set to: ?
  7541                           
  7542                           	line	85
  7543                           ;glcd.c: 83: {
  7544                           ;glcd.c: 85: for(yX=0; yX < 8; yX++)
  7545  002AE2  0101               	movlb	1	; () banked
  7546  002AE4  6F33               	movwf	(??_glcdClearScreen+3+0)&0ffh
  7547  002AE6  0E00               	movlw	low(0)
  7548  002AE8  0101               	movlb	1	; () banked
  7549  002AEA  0101               	movlb	1	; () banked
  7550  002AEC  6F31               	movwf	((glcdClearScreen@yX))&0ffh
  7551  002AEE  0101               	movlb	1	; () banked
  7552  002AF0  5133               	movf	(??_glcdClearScreen+3+0)&0ffh,w
  7553  002AF2  0E07               	movlw	(08h-1)
  7554  002AF4  0101               	movlb	1	; () banked
  7555  002AF6  0101               	movlb	1	; () banked
  7556  002AF8  6531               	cpfsgt	((glcdClearScreen@yX))&0ffh
  7557  002AFA  EF81  F015         	goto	u4421
  7558  002AFE  EF83  F015         	goto	u4420
  7559  002B02                     u4421:
  7560  002B02  EF85  F015         	goto	l382
  7561  002B06                     u4420:
  7562  002B06  EFD9  F015         	goto	l383
  7563                           	line	86
  7564                           	
  7565  002B0A                     l382:		; BSR set to: ?
  7566                           
  7567                           	line	87
  7568                           ;glcd.c: 86: {
  7569                           ;glcd.c: 87: glcdSetPage(yX, ySeg);
  7570  002B0A  C132  F144         	movff	(glcdClearScreen@ySeg),0+(?_glcdSetPage+0
                                 1h)
  7571  002B0E  C131  F143         	movff	(glcdClearScreen@yX),(?_glcdSetPage)
  7572  002B12  EC1D  F01B         	call	_glcdSetPage	;wreg free
  7573                           	line	88
  7574                           ;glcd.c: 88: glcdSetCol(0, ySeg);
  7575  002B16  C132  F144         	movff	(glcdClearScreen@ySeg),0+(?_glcdSetCol+01
                                 h)
  7576  002B1A  0101               	movlb	1	; () banked
  7577  002B1C  6F33               	movwf	(??_glcdClearScreen+3+0)&0ffh
  7578  002B1E  0E00               	movlw	low(0)
  7579  002B20  0101               	movlb	1	; () banked
  7580  002B22  0101               	movlb	1	; () banked
  7581  002B24  6F43               	movwf	((?_glcdSetCol))&0ffh
  7582  002B26  0101               	movlb	1	; () banked
  7583  002B28  5133               	movf	(??_glcdClearScreen+3+0)&0ffh,w
  7584  002B2A  EC4D  F01B         	call	_glcdSetCol	;wreg free
  7585                           	line	90
  7586                           ;glcd.c: 90: for (yY = 0; yY < 64; yY++)
  7587  002B2E  0101               	movlb	1	; () banked
  7588  002B30  6F33               	movwf	(??_glcdClearScreen+3+0)&0ffh
  7589  002B32  0E00               	movlw	low(0)
  7590  002B34  0101               	movlb	1	; () banked
  7591  002B36  0101               	movlb	1	; () banked
  7592  002B38  6F30               	movwf	((glcdClearScreen@yY))&0ffh
  7593  002B3A  0101               	movlb	1	; () banked
  7594  002B3C  5133               	movf	(??_glcdClearScreen+3+0)&0ffh,w
  7595  002B3E  0E3F               	movlw	(040h-1)
  7596  002B40  0101               	movlb	1	; () banked
  7597  002B42  0101               	movlb	1	; () banked
  7598  002B44  6530               	cpfsgt	((glcdClearScreen@yY))&0ffh
  7599  002B46  EFA7  F015         	goto	u4431
  7600  002B4A  EFA9  F015         	goto	u4430
  7601  002B4E                     u4431:
  7602  002B4E  EFAB  F015         	goto	l385
  7603  002B52                     u4430:
  7604  002B52  EFCC  F015         	goto	l386
  7605                           	line	91
  7606                           	
  7607  002B56                     l385:		; BSR set to: ?
  7608                           
  7609                           	line	92
  7610                           ;glcd.c: 91: {
  7611                           ;glcd.c: 92: glbaseWriteData(0, 1, ySeg);
  7612  002B56  C132  F148         	movff	(glcdClearScreen@ySeg),0+(?_glbaseWriteDa
                                 ta+02h)
  7613  002B5A  0101               	movlb	1	; () banked
  7614  002B5C  6F33               	movwf	(??_glcdClearScreen+3+0)&0ffh
  7615  002B5E  0E01               	movlw	low(01h)
  7616  002B60  0101               	movlb	1	; () banked
  7617  002B62  0101               	movlb	1	; () banked
  7618  002B64  6F47               	movwf	(0+(?_glbaseWriteData+01h))&0ffh
  7619  002B66  0101               	movlb	1	; () banked
  7620  002B68  5133               	movf	(??_glcdClearScreen+3+0)&0ffh,w
  7621  002B6A  0101               	movlb	1	; () banked
  7622  002B6C  6F34               	movwf	(??_glcdClearScreen+4+0)&0ffh
  7623  002B6E  0E00               	movlw	low(0)
  7624  002B70  0101               	movlb	1	; () banked
  7625  002B72  0101               	movlb	1	; () banked
  7626  002B74  6F46               	movwf	((?_glbaseWriteData))&0ffh
  7627  002B76  0101               	movlb	1	; () banked
  7628  002B78  5134               	movf	(??_glcdClearScreen+4+0)&0ffh,w
  7629  002B7A  EC8F  F01A         	call	_glbaseWriteData	;wreg free
  7630                           	line	90
  7631  002B7E  0101               	movlb	1	; () banked
  7632  002B80  0101               	movlb	1	; () banked
  7633  002B82  2B30               	incf	((glcdClearScreen@yY))&0ffh
  7634  002B84  0E3F               	movlw	(040h-1)
  7635  002B86  0101               	movlb	1	; () banked
  7636  002B88  0101               	movlb	1	; () banked
  7637  002B8A  6530               	cpfsgt	((glcdClearScreen@yY))&0ffh
  7638  002B8C  EFCA  F015         	goto	u4441
  7639  002B90  EFCC  F015         	goto	u4440
  7640  002B94                     u4441:
  7641  002B94  EFAB  F015         	goto	l385
  7642  002B98                     u4440:
  7643                           	
  7644  002B98                     l386:		; BSR set to: ?
  7645                           
  7646                           	line	85
  7647  002B98  0101               	movlb	1	; () banked
  7648  002B9A  0101               	movlb	1	; () banked
  7649  002B9C  2B31               	incf	((glcdClearScreen@yX))&0ffh
  7650  002B9E  0E07               	movlw	(08h-1)
  7651  002BA0  0101               	movlb	1	; () banked
  7652  002BA2  0101               	movlb	1	; () banked
  7653  002BA4  6531               	cpfsgt	((glcdClearScreen@yX))&0ffh
  7654  002BA6  EFD7  F015         	goto	u4451
  7655  002BAA  EFD9  F015         	goto	u4450
  7656  002BAE                     u4451:
  7657  002BAE  EF85  F015         	goto	l382
  7658  002BB2                     u4450:
  7659                           	
  7660  002BB2                     l383:		; BSR set to: ?
  7661                           
  7662                           	line	82
  7663  002BB2  0101               	movlb	1	; () banked
  7664  002BB4  0101               	movlb	1	; () banked
  7665  002BB6  2B32               	incf	((glcdClearScreen@ySeg))&0ffh
  7666  002BB8  0E01               	movlw	(02h-1)
  7667  002BBA  0101               	movlb	1	; () banked
  7668  002BBC  0101               	movlb	1	; () banked
  7669  002BBE  6532               	cpfsgt	((glcdClearScreen@ySeg))&0ffh
  7670  002BC0  EFE4  F015         	goto	u4461
  7671  002BC4  EFE6  F015         	goto	u4460
  7672  002BC8                     u4461:
  7673  002BC8  EF71  F015         	goto	l379
  7674  002BCC                     u4460:
  7675                           	
  7676  002BCC                     l380:		; BSR set to: ?
  7677                           
  7678                           	line	98
  7679                           ;glcd.c: 94: }
  7680                           ;glcd.c: 95: }
  7681                           ;glcd.c: 96: }
  7682                           ;glcd.c: 98: }
  7683  002BCC                     l378:
  7684                           			; BSR set to: ?
  7685                           
  7686  002BCC  0012               	return
  7687                           	opt stack 0
  7688                           GLOBAL __end_of_glcdClearScreen
  7689  002BCE                     	__end_of_glcdClearScreen:
  7690                           	FNSIZE	_glcdClearScreen,5,0
  7691                           ; =============== function _glcdClearScreen ends
                                  ============
  7692                           
  7693                           	signat	_glcdClearScreen,88
  7694                           	global	_rtcSetClock
  7695                           	global	??_rtcSetClock
  7696                           	global	?_rtcSetClock
  7697                           
  7698                           ; *************** function _rtcSetClock ********
                                 *********
  7699                           ; Defined at:
  7700                           ;		line 160 in file "rtc.c"
  7701                           ; Parameters:
  7702                           ;		pTime          size:   2offs:   0	type: PTR s
                                 truct _TIMESTRUCT; Largest target is 7
  7703                           ;		 -> rtcInit@tt(7), main@tt(7), 
  7704                           ; Auto variables:
  7705                           ;		None
  7706                           ; Return value:
  7707                           ;		type: void 
  7708                           ;		size: 0
  7709                           ; Registers used:
  7710                           ;		wreg, fsr0l, fsr0h, status,2, status,0, cstac
                                 k
  7711                           ; Tracked objects:
  7712                           ;		On entry : 0/0
  7713                           ;		On exit  : 0/0
  7714                           ;		Unchanged: 0/0
  7715                           ; Data sizes:
  7716                           ;		Autos:    0
  7717                           ;		Params:   2
  7718                           ;		Temp:     1
  7719                           ;		Total:    3
  7720                           ; This function calls:
  7721                           ;		_rtcWriteRam
  7722                           ; This function is called by:
  7723                           ;		_main
  7724                           ;		_rtcInit
  7725                           ; This function uses a non-reentrant model
  7726                           ; 
  7727                                   psect   text22,class=CODE,space=0,reloc=
                                 2
  7728                           
  7729                           	opt lm
  7730                           	file	"rtc.c"
  7731                           	line	160
  7732  000000                     	__size_of_rtcSetClock	equ	__end_of_rtcSetClock-
                                 _rtcSetClock
  7733                           ;rtc.c: 159: void rtcSetClock(TIMESTRUCT *pTime)
  7734                           ;rtc.c: 160: {
  7735                           	
  7736  0025EE                     _rtcSetClock:		; BSR set to: ?
  7737                           
  7738                           	opt stack 28
  7739                           	line	162
  7740                           ;rtc.c: 162: rtcWriteRam( (UINT8)0x80, pTime->se
                                 c);
  7741  0025EE  C112  FFE9         	movff	(rtcSetClock@pTime),fsr0l
  7742  0025F2  C113  FFEA         	movff	(rtcSetClock@pTime+1),fsr0h
  7743  0025F6  50EF               	movf	indf0,w
  7744  0025F8  0101               	movlb	1	; () banked
  7745  0025FA  0101               	movlb	1	; () banked
  7746  0025FC  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  7747  0025FE  0101               	movlb	1	; () banked
  7748  002600  6F14               	movwf	(??_rtcSetClock+0+0)&0ffh
  7749  002602  0E80               	movlw	low(080h)
  7750  002604  0101               	movlb	1	; () banked
  7751  002606  0101               	movlb	1	; () banked
  7752  002608  6F35               	movwf	((?_rtcWriteRam))&0ffh
  7753  00260A  0101               	movlb	1	; () banked
  7754  00260C  5114               	movf	(??_rtcSetClock+0+0)&0ffh,w
  7755  00260E  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  7756                           	line	163
  7757                           ;rtc.c: 163: rtcWriteRam( (UINT8)0x82, pTime->mi
                                 n);
  7758  002612  0E01               	movlw	low(01h)
  7759  002614  0101               	movlb	1	; () banked
  7760  002616  0101               	movlb	1	; () banked
  7761  002618  2512               	addwf	((rtcSetClock@pTime))&0ffh,w
  7762  00261A  6EE9               	movwf	c:fsr0l
  7763  00261C  0E00               	movlw	high(01h)
  7764  00261E  0101               	movlb	1	; () banked
  7765  002620  0101               	movlb	1	; () banked
  7766  002622  2113               	addwfc	((rtcSetClock@pTime+1))&0ffh,w
  7767  002624  6EEA               	movwf	1+c:fsr0l
  7768  002626  50EF               	movf	indf0,w
  7769  002628  0101               	movlb	1	; () banked
  7770  00262A  0101               	movlb	1	; () banked
  7771  00262C  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  7772  00262E  0101               	movlb	1	; () banked
  7773  002630  6F14               	movwf	(??_rtcSetClock+0+0)&0ffh
  7774  002632  0E82               	movlw	low(082h)
  7775  002634  0101               	movlb	1	; () banked
  7776  002636  0101               	movlb	1	; () banked
  7777  002638  6F35               	movwf	((?_rtcWriteRam))&0ffh
  7778  00263A  0101               	movlb	1	; () banked
  7779  00263C  5114               	movf	(??_rtcSetClock+0+0)&0ffh,w
  7780  00263E  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  7781                           	line	164
  7782                           ;rtc.c: 164: rtcWriteRam( (UINT8)0x84, pTime->hr
                                 );
  7783  002642  0E02               	movlw	low(02h)
  7784  002644  0101               	movlb	1	; () banked
  7785  002646  0101               	movlb	1	; () banked
  7786  002648  2512               	addwf	((rtcSetClock@pTime))&0ffh,w
  7787  00264A  6EE9               	movwf	c:fsr0l
  7788  00264C  0E00               	movlw	high(02h)
  7789  00264E  0101               	movlb	1	; () banked
  7790  002650  0101               	movlb	1	; () banked
  7791  002652  2113               	addwfc	((rtcSetClock@pTime+1))&0ffh,w
  7792  002654  6EEA               	movwf	1+c:fsr0l
  7793  002656  50EF               	movf	indf0,w
  7794  002658  0101               	movlb	1	; () banked
  7795  00265A  0101               	movlb	1	; () banked
  7796  00265C  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  7797  00265E  0101               	movlb	1	; () banked
  7798  002660  6F14               	movwf	(??_rtcSetClock+0+0)&0ffh
  7799  002662  0E84               	movlw	low(084h)
  7800  002664  0101               	movlb	1	; () banked
  7801  002666  0101               	movlb	1	; () banked
  7802  002668  6F35               	movwf	((?_rtcWriteRam))&0ffh
  7803  00266A  0101               	movlb	1	; () banked
  7804  00266C  5114               	movf	(??_rtcSetClock+0+0)&0ffh,w
  7805  00266E  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  7806                           	line	165
  7807                           ;rtc.c: 165: rtcWriteRam( (UINT8)0x86, pTime->da
                                 te);
  7808  002672  0E03               	movlw	low(03h)
  7809  002674  0101               	movlb	1	; () banked
  7810  002676  0101               	movlb	1	; () banked
  7811  002678  2512               	addwf	((rtcSetClock@pTime))&0ffh,w
  7812  00267A  6EE9               	movwf	c:fsr0l
  7813  00267C  0E00               	movlw	high(03h)
  7814  00267E  0101               	movlb	1	; () banked
  7815  002680  0101               	movlb	1	; () banked
  7816  002682  2113               	addwfc	((rtcSetClock@pTime+1))&0ffh,w
  7817  002684  6EEA               	movwf	1+c:fsr0l
  7818  002686  50EF               	movf	indf0,w
  7819  002688  0101               	movlb	1	; () banked
  7820  00268A  0101               	movlb	1	; () banked
  7821  00268C  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  7822  00268E  0101               	movlb	1	; () banked
  7823  002690  6F14               	movwf	(??_rtcSetClock+0+0)&0ffh
  7824  002692  0E86               	movlw	low(086h)
  7825  002694  0101               	movlb	1	; () banked
  7826  002696  0101               	movlb	1	; () banked
  7827  002698  6F35               	movwf	((?_rtcWriteRam))&0ffh
  7828  00269A  0101               	movlb	1	; () banked
  7829  00269C  5114               	movf	(??_rtcSetClock+0+0)&0ffh,w
  7830  00269E  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  7831                           	line	166
  7832                           ;rtc.c: 166: rtcWriteRam( (UINT8)0x88, pTime->mo
                                 nth);
  7833  0026A2  0E04               	movlw	low(04h)
  7834  0026A4  0101               	movlb	1	; () banked
  7835  0026A6  0101               	movlb	1	; () banked
  7836  0026A8  2512               	addwf	((rtcSetClock@pTime))&0ffh,w
  7837  0026AA  6EE9               	movwf	c:fsr0l
  7838  0026AC  0E00               	movlw	high(04h)
  7839  0026AE  0101               	movlb	1	; () banked
  7840  0026B0  0101               	movlb	1	; () banked
  7841  0026B2  2113               	addwfc	((rtcSetClock@pTime+1))&0ffh,w
  7842  0026B4  6EEA               	movwf	1+c:fsr0l
  7843  0026B6  50EF               	movf	indf0,w
  7844  0026B8  0101               	movlb	1	; () banked
  7845  0026BA  0101               	movlb	1	; () banked
  7846  0026BC  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  7847  0026BE  0101               	movlb	1	; () banked
  7848  0026C0  6F14               	movwf	(??_rtcSetClock+0+0)&0ffh
  7849  0026C2  0E88               	movlw	low(088h)
  7850  0026C4  0101               	movlb	1	; () banked
  7851  0026C6  0101               	movlb	1	; () banked
  7852  0026C8  6F35               	movwf	((?_rtcWriteRam))&0ffh
  7853  0026CA  0101               	movlb	1	; () banked
  7854  0026CC  5114               	movf	(??_rtcSetClock+0+0)&0ffh,w
  7855  0026CE  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  7856                           	line	167
  7857                           ;rtc.c: 167: rtcWriteRam( (UINT8)0x8A, pTime->da
                                 y);
  7858  0026D2  0E05               	movlw	low(05h)
  7859  0026D4  0101               	movlb	1	; () banked
  7860  0026D6  0101               	movlb	1	; () banked
  7861  0026D8  2512               	addwf	((rtcSetClock@pTime))&0ffh,w
  7862  0026DA  6EE9               	movwf	c:fsr0l
  7863  0026DC  0E00               	movlw	high(05h)
  7864  0026DE  0101               	movlb	1	; () banked
  7865  0026E0  0101               	movlb	1	; () banked
  7866  0026E2  2113               	addwfc	((rtcSetClock@pTime+1))&0ffh,w
  7867  0026E4  6EEA               	movwf	1+c:fsr0l
  7868  0026E6  50EF               	movf	indf0,w
  7869  0026E8  0101               	movlb	1	; () banked
  7870  0026EA  0101               	movlb	1	; () banked
  7871  0026EC  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  7872  0026EE  0101               	movlb	1	; () banked
  7873  0026F0  6F14               	movwf	(??_rtcSetClock+0+0)&0ffh
  7874  0026F2  0E8A               	movlw	low(08Ah)
  7875  0026F4  0101               	movlb	1	; () banked
  7876  0026F6  0101               	movlb	1	; () banked
  7877  0026F8  6F35               	movwf	((?_rtcWriteRam))&0ffh
  7878  0026FA  0101               	movlb	1	; () banked
  7879  0026FC  5114               	movf	(??_rtcSetClock+0+0)&0ffh,w
  7880  0026FE  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  7881                           	line	168
  7882                           ;rtc.c: 168: rtcWriteRam( (UINT8)0x8C, pTime->ye
                                 ar);
  7883  002702  0E06               	movlw	low(06h)
  7884  002704  0101               	movlb	1	; () banked
  7885  002706  0101               	movlb	1	; () banked
  7886  002708  2512               	addwf	((rtcSetClock@pTime))&0ffh,w
  7887  00270A  6EE9               	movwf	c:fsr0l
  7888  00270C  0E00               	movlw	high(06h)
  7889  00270E  0101               	movlb	1	; () banked
  7890  002710  0101               	movlb	1	; () banked
  7891  002712  2113               	addwfc	((rtcSetClock@pTime+1))&0ffh,w
  7892  002714  6EEA               	movwf	1+c:fsr0l
  7893  002716  50EF               	movf	indf0,w
  7894  002718  0101               	movlb	1	; () banked
  7895  00271A  0101               	movlb	1	; () banked
  7896  00271C  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  7897  00271E  0101               	movlb	1	; () banked
  7898  002720  6F14               	movwf	(??_rtcSetClock+0+0)&0ffh
  7899  002722  0E8C               	movlw	low(08Ch)
  7900  002724  0101               	movlb	1	; () banked
  7901  002726  0101               	movlb	1	; () banked
  7902  002728  6F35               	movwf	((?_rtcWriteRam))&0ffh
  7903  00272A  0101               	movlb	1	; () banked
  7904  00272C  5114               	movf	(??_rtcSetClock+0+0)&0ffh,w
  7905  00272E  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  7906                           	line	170
  7907                           ;rtc.c: 170: }
  7908  002732                     l862:
  7909                           			; BSR set to: ?
  7910                           
  7911  002732  0012               	return
  7912                           	opt stack 0
  7913                           GLOBAL __end_of_rtcSetClock
  7914  002734                     	__end_of_rtcSetClock:
  7915                           	FNSIZE	_rtcSetClock,1,2
  7916                           ; =============== function _rtcSetClock ends ===
                                 =========
  7917                           
  7918                           	signat	_rtcSetClock,4216
  7919                           	global	_rtcSaveLastSync
  7920                           	global	??_rtcSaveLastSync
  7921                           	global	?_rtcSaveLastSync
  7922                           
  7923                           ; *************** function _rtcSaveLastSync ****
                                 *************
  7924                           ; Defined at:
  7925                           ;		line 338 in file "rtc.c"
  7926                           ; Parameters:
  7927                           ;		pt             size:   2offs:   0	type: PTR s
                                 truct _TIMESTRUCT; Largest target is 7
  7928                           ;		 -> rtcInit@tt(7), main@tt(7), 
  7929                           ;		ySet           size:   1offs:   2	type: unsig
                                 ned char 
  7930                           ; Auto variables:
  7931                           ;		None
  7932                           ; Return value:
  7933                           ;		type: void 
  7934                           ;		size: 0
  7935                           ; Registers used:
  7936                           ;		wreg, fsr0l, fsr0h, status,2, status,0, cstac
                                 k
  7937                           ; Tracked objects:
  7938                           ;		On entry : 0/0
  7939                           ;		On exit  : 0/0
  7940                           ;		Unchanged: 0/0
  7941                           ; Data sizes:
  7942                           ;		Autos:    0
  7943                           ;		Params:   3
  7944                           ;		Temp:     1
  7945                           ;		Total:    4
  7946                           ; This function calls:
  7947                           ;		_rtcWriteRam
  7948                           ; This function is called by:
  7949                           ;		_rtcInit
  7950                           ;		_wwvGetTime
  7951                           ; This function uses a non-reentrant model
  7952                           ; 
  7953                                   psect   text23,class=CODE,space=0,reloc=
                                 2
  7954                           
  7955                           	opt lm
  7956                           	file	"rtc.c"
  7957                           	line	338
  7958  000000                     	__size_of_rtcSaveLastSync	equ	__end_of_rtcSaveL
                                 astSync-_rtcSaveLastSync
  7959                           ;rtc.c: 337: void rtcSaveLastSync(TIMESTRUCT *pt
                                 , UINT8 ySet)
  7960                           ;rtc.c: 338: {
  7961                           	
  7962  002180                     _rtcSaveLastSync:		; BSR set to: ?
  7963                           
  7964                           	opt stack 28
  7965                           	line	339
  7966  002180  0101               	movlb	1	; () banked
  7967  002182  0101               	movlb	1	; () banked
  7968  002184  5132               	movf	((rtcSaveLastSync@ySet))&0ffh,w
  7969  002186  B4D8               	btfsc	status,2
  7970  002188  EFC8  F010         	goto	u4471
  7971  00218C  EFCA  F010         	goto	u4470
  7972  002190                     u4471:
  7973  002190  EF2C  F011         	goto	l874
  7974  002194                     u4470:
  7975                           	line	341
  7976                           ;rtc.c: 340: {
  7977                           ;rtc.c: 341: rtcWriteRam((UINT8)0xCE, pt->month)
                                 ;
  7978  002194  0E04               	movlw	low(04h)
  7979  002196  0101               	movlb	1	; () banked
  7980  002198  0101               	movlb	1	; () banked
  7981  00219A  2530               	addwf	((rtcSaveLastSync@pt))&0ffh,w
  7982  00219C  6EE9               	movwf	c:fsr0l
  7983  00219E  0E00               	movlw	high(04h)
  7984  0021A0  0101               	movlb	1	; () banked
  7985  0021A2  0101               	movlb	1	; () banked
  7986  0021A4  2131               	addwfc	((rtcSaveLastSync@pt+1))&0ffh,w
  7987  0021A6  6EEA               	movwf	1+c:fsr0l
  7988  0021A8  50EF               	movf	indf0,w
  7989  0021AA  0101               	movlb	1	; () banked
  7990  0021AC  0101               	movlb	1	; () banked
  7991  0021AE  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  7992  0021B0  0101               	movlb	1	; () banked
  7993  0021B2  6F33               	movwf	(??_rtcSaveLastSync+0+0)&0ffh
  7994  0021B4  0ECE               	movlw	low(0CEh)
  7995  0021B6  0101               	movlb	1	; () banked
  7996  0021B8  0101               	movlb	1	; () banked
  7997  0021BA  6F35               	movwf	((?_rtcWriteRam))&0ffh
  7998  0021BC  0101               	movlb	1	; () banked
  7999  0021BE  5133               	movf	(??_rtcSaveLastSync+0+0)&0ffh,w
  8000  0021C0  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  8001                           	line	342
  8002                           ;rtc.c: 342: rtcWriteRam((UINT8)0xD0, pt->date);
  8003  0021C4  0E03               	movlw	low(03h)
  8004  0021C6  0101               	movlb	1	; () banked
  8005  0021C8  0101               	movlb	1	; () banked
  8006  0021CA  2530               	addwf	((rtcSaveLastSync@pt))&0ffh,w
  8007  0021CC  6EE9               	movwf	c:fsr0l
  8008  0021CE  0E00               	movlw	high(03h)
  8009  0021D0  0101               	movlb	1	; () banked
  8010  0021D2  0101               	movlb	1	; () banked
  8011  0021D4  2131               	addwfc	((rtcSaveLastSync@pt+1))&0ffh,w
  8012  0021D6  6EEA               	movwf	1+c:fsr0l
  8013  0021D8  50EF               	movf	indf0,w
  8014  0021DA  0101               	movlb	1	; () banked
  8015  0021DC  0101               	movlb	1	; () banked
  8016  0021DE  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  8017  0021E0  0101               	movlb	1	; () banked
  8018  0021E2  6F33               	movwf	(??_rtcSaveLastSync+0+0)&0ffh
  8019  0021E4  0ED0               	movlw	low(0D0h)
  8020  0021E6  0101               	movlb	1	; () banked
  8021  0021E8  0101               	movlb	1	; () banked
  8022  0021EA  6F35               	movwf	((?_rtcWriteRam))&0ffh
  8023  0021EC  0101               	movlb	1	; () banked
  8024  0021EE  5133               	movf	(??_rtcSaveLastSync+0+0)&0ffh,w
  8025  0021F0  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  8026                           	line	343
  8027                           ;rtc.c: 343: rtcWriteRam((UINT8)0xD2, pt->hr);
  8028  0021F4  0E02               	movlw	low(02h)
  8029  0021F6  0101               	movlb	1	; () banked
  8030  0021F8  0101               	movlb	1	; () banked
  8031  0021FA  2530               	addwf	((rtcSaveLastSync@pt))&0ffh,w
  8032  0021FC  6EE9               	movwf	c:fsr0l
  8033  0021FE  0E00               	movlw	high(02h)
  8034  002200  0101               	movlb	1	; () banked
  8035  002202  0101               	movlb	1	; () banked
  8036  002204  2131               	addwfc	((rtcSaveLastSync@pt+1))&0ffh,w
  8037  002206  6EEA               	movwf	1+c:fsr0l
  8038  002208  50EF               	movf	indf0,w
  8039  00220A  0101               	movlb	1	; () banked
  8040  00220C  0101               	movlb	1	; () banked
  8041  00220E  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  8042  002210  0101               	movlb	1	; () banked
  8043  002212  6F33               	movwf	(??_rtcSaveLastSync+0+0)&0ffh
  8044  002214  0ED2               	movlw	low(0D2h)
  8045  002216  0101               	movlb	1	; () banked
  8046  002218  0101               	movlb	1	; () banked
  8047  00221A  6F35               	movwf	((?_rtcWriteRam))&0ffh
  8048  00221C  0101               	movlb	1	; () banked
  8049  00221E  5133               	movf	(??_rtcSaveLastSync+0+0)&0ffh,w
  8050  002220  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  8051                           	line	344
  8052                           ;rtc.c: 344: rtcWriteRam((UINT8)0xD4, pt->min);
  8053  002224  0E01               	movlw	low(01h)
  8054  002226  0101               	movlb	1	; () banked
  8055  002228  0101               	movlb	1	; () banked
  8056  00222A  2530               	addwf	((rtcSaveLastSync@pt))&0ffh,w
  8057  00222C  6EE9               	movwf	c:fsr0l
  8058  00222E  0E00               	movlw	high(01h)
  8059  002230  0101               	movlb	1	; () banked
  8060  002232  0101               	movlb	1	; () banked
  8061  002234  2131               	addwfc	((rtcSaveLastSync@pt+1))&0ffh,w
  8062  002236  6EEA               	movwf	1+c:fsr0l
  8063  002238  50EF               	movf	indf0,w
  8064  00223A  0101               	movlb	1	; () banked
  8065  00223C  0101               	movlb	1	; () banked
  8066  00223E  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  8067  002240  0101               	movlb	1	; () banked
  8068  002242  6F33               	movwf	(??_rtcSaveLastSync+0+0)&0ffh
  8069  002244  0ED4               	movlw	low(0D4h)
  8070  002246  0101               	movlb	1	; () banked
  8071  002248  0101               	movlb	1	; () banked
  8072  00224A  6F35               	movwf	((?_rtcWriteRam))&0ffh
  8073  00224C  0101               	movlb	1	; () banked
  8074  00224E  5133               	movf	(??_rtcSaveLastSync+0+0)&0ffh,w
  8075  002250  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  8076                           	line	345
  8077                           ;rtc.c: 345: }
  8078  002254  EF8C  F011         	goto	l875
  8079                           	line	346
  8080                           	
  8081  002258                     l874:		; BSR set to: ?
  8082                           
  8083                           	line	348
  8084                           ;rtc.c: 346: else
  8085                           ;rtc.c: 347: {
  8086                           ;rtc.c: 348: rtcWriteRam((UINT8)0xC4, pt->month)
                                 ;
  8087  002258  0E04               	movlw	low(04h)
  8088  00225A  0101               	movlb	1	; () banked
  8089  00225C  0101               	movlb	1	; () banked
  8090  00225E  2530               	addwf	((rtcSaveLastSync@pt))&0ffh,w
  8091  002260  6EE9               	movwf	c:fsr0l
  8092  002262  0E00               	movlw	high(04h)
  8093  002264  0101               	movlb	1	; () banked
  8094  002266  0101               	movlb	1	; () banked
  8095  002268  2131               	addwfc	((rtcSaveLastSync@pt+1))&0ffh,w
  8096  00226A  6EEA               	movwf	1+c:fsr0l
  8097  00226C  50EF               	movf	indf0,w
  8098  00226E  0101               	movlb	1	; () banked
  8099  002270  0101               	movlb	1	; () banked
  8100  002272  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  8101  002274  0101               	movlb	1	; () banked
  8102  002276  6F33               	movwf	(??_rtcSaveLastSync+0+0)&0ffh
  8103  002278  0EC4               	movlw	low(0C4h)
  8104  00227A  0101               	movlb	1	; () banked
  8105  00227C  0101               	movlb	1	; () banked
  8106  00227E  6F35               	movwf	((?_rtcWriteRam))&0ffh
  8107  002280  0101               	movlb	1	; () banked
  8108  002282  5133               	movf	(??_rtcSaveLastSync+0+0)&0ffh,w
  8109  002284  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  8110                           	line	349
  8111                           ;rtc.c: 349: rtcWriteRam((UINT8)0xC6, pt->date);
  8112  002288  0E03               	movlw	low(03h)
  8113  00228A  0101               	movlb	1	; () banked
  8114  00228C  0101               	movlb	1	; () banked
  8115  00228E  2530               	addwf	((rtcSaveLastSync@pt))&0ffh,w
  8116  002290  6EE9               	movwf	c:fsr0l
  8117  002292  0E00               	movlw	high(03h)
  8118  002294  0101               	movlb	1	; () banked
  8119  002296  0101               	movlb	1	; () banked
  8120  002298  2131               	addwfc	((rtcSaveLastSync@pt+1))&0ffh,w
  8121  00229A  6EEA               	movwf	1+c:fsr0l
  8122  00229C  50EF               	movf	indf0,w
  8123  00229E  0101               	movlb	1	; () banked
  8124  0022A0  0101               	movlb	1	; () banked
  8125  0022A2  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  8126  0022A4  0101               	movlb	1	; () banked
  8127  0022A6  6F33               	movwf	(??_rtcSaveLastSync+0+0)&0ffh
  8128  0022A8  0EC6               	movlw	low(0C6h)
  8129  0022AA  0101               	movlb	1	; () banked
  8130  0022AC  0101               	movlb	1	; () banked
  8131  0022AE  6F35               	movwf	((?_rtcWriteRam))&0ffh
  8132  0022B0  0101               	movlb	1	; () banked
  8133  0022B2  5133               	movf	(??_rtcSaveLastSync+0+0)&0ffh,w
  8134  0022B4  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  8135                           	line	350
  8136                           ;rtc.c: 350: rtcWriteRam((UINT8)0xC8, pt->hr);
  8137  0022B8  0E02               	movlw	low(02h)
  8138  0022BA  0101               	movlb	1	; () banked
  8139  0022BC  0101               	movlb	1	; () banked
  8140  0022BE  2530               	addwf	((rtcSaveLastSync@pt))&0ffh,w
  8141  0022C0  6EE9               	movwf	c:fsr0l
  8142  0022C2  0E00               	movlw	high(02h)
  8143  0022C4  0101               	movlb	1	; () banked
  8144  0022C6  0101               	movlb	1	; () banked
  8145  0022C8  2131               	addwfc	((rtcSaveLastSync@pt+1))&0ffh,w
  8146  0022CA  6EEA               	movwf	1+c:fsr0l
  8147  0022CC  50EF               	movf	indf0,w
  8148  0022CE  0101               	movlb	1	; () banked
  8149  0022D0  0101               	movlb	1	; () banked
  8150  0022D2  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  8151  0022D4  0101               	movlb	1	; () banked
  8152  0022D6  6F33               	movwf	(??_rtcSaveLastSync+0+0)&0ffh
  8153  0022D8  0EC8               	movlw	low(0C8h)
  8154  0022DA  0101               	movlb	1	; () banked
  8155  0022DC  0101               	movlb	1	; () banked
  8156  0022DE  6F35               	movwf	((?_rtcWriteRam))&0ffh
  8157  0022E0  0101               	movlb	1	; () banked
  8158  0022E2  5133               	movf	(??_rtcSaveLastSync+0+0)&0ffh,w
  8159  0022E4  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  8160                           	line	351
  8161                           ;rtc.c: 351: rtcWriteRam((UINT8)0xCA, pt->min);
  8162  0022E8  0E01               	movlw	low(01h)
  8163  0022EA  0101               	movlb	1	; () banked
  8164  0022EC  0101               	movlb	1	; () banked
  8165  0022EE  2530               	addwf	((rtcSaveLastSync@pt))&0ffh,w
  8166  0022F0  6EE9               	movwf	c:fsr0l
  8167  0022F2  0E00               	movlw	high(01h)
  8168  0022F4  0101               	movlb	1	; () banked
  8169  0022F6  0101               	movlb	1	; () banked
  8170  0022F8  2131               	addwfc	((rtcSaveLastSync@pt+1))&0ffh,w
  8171  0022FA  6EEA               	movwf	1+c:fsr0l
  8172  0022FC  50EF               	movf	indf0,w
  8173  0022FE  0101               	movlb	1	; () banked
  8174  002300  0101               	movlb	1	; () banked
  8175  002302  6F36               	movwf	(0+(?_rtcWriteRam+01h))&0ffh
  8176  002304  0101               	movlb	1	; () banked
  8177  002306  6F33               	movwf	(??_rtcSaveLastSync+0+0)&0ffh
  8178  002308  0ECA               	movlw	low(0CAh)
  8179  00230A  0101               	movlb	1	; () banked
  8180  00230C  0101               	movlb	1	; () banked
  8181  00230E  6F35               	movwf	((?_rtcWriteRam))&0ffh
  8182  002310  0101               	movlb	1	; () banked
  8183  002312  5133               	movf	(??_rtcSaveLastSync+0+0)&0ffh,w
  8184  002314  ECA9  F01B         	call	_rtcWriteRam	;wreg free
  8185                           	line	352
  8186                           	
  8187  002318                     l875:		; BSR set to: ?
  8188                           
  8189                           	line	354
  8190                           ;rtc.c: 352: }
  8191                           ;rtc.c: 354: }
  8192  002318                     l873:
  8193                           			; BSR set to: ?
  8194                           
  8195  002318  0012               	return
  8196                           	opt stack 0
  8197                           GLOBAL __end_of_rtcSaveLastSync
  8198  00231A                     	__end_of_rtcSaveLastSync:
  8199                           	FNSIZE	_rtcSaveLastSync,1,3
  8200                           ; =============== function _rtcSaveLastSync ends
                                  ============
  8201                           
  8202                           	signat	_rtcSaveLastSync,8312
  8203                           	global	_glbaseInit
  8204                           	global	??_glbaseInit
  8205                           	global	?_glbaseInit
  8206                           
  8207                           ; *************** function _glbaseInit *********
                                 ********
  8208                           ; Defined at:
  8209                           ;		line 40 in file "glbase.c"
  8210                           ; Parameters:
  8211                           ;		None
  8212                           ; Auto variables:
  8213                           ;		wDelay      	       	type: unsigned int 
  8214                           ; Return value:
  8215                           ;		type: void 
  8216                           ;		size: 0
  8217                           ; Registers used:
  8218                           ;		wreg, status,2, status,0, cstack
  8219                           ; Tracked objects:
  8220                           ;		On entry : 0/0
  8221                           ;		On exit  : 0/0
  8222                           ;		Unchanged: 0/0
  8223                           ; Data sizes:
  8224                           ;		Autos:    0
  8225                           ;		Params:   0
  8226                           ;		Temp:     0
  8227                           ;		Total:    0
  8228                           ; This function calls:
  8229                           ;		_Vdelay_ms
  8230                           ; This function is called by:
  8231                           ;		_glcdInit
  8232                           ; This function uses a non-reentrant model
  8233                           ; 
  8234                                   psect   text24,class=CODE,space=0,reloc=
                                 2
  8235                           
  8236                           	opt lm
  8237                           	file	"glbase.c"
  8238                           	line	40
  8239  000000                     	__size_of_glbaseInit	equ	__end_of_glbaseInit-_g
                                 lbaseInit
  8240                           ;glbase.c: 39: extern void glbaseInit(void)
  8241                           ;glbase.c: 40: {
  8242                           	
  8243  0035D6                     _glbaseInit:		; BSR set to: ?
  8244                           
  8245                           	opt stack 28
  8246                           	line	44
  8247  0035D6  9289               	bcf	c:(31817/8),(31817)&7	;volatile
  8248                           	line	45
  8249                           ;glbase.c: 45: LATB5 = 0;
  8250  0035D8  9A8A               	bcf	c:(31829/8),(31829)&7	;volatile
  8251                           	line	46
  8252                           ;glbase.c: 46: LATB3 = 0;
  8253  0035DA  968A               	bcf	c:(31827/8),(31827)&7	;volatile
  8254                           	line	47
  8255                           ;glbase.c: 47: LATB4 = 1;
  8256  0035DC  888A               	bsf	c:(31828/8),(31828)&7	;volatile
  8257                           	line	48
  8258                           ;glbase.c: 48: LATB0 = 0;
  8259  0035DE  908A               	bcf	c:(31824/8),(31824)&7	;volatile
  8260                           	line	49
  8261                           ;glbase.c: 49: LATB1 = 0;
  8262  0035E0  928A               	bcf	c:(31825/8),(31825)&7	;volatile
  8263                           	line	51
  8264                           ;glbase.c: 51: Vdelay_ms(5);
  8265  0035E2  0E05               	movlw	low(05h)
  8266  0035E4  0101               	movlb	1	; () banked
  8267  0035E6  0101               	movlb	1	; () banked
  8268  0035E8  6F0C               	movwf	((?_Vdelay_ms))&0ffh
  8269  0035EA  0E00               	movlw	high(05h)
  8270  0035EC  0101               	movlb	1	; () banked
  8271  0035EE  6F0D               	movwf	((?_Vdelay_ms+1))&0ffh
  8272  0035F0  EC6A  F018         	call	_Vdelay_ms	;wreg free
  8273                           	line	52
  8274                           ;glbase.c: 52: LATA1 = 1;
  8275  0035F4  8289               	bsf	c:(31817/8),(31817)&7	;volatile
  8276                           	line	53
  8277                           ;glbase.c: 53: Vdelay_ms(5);
  8278  0035F6  0E05               	movlw	low(05h)
  8279  0035F8  0101               	movlb	1	; () banked
  8280  0035FA  0101               	movlb	1	; () banked
  8281  0035FC  6F0C               	movwf	((?_Vdelay_ms))&0ffh
  8282  0035FE  0E00               	movlw	high(05h)
  8283  003600  0101               	movlb	1	; () banked
  8284  003602  6F0D               	movwf	((?_Vdelay_ms+1))&0ffh
  8285  003604  EC6A  F018         	call	_Vdelay_ms	;wreg free
  8286                           	line	55
  8287                           ;glbase.c: 55: }
  8288  003608                     l179:
  8289                           			; BSR set to: ?
  8290                           
  8291  003608  0012               	return
  8292                           	opt stack 0
  8293                           GLOBAL __end_of_glbaseInit
  8294  00360A                     	__end_of_glbaseInit:
  8295                           	FNSIZE	_glbaseInit,0,0
  8296                           ; =============== function _glbaseInit ends ====
                                 ========
  8297                           
  8298                           	signat	_glbaseInit,88
  8299                           	global	_strcpy
  8300                           	global	??_strcpy
  8301                           	global	?_strcpy
  8302                           
  8303                           ; *************** function _strcpy *************
                                 ****
  8304                           ; Defined at:
  8305                           ;		line 10 in file "C:\Program Files\HI-TECH Sof
                                 tware\PICC-18\PRO\9.66\sources\strcpy.c"
  8306                           ; Parameters:
  8307                           ;		to             size:   2offs:   0	type: PTR u
                                 nsigned char ; Largest target is 32
  8308                           ;		 -> DisplayTime@sz(32), 
  8309                           ;		from           size:   2offs:   2	type: PTR c
                                 onst unsigned char ; Largest target is 120
  8310                           ;		 -> cszMonth(120), cszDay(77), 
  8311                           ; Auto variables:
  8312                           ;		cp          	       	type: PTR unsigned char 
                                 ; Largest target is 32
  8313                           ;		 -> DisplayTime@sz(32), 
  8314                           ; Return value:
  8315                           ;		type: PTR unsigned char 
  8316                           ;		size: 2
  8317                           ; Registers used:
  8318                           ;		wreg, fsr0l, fsr0h, status,2, status,0, tblpt
                                 rl, tblptrh, tblptru, tablat
  8319                           ; Tracked objects:
  8320                           ;		On entry : 0/0
  8321                           ;		On exit  : 0/0
  8322                           ;		Unchanged: 0/0
  8323                           ; Data sizes:
  8324                           ;		Autos:    2
  8325                           ;		Params:   4
  8326                           ;		Temp:     0
  8327                           ;		Total:    6
  8328                           ; This function calls:
  8329                           ; This function is called by:
  8330                           ;		_DisplayTime
  8331                           ;		_MakeDateString
  8332                           ; This function uses a non-reentrant model
  8333                           ; 
  8334                                   psect   text25,class=CODE,space=0,reloc=
                                 2
  8335                           
  8336                           	opt lm
  8337                           	file	"C:\Program Files\HI-TECH Software\PICC-18
                                 \PRO\9.66\sources\strcpy.c"
  8338                           	line	10
  8339  000000                     	__size_of_strcpy	equ	__end_of_strcpy-_strcpy
  8340                           	
  8341  003430                     _strcpy:		; BSR set to: ?
  8342                           
  8343                           	opt stack 27
  8344                           	line	18
  8345  003430  C143  F147         	movff	(strcpy@to),(strcpy@cp)
  8346  003434  C144  F148         	movff	(strcpy@to+1),(strcpy@cp+1)
  8347                           	line	19
  8348  003438  EF20  F01A         	goto	l1358
  8349                           	
  8350  00343C                     l1359:		; BSR set to: ?
  8351                           
  8352                           	line	20
  8353  00343C  EF20  F01A         	goto	l1358
  8354                           	
  8355  003440                     l1358:		; BSR set to: ?
  8356                           
  8357                           	line	19
  8358  003440  0101               	movlb	1	; () banked
  8359  003442  C145  FFF6         	movff	(strcpy@from),tblptrl
  8360  003446  0101               	movlb	1	; () banked
  8361  003448  C146  FFF7         	movff	(strcpy@from+1),tblptrh
  8362  00344C  0101               	movlb	1	; () banked
  8363  00344E  0101               	movlb	1	; () banked
  8364  003450  4B45               	infsnz	((strcpy@from))&0ffh
  8365  003452  2B46               	incf	((strcpy@from+1))&0ffh
  8366  003454  0101               	movlb	1	; () banked
  8367  003456  C147  FFE9         	movff	(strcpy@cp),fsr0l
  8368  00345A  0101               	movlb	1	; () banked
  8369  00345C  C148  FFEA         	movff	(strcpy@cp+1),fsr0h
  8370  003460  0101               	movlb	1	; () banked
  8371  003462  0101               	movlb	1	; () banked
  8372  003464  4B47               	infsnz	((strcpy@cp))&0ffh
  8373  003466  2B48               	incf	((strcpy@cp+1))&0ffh
  8374  003468  0008               	tblrd	*
  8375                           	
  8376  00346A  CFF5 FFEF          	movff	tablat,indf0
  8377  00346E  50EF               	movf	indf0,w
  8378  003470  A4D8               	btfss	status,2
  8379  003472  EF3D  F01A         	goto	u4481
  8380  003476  EF3F  F01A         	goto	u4480
  8381  00347A                     u4481:
  8382  00347A  EF1E  F01A         	goto	l1359
  8383  00347E                     u4480:
  8384                           	
  8385  00347E                     l1360:		; BSR set to: ?
  8386                           
  8387                           	line	21
  8388  00347E  EF41  F01A         	goto	l1357
  8389                           	line	22
  8390  003482                     l1357:
  8391                           			; BSR set to: ?
  8392                           
  8393  003482  0012               	return
  8394                           	opt stack 0
  8395                           GLOBAL __end_of_strcpy
  8396  003484                     	__end_of_strcpy:
  8397                           	FNSIZE	_strcpy,2,4
  8398                           ; =============== function _strcpy ends ========
                                 ====
  8399                           
  8400                           	signat	_strcpy,8314
  8401                           	global	_wwvGetBit
  8402                           	global	??_wwvGetBit
  8403                           	global	?_wwvGetBit
  8404                           
  8405                           ; *************** function _wwvGetBit **********
                                 *******
  8406                           ; Defined at:
  8407                           ;		line 444 in file "wwv.c"
  8408                           ; Parameters:
  8409                           ;		None
  8410                           ; Auto variables:
  8411                           ;		yHighMax    	       	type: const unsigned cha
                                 r 
  8412                           ;		yHighMin    	       	type: const unsigned cha
                                 r 
  8413                           ;		yLowMax     	       	type: const unsigned cha
                                 r 
  8414                           ;		yLowMin     	       	type: const unsigned cha
                                 r 
  8415                           ;		ySyncMin    	       	type: const unsigned cha
                                 r 
  8416                           ;		ySyncMax    	       	type: const unsigned cha
                                 r 
  8417                           ;		y25Count    	       	type: unsigned char 
  8418                           ; Return value:
  8419                           ;		type: unsigned char 
  8420                           ;		size: 1
  8421                           ; Registers used:
  8422                           ;		wreg, status,2, status,0
  8423                           ; Tracked objects:
  8424                           ;		On entry : 0/0
  8425                           ;		On exit  : 0/0
  8426                           ;		Unchanged: 0/0
  8427                           ; Data sizes:
  8428                           ;		Autos:    7
  8429                           ;		Params:   0
  8430                           ;		Temp:     1
  8431                           ;		Total:    8
  8432                           ; This function calls:
  8433                           ;		Nothing
  8434                           ; This function is called by:
  8435                           ;		_wwvGetSyncBit
  8436                           ;		_wwvRead8BitFrame
  8437                           ;		_wwvGetAnyBit
  8438                           ; This function uses a non-reentrant model
  8439                           ; 
  8440                                   psect   text26,class=CODE,space=0,reloc=
                                 2
  8441                           
  8442                           	opt lm
  8443                           	file	"wwv.c"
  8444                           	line	444
  8445  000000                     	__size_of_wwvGetBit	equ	__end_of_wwvGetBit-_wwv
                                 GetBit
  8446                           ;wwv.c: 443: static UINT8 wwvGetBit(void)
  8447                           ;wwv.c: 444: {
  8448                           	
  8449  00231A                     _wwvGetBit:		; BSR set to: ?
  8450                           
  8451                           	opt stack 27
  8452                           	line	447
  8453  00231A  0101               	movlb	1	; () banked
  8454  00231C  6F3C               	movwf	(??_wwvGetBit+7+0)&0ffh
  8455  00231E  0E07               	movlw	low(07h)
  8456  002320  0101               	movlb	1	; () banked
  8457  002322  0101               	movlb	1	; () banked
  8458  002324  6F38               	movwf	((wwvGetBit@yLowMin))&0ffh
  8459  002326  0101               	movlb	1	; () banked
  8460  002328  513C               	movf	(??_wwvGetBit+7+0)&0ffh,w
  8461                           	line	448
  8462                           ;wwv.c: 448: const UINT8 yLowMax = 9;
  8463  00232A  0101               	movlb	1	; () banked
  8464  00232C  6F3C               	movwf	(??_wwvGetBit+7+0)&0ffh
  8465  00232E  0E09               	movlw	low(09h)
  8466  002330  0101               	movlb	1	; () banked
  8467  002332  0101               	movlb	1	; () banked
  8468  002334  6F37               	movwf	((wwvGetBit@yLowMax))&0ffh
  8469  002336  0101               	movlb	1	; () banked
  8470  002338  513C               	movf	(??_wwvGetBit+7+0)&0ffh,w
  8471                           	line	449
  8472                           ;wwv.c: 449: const UINT8 yHighMin = 19;
  8473  00233A  0101               	movlb	1	; () banked
  8474  00233C  6F3C               	movwf	(??_wwvGetBit+7+0)&0ffh
  8475  00233E  0E13               	movlw	low(013h)
  8476  002340  0101               	movlb	1	; () banked
  8477  002342  0101               	movlb	1	; () banked
  8478  002344  6F36               	movwf	((wwvGetBit@yHighMin))&0ffh
  8479  002346  0101               	movlb	1	; () banked
  8480  002348  513C               	movf	(??_wwvGetBit+7+0)&0ffh,w
  8481                           	line	450
  8482                           ;wwv.c: 450: const UINT8 yHighMax = 21;
  8483  00234A  0101               	movlb	1	; () banked
  8484  00234C  6F3C               	movwf	(??_wwvGetBit+7+0)&0ffh
  8485  00234E  0E15               	movlw	low(015h)
  8486  002350  0101               	movlb	1	; () banked
  8487  002352  0101               	movlb	1	; () banked
  8488  002354  6F35               	movwf	((wwvGetBit@yHighMax))&0ffh
  8489  002356  0101               	movlb	1	; () banked
  8490  002358  513C               	movf	(??_wwvGetBit+7+0)&0ffh,w
  8491                           	line	451
  8492                           ;wwv.c: 451: const UINT8 ySyncMin = 31;
  8493  00235A  0101               	movlb	1	; () banked
  8494  00235C  6F3C               	movwf	(??_wwvGetBit+7+0)&0ffh
  8495  00235E  0E1F               	movlw	low(01Fh)
  8496  002360  0101               	movlb	1	; () banked
  8497  002362  0101               	movlb	1	; () banked
  8498  002364  6F39               	movwf	((wwvGetBit@ySyncMin))&0ffh
  8499  002366  0101               	movlb	1	; () banked
  8500  002368  513C               	movf	(??_wwvGetBit+7+0)&0ffh,w
  8501                           	line	452
  8502                           ;wwv.c: 452: const UINT8 ySyncMax = 33;
  8503  00236A  0101               	movlb	1	; () banked
  8504  00236C  6F3C               	movwf	(??_wwvGetBit+7+0)&0ffh
  8505  00236E  0E21               	movlw	low(021h)
  8506  002370  0101               	movlb	1	; () banked
  8507  002372  0101               	movlb	1	; () banked
  8508  002374  6F3A               	movwf	((wwvGetBit@ySyncMax))&0ffh
  8509  002376  0101               	movlb	1	; () banked
  8510  002378  513C               	movf	(??_wwvGetBit+7+0)&0ffh,w
  8511                           	line	454
  8512                           ;wwv.c: 454: y25Count = 0;
  8513  00237A  0101               	movlb	1	; () banked
  8514  00237C  6F3C               	movwf	(??_wwvGetBit+7+0)&0ffh
  8515  00237E  0E00               	movlw	low(0)
  8516  002380  0101               	movlb	1	; () banked
  8517  002382  0101               	movlb	1	; () banked
  8518  002384  6F3B               	movwf	((wwvGetBit@y25Count))&0ffh
  8519  002386  0101               	movlb	1	; () banked
  8520  002388  513C               	movf	(??_wwvGetBit+7+0)&0ffh,w
  8521                           	line	455
  8522                           ;wwv.c: 455: while(1)
  8523                           	
  8524  00238A                     l1308:		; BSR set to: ?
  8525                           
  8526                           	line	457
  8527                           ;wwv.c: 456: {
  8528                           ;wwv.c: 457: if(RA2)
  8529  00238A  A480               	btfss	c:(31746/8),(31746)&7	;volatile
  8530  00238C  EFCA  F011         	goto	u4491
  8531  002390  EFCC  F011         	goto	u4490
  8532  002394                     u4491:
  8533  002394  EF27  F012         	goto	l1310
  8534  002398                     u4490:
  8535                           	line	459
  8536                           ;wwv.c: 458: {
  8537                           ;wwv.c: 459: LATA0 = 1;
  8538  002398  8089               	bsf	c:(31816/8),(31816)&7	;volatile
  8539                           	line	461
  8540                           ;wwv.c: 461: if( (y25Count >= yLowMin) && (y25Co
                                 unt <= yLowMax) )
  8541  00239A  0101               	movlb	1	; () banked
  8542  00239C  0101               	movlb	1	; () banked
  8543  00239E  5138               	movf	((wwvGetBit@yLowMin))&0ffh,w
  8544  0023A0  0101               	movlb	1	; () banked
  8545  0023A2  0101               	movlb	1	; () banked
  8546  0023A4  5D3B               	subwf	((wwvGetBit@y25Count))&0ffh,w
  8547  0023A6  A0D8               	btfss	status,0
  8548  0023A8  EFD8  F011         	goto	u4501
  8549  0023AC  EFDA  F011         	goto	u4500
  8550  0023B0                     u4501:
  8551  0023B0  EFEA  F011         	goto	l1311
  8552  0023B4                     u4500:
  8553  0023B4  0101               	movlb	1	; () banked
  8554  0023B6  0101               	movlb	1	; () banked
  8555  0023B8  513B               	movf	((wwvGetBit@y25Count))&0ffh,w
  8556  0023BA  0101               	movlb	1	; () banked
  8557  0023BC  0101               	movlb	1	; () banked
  8558  0023BE  5D37               	subwf	((wwvGetBit@yLowMax))&0ffh,w
  8559  0023C0  A0D8               	btfss	status,0
  8560  0023C2  EFE5  F011         	goto	u4511
  8561  0023C6  EFE7  F011         	goto	u4510
  8562  0023CA                     u4511:
  8563  0023CA  EFEA  F011         	goto	l1311
  8564  0023CE                     u4510:
  8565                           	line	462
  8566                           ;wwv.c: 462: return 0x01;
  8567  0023CE  0E01               	movlw	(01h)&0ffh
  8568  0023D0  EF49  F012         	goto	l1306
  8569                           	
  8570  0023D4                     l1311:		; BSR set to: ?
  8571                           
  8572                           	line	463
  8573                           ;wwv.c: 463: if( (y25Count >= yHighMin) && (y25C
                                 ount <= yHighMax) )
  8574  0023D4  0101               	movlb	1	; () banked
  8575  0023D6  0101               	movlb	1	; () banked
  8576  0023D8  5136               	movf	((wwvGetBit@yHighMin))&0ffh,w
  8577  0023DA  0101               	movlb	1	; () banked
  8578  0023DC  0101               	movlb	1	; () banked
  8579  0023DE  5D3B               	subwf	((wwvGetBit@y25Count))&0ffh,w
  8580  0023E0  A0D8               	btfss	status,0
  8581  0023E2  EFF5  F011         	goto	u4521
  8582  0023E6  EFF7  F011         	goto	u4520
  8583  0023EA                     u4521:
  8584  0023EA  EF07  F012         	goto	l1312
  8585  0023EE                     u4520:
  8586  0023EE  0101               	movlb	1	; () banked
  8587  0023F0  0101               	movlb	1	; () banked
  8588  0023F2  513B               	movf	((wwvGetBit@y25Count))&0ffh,w
  8589  0023F4  0101               	movlb	1	; () banked
  8590  0023F6  0101               	movlb	1	; () banked
  8591  0023F8  5D35               	subwf	((wwvGetBit@yHighMax))&0ffh,w
  8592  0023FA  A0D8               	btfss	status,0
  8593  0023FC  EF02  F012         	goto	u4531
  8594  002400  EF04  F012         	goto	u4530
  8595  002404                     u4531:
  8596  002404  EF07  F012         	goto	l1312
  8597  002408                     u4530:
  8598                           	line	464
  8599                           ;wwv.c: 464: return 0x02;
  8600  002408  0E02               	movlw	(02h)&0ffh
  8601  00240A  EF49  F012         	goto	l1306
  8602                           	
  8603  00240E                     l1312:		; BSR set to: ?
  8604                           
  8605                           	line	465
  8606                           ;wwv.c: 465: if( (y25Count >= ySyncMin) && (y25C
                                 ount <= ySyncMax) )
  8607  00240E  0101               	movlb	1	; () banked
  8608  002410  0101               	movlb	1	; () banked
  8609  002412  5139               	movf	((wwvGetBit@ySyncMin))&0ffh,w
  8610  002414  0101               	movlb	1	; () banked
  8611  002416  0101               	movlb	1	; () banked
  8612  002418  5D3B               	subwf	((wwvGetBit@y25Count))&0ffh,w
  8613  00241A  A0D8               	btfss	status,0
  8614  00241C  EF12  F012         	goto	u4541
  8615  002420  EF14  F012         	goto	u4540
  8616  002424                     u4541:
  8617  002424  EF24  F012         	goto	l1313
  8618  002428                     u4540:
  8619  002428  0101               	movlb	1	; () banked
  8620  00242A  0101               	movlb	1	; () banked
  8621  00242C  513B               	movf	((wwvGetBit@y25Count))&0ffh,w
  8622  00242E  0101               	movlb	1	; () banked
  8623  002430  0101               	movlb	1	; () banked
  8624  002432  5D3A               	subwf	((wwvGetBit@ySyncMax))&0ffh,w
  8625  002434  A0D8               	btfss	status,0
  8626  002436  EF1F  F012         	goto	u4551
  8627  00243A  EF21  F012         	goto	u4550
  8628  00243E                     u4551:
  8629  00243E  EF24  F012         	goto	l1313
  8630  002442                     u4550:
  8631                           	line	466
  8632                           ;wwv.c: 466: return 0x04;
  8633  002442  0E04               	movlw	(04h)&0ffh
  8634  002444  EF49  F012         	goto	l1306
  8635                           	
  8636  002448                     l1313:		; BSR set to: ?
  8637                           
  8638                           	line	467
  8639                           ;wwv.c: 467: return 0x08;
  8640  002448  0E08               	movlw	(08h)&0ffh
  8641  00244A  EF49  F012         	goto	l1306
  8642                           	line	468
  8643                           	
  8644  00244E                     l1310:		; BSR set to: ?
  8645                           
  8646                           	line	471
  8647                           ;wwv.c: 468: }
  8648                           ;wwv.c: 471: LATA0 = 0;
  8649  00244E  9089               	bcf	c:(31816/8),(31816)&7	;volatile
  8650                           	line	472
  8651                           ;wwv.c: 472: INTCONbits.TMR0IF = 0;
  8652  002450  94F2               	bcf	((c:4082)),c,2	;volatile
  8653                           	line	473
  8654                           ;wwv.c: 473: TMR0 = 159;
  8655  002452  0E9F               	movlw	low(09Fh)
  8656  002454  6ED6               	movwf	((c:4054)),c	;volatile
  8657  002456  0E00               	movlw	high(09Fh)
  8658  002458  6ED7               	movwf	((c:4054+1)),c	;volatile
  8659                           	line	474
  8660                           ;wwv.c: 474: while(!INTCONbits.TMR0IF)
  8661  00245A  EF2F  F012         	goto	l1314
  8662                           	line	475
  8663                           ;wwv.c: 475: ;
  8664                           	
  8665  00245E                     l1314:		; BSR set to: ?
  8666                           
  8667                           	line	474
  8668                           	
  8669  00245E  A4F2               	btfss	((c:4082)),c,2	;volatile
  8670  002460  EF34  F012         	goto	u4561
  8671  002464  EF36  F012         	goto	u4560
  8672  002468                     u4561:
  8673  002468  EF2F  F012         	goto	l1314
  8674  00246C                     u4560:
  8675                           	
  8676  00246C                     l1316:		; BSR set to: ?
  8677                           
  8678                           	line	477
  8679                           ;wwv.c: 477: if(y25Count++ > ySyncMax)
  8680  00246C  0101               	movlb	1	; () banked
  8681  00246E  0101               	movlb	1	; () banked
  8682  002470  2B3B               	incf	((wwvGetBit@y25Count))&0ffh
  8683  002472  0101               	movlb	1	; () banked
  8684  002474  053B               	decf	((wwvGetBit@y25Count))&0ffh,w
  8685  002476  0101               	movlb	1	; () banked
  8686  002478  0101               	movlb	1	; () banked
  8687  00247A  613A               	cpfslt	((wwvGetBit@ySyncMax))&0ffh
  8688  00247C  EF42  F012         	goto	u4571
  8689  002480  EF44  F012         	goto	u4570
  8690  002484                     u4571:
  8691  002484  EF47  F012         	goto	l1307
  8692  002488                     u4570:
  8693                           	line	478
  8694                           ;wwv.c: 478: return 0x08;
  8695  002488  0E08               	movlw	(08h)&0ffh
  8696  00248A  EF49  F012         	goto	l1306
  8697                           	line	479
  8698                           	
  8699  00248E                     l1307:		; BSR set to: ?
  8700                           
  8701                           	line	455
  8702  00248E  EFC5  F011         	goto	l1308
  8703                           	line	482
  8704                           ;wwv.c: 482: }
  8705  002492                     l1306:
  8706                           			; BSR set to: ?
  8707                           
  8708  002492  0012               	return
  8709                           	opt stack 0
  8710                           GLOBAL __end_of_wwvGetBit
  8711  002494                     	__end_of_wwvGetBit:
  8712                           	FNSIZE	_wwvGetBit,8,0
  8713                           ; =============== function _wwvGetBit ends =====
                                 =======
  8714                           
  8715                           	signat	_wwvGetBit,89
  8716                           	global	_strcat
  8717                           	global	??_strcat
  8718                           	global	?_strcat
  8719                           
  8720                           ; *************** function _strcat *************
                                 ****
  8721                           ; Defined at:
  8722                           ;		line 10 in file "C:\Program Files\HI-TECH Sof
                                 tware\PICC-18\PRO\9.66\sources\strcat.c"
  8723                           ; Parameters:
  8724                           ;		to             size:   2offs:   0	type: PTR u
                                 nsigned char ; Largest target is 32
  8725                           ;		 -> DisplayTime@sz(32), 
  8726                           ;		from           size:   2offs:   2	type: PTR c
                                 onst unsigned char ; Largest target is 8
  8727                           ;		 -> MakeDateString@sz(8), 
  8728                           ; Auto variables:
  8729                           ;		cp          	       	type: PTR unsigned char 
                                 ; Largest target is 32
  8730                           ;		 -> DisplayTime@sz(32), 
  8731                           ; Return value:
  8732                           ;		type: PTR unsigned char 
  8733                           ;		size: 2
  8734                           ; Registers used:
  8735                           ;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, s
                                 tatus,0
  8736                           ; Tracked objects:
  8737                           ;		On entry : 0/0
  8738                           ;		On exit  : 0/0
  8739                           ;		Unchanged: 0/0
  8740                           ; Data sizes:
  8741                           ;		Autos:    2
  8742                           ;		Params:   4
  8743                           ;		Temp:     0
  8744                           ;		Total:    6
  8745                           ; This function calls:
  8746                           ;		Nothing
  8747                           ; This function is called by:
  8748                           ;		_MakeDateString
  8749                           ; This function uses a non-reentrant model
  8750                           ; 
  8751                                   psect   text27,class=CODE,space=0,reloc=
                                 2
  8752                           
  8753                           	opt lm
  8754                           	file	"C:\Program Files\HI-TECH Software\PICC-18
                                 \PRO\9.66\sources\strcat.c"
  8755                           	line	10
  8756  000000                     	__size_of_strcat	equ	__end_of_strcat-_strcat
  8757                           	
  8758  0031C6                     _strcat:		; BSR set to: ?
  8759                           
  8760                           	opt stack 27
  8761                           	line	18
  8762  0031C6  C143  F147         	movff	(strcat@to),(strcat@cp)
  8763  0031CA  C144  F148         	movff	(strcat@to+1),(strcat@cp+1)
  8764                           	line	19
  8765  0031CE  EFED  F018         	goto	l1351
  8766                           	
  8767  0031D2                     l1352:		; BSR set to: ?
  8768                           
  8769                           	line	20
  8770  0031D2  0101               	movlb	1	; () banked
  8771  0031D4  0101               	movlb	1	; () banked
  8772  0031D6  4B47               	infsnz	((strcat@cp))&0ffh
  8773  0031D8  2B48               	incf	((strcat@cp+1))&0ffh
  8774                           	
  8775  0031DA                     l1351:		; BSR set to: ?
  8776                           
  8777                           	line	19
  8778  0031DA  C147  FFE9         	movff	(strcat@cp),fsr0l
  8779  0031DE  C148  FFEA         	movff	(strcat@cp+1),fsr0h
  8780  0031E2  50EF               	movf	indf0,w
  8781  0031E4  A4D8               	btfss	status,2
  8782  0031E6  EFF7  F018         	goto	u4581
  8783  0031EA  EFF9  F018         	goto	u4580
  8784  0031EE                     u4581:
  8785  0031EE  EFE9  F018         	goto	l1352
  8786  0031F2                     u4580:
  8787                           	
  8788  0031F2                     l1353:		; BSR set to: ?
  8789                           
  8790                           	line	21
  8791  0031F2  EFFB  F018         	goto	l1354
  8792                           	line	22
  8793                           	
  8794  0031F6                     l1354:		; BSR set to: ?
  8795                           
  8796                           	line	21
  8797  0031F6  0101               	movlb	1	; () banked
  8798  0031F8  C145  FFE9         	movff	(strcat@from),fsr0l
  8799  0031FC  0101               	movlb	1	; () banked
  8800  0031FE  C146  FFEA         	movff	(strcat@from+1),fsr0h
  8801  003202  0101               	movlb	1	; () banked
  8802  003204  0101               	movlb	1	; () banked
  8803  003206  4B45               	infsnz	((strcat@from))&0ffh
  8804  003208  2B46               	incf	((strcat@from+1))&0ffh
  8805  00320A  0101               	movlb	1	; () banked
  8806  00320C  C147  FFE1         	movff	(strcat@cp),fsr1l
  8807  003210  0101               	movlb	1	; () banked
  8808  003212  C148  FFE2         	movff	(strcat@cp+1),fsr1h
  8809  003216  0101               	movlb	1	; () banked
  8810  003218  0101               	movlb	1	; () banked
  8811  00321A  4B47               	infsnz	((strcat@cp))&0ffh
  8812  00321C  2B48               	incf	((strcat@cp+1))&0ffh
  8813  00321E  CFEF FFE7          	movff	indf0,indf1
  8814  003222  50E7               	movf	indf1,w
  8815  003224  A4D8               	btfss	status,2
  8816  003226  EF17  F019         	goto	u4591
  8817  00322A  EF19  F019         	goto	u4590
  8818  00322E                     u4591:
  8819  00322E  EFF9  F018         	goto	l1353
  8820  003232                     u4590:
  8821                           	
  8822  003232                     l1356:		; BSR set to: ?
  8823                           
  8824                           	line	23
  8825  003232  EF1B  F019         	goto	l1350
  8826                           	line	24
  8827  003236                     l1350:
  8828                           			; BSR set to: ?
  8829                           
  8830  003236  0012               	return
  8831                           	opt stack 0
  8832                           GLOBAL __end_of_strcat
  8833  003238                     	__end_of_strcat:
  8834                           	FNSIZE	_strcat,2,4
  8835                           ; =============== function _strcat ends ========
                                 ====
  8836                           
  8837                           	signat	_strcat,8314
  8838                           	global	_rtcWriteRam
  8839                           	global	??_rtcWriteRam
  8840                           	global	?_rtcWriteRam
  8841                           
  8842                           ; *************** function _rtcWriteRam ********
                                 *********
  8843                           ; Defined at:
  8844                           ;		line 129 in file "rtc.c"
  8845                           ; Parameters:
  8846                           ;		yAddress       size:   1offs:   0	type: unsig
                                 ned char 
  8847                           ;		yData          size:   1offs:   1	type: unsig
                                 ned char 
  8848                           ; Auto variables:
  8849                           ;		None
  8850                           ; Return value:
  8851                           ;		type: void 
  8852                           ;		size: 0
  8853                           ; Registers used:
  8854                           ;		wreg, status,2, status,0, cstack
  8855                           ; Tracked objects:
  8856                           ;		On entry : 0/0
  8857                           ;		On exit  : 0/0
  8858                           ;		Unchanged: 0/0
  8859                           ; Data sizes:
  8860                           ;		Autos:    0
  8861                           ;		Params:   2
  8862                           ;		Temp:     0
  8863                           ;		Total:    2
  8864                           ; This function calls:
  8865                           ;		_spiChipSelect
  8866                           ;		_spiWrite
  8867                           ;		_spiChipDeselect
  8868                           ; This function is called by:
  8869                           ;		_ButtonDown
  8870                           ;		_rtcInit
  8871                           ;		_rtcSetClock
  8872                           ;		_rtcSaveLastSync
  8873                           ;		_rtcBumpLastSync
  8874                           ;		_wwvGetTime
  8875                           ; This function uses a non-reentrant model
  8876                           ; 
  8877                                   psect   text28,class=CODE,space=0,reloc=
                                 2
  8878                           
  8879                           	opt lm
  8880                           	file	"rtc.c"
  8881                           	line	129
  8882  000000                     	__size_of_rtcWriteRam	equ	__end_of_rtcWriteRam-
                                 _rtcWriteRam
  8883                           ;rtc.c: 128: void rtcWriteRam( UINT8 yAddress, U
                                 INT8 yData)
  8884                           ;rtc.c: 129: {
  8885                           	
  8886  003752                     _rtcWriteRam:		; BSR set to: ?
  8887                           
  8888                           	opt stack 27
  8889                           	line	131
  8890  003752  ECBF  F01B         	call	_spiChipSelect	;wreg free
  8891                           	line	132
  8892                           ;rtc.c: 132: spiWrite(yAddress);
  8893  003756  C135  F137         	movff	(rtcWriteRam@yAddress),(?_spiWrite)
  8894  00375A  EC8C  F019         	call	_spiWrite	;wreg free
  8895                           	line	134
  8896                           ;rtc.c: 134: spiWrite(yData);
  8897  00375E  C136  F137         	movff	(rtcWriteRam@yData),(?_spiWrite)
  8898  003762  EC8C  F019         	call	_spiWrite	;wreg free
  8899                           	line	136
  8900                           ;rtc.c: 136: spiChipDeselect();
  8901  003766  ECBB  F01B         	call	_spiChipDeselect	;wreg free
  8902                           	line	138
  8903                           ;rtc.c: 138: }
  8904  00376A                     l861:
  8905                           			; BSR set to: ?
  8906                           
  8907  00376A  0012               	return
  8908                           	opt stack 0
  8909                           GLOBAL __end_of_rtcWriteRam
  8910  00376C                     	__end_of_rtcWriteRam:
  8911                           	FNSIZE	_rtcWriteRam,0,2
  8912                           ; =============== function _rtcWriteRam ends ===
                                 =========
  8913                           
  8914                           	signat	_rtcWriteRam,8312
  8915                           	global	_glcdWriteString
  8916                           	global	??_glcdWriteString
  8917                           	global	?_glcdWriteString
  8918                           
  8919                           ; *************** function _glcdWriteString ****
                                 *************
  8920                           ; Defined at:
  8921                           ;		line 262 in file "glcd.c"
  8922                           ; Parameters:
  8923                           ;		pString        size:   2offs:   0	type: PTR u
                                 nsigned char ; Largest target is 70
  8924                           ;		 -> cszSync(14), wwvGetTime@sz(16), cszLastSy
                                 nc(18), cszBlank(4), 
  8925                           ;		 -> cszSet(4), cszTimeZone(70), cszTZChange(1
                                 8), cszST(28), 
  8926                           ;		 -> cszDT(28), DisplayTime@sz(32), 
  8927                           ; Auto variables:
  8928                           ;		None
  8929                           ; Return value:
  8930                           ;		type: void 
  8931                           ;		size: 0
  8932                           ; Registers used:
  8933                           ;		wreg, fsr0l, fsr0h, status,2, status,0, tblpt
                                 rl, tblptrh, tblptru, tablat, prodl, prodh, csta
                                 ck
  8934                           ; Tracked objects:
  8935                           ;		On entry : 0/0
  8936                           ;		On exit  : 0/0
  8937                           ;		Unchanged: 0/0
  8938                           ; Data sizes:
  8939                           ;		Autos:    0
  8940                           ;		Params:   2
  8941                           ;		Temp:     0
  8942                           ;		Total:    2
  8943                           ; This function calls:
  8944                           ;		_glcdWriteChar
  8945                           ; This function is called by:
  8946                           ;		_DisplayTime
  8947                           ;		_ButtonDown
  8948                           ;		_DrawTZSetting
  8949                           ;		_wwvGetTime
  8950                           ; This function uses a non-reentrant model
  8951                           ; 
  8952                                   psect   text29,class=CODE,space=0,reloc=
                                 2
  8953                           
  8954                           	opt lm
  8955                           	file	"glcd.c"
  8956                           	line	262
  8957  000000                     	__size_of_glcdWriteString	equ	__end_of_glcdWrit
                                 eString-_glcdWriteString
  8958                           ;glcd.c: 261: void glcdWriteString(char * pStrin
                                 g)
  8959                           ;glcd.c: 262: {
  8960                           	
  8961  0032A8                     _glcdWriteString:		; BSR set to: ?
  8962                           
  8963                           	opt stack 27
  8964                           	line	263
  8965  0032A8  EF71  F019         	goto	l402
  8966                           	
  8967  0032AC                     l403:		; BSR set to: ?
  8968                           
  8969                           	line	264
  8970  0032AC  0101               	movlb	1	; () banked
  8971  0032AE  0101               	movlb	1	; () banked
  8972  0032B0  5134               	movf	((glcdWriteString@pString))&0ffh,w
  8973  0032B2  6EF6               	movwf	tblptrl
  8974  0032B4  6EE9               	movwf	fsr0l
  8975  0032B6  0E02               	movlw	high __ramtop-1
  8976  0032B8  6EEA               	movwf	fsr0h
  8977  0032BA  0101               	movlb	1	; () banked
  8978  0032BC  0101               	movlb	1	; () banked
  8979  0032BE  5135               	movf	((glcdWriteString@pString+1))&0ffh,w
  8980  0032C0  64EA               	cpfsgt	fsr0h
  8981  0032C2  D003               	bra	u4607
  8982  0032C4  6EEA               	movwf	fsr0h
  8983  0032C6  50EF               	movf	indf0,w
  8984  0032C8  D003               	bra	u4600
  8985  0032CA                     u4607:
  8986  0032CA  6EF7               	movwf	tblptrh
  8987  0032CC  0008               	tblrd	*
  8988                           	
  8989  0032CE  50F5               	movf	tablat,w
  8990  0032D0                     u4600:
  8991  0032D0  0101               	movlb	1	; () banked
  8992  0032D2  0101               	movlb	1	; () banked
  8993  0032D4  6F36               	movwf	((?_glcdWriteChar))&0ffh
  8994  0032D6  ECC8  F014         	call	_glcdWriteChar	;wreg free
  8995                           ;glcd.c: 264: glcdWriteChar(*pString++);
  8996  0032DA  0101               	movlb	1	; () banked
  8997  0032DC  0101               	movlb	1	; () banked
  8998  0032DE  4B34               	infsnz	((glcdWriteString@pString))&0ffh
  8999  0032E0  2B35               	incf	((glcdWriteString@pString+1))&0ffh
  9000                           	
  9001  0032E2                     l402:		; BSR set to: ?
  9002                           
  9003                           	line	263
  9004  0032E2  0101               	movlb	1	; () banked
  9005  0032E4  0101               	movlb	1	; () banked
  9006  0032E6  5134               	movf	((glcdWriteString@pString))&0ffh,w
  9007  0032E8  6EF6               	movwf	tblptrl
  9008  0032EA  6EE9               	movwf	fsr0l
  9009  0032EC  0E02               	movlw	high __ramtop-1
  9010  0032EE  6EEA               	movwf	fsr0h
  9011  0032F0  0101               	movlb	1	; () banked
  9012  0032F2  0101               	movlb	1	; () banked
  9013  0032F4  5135               	movf	((glcdWriteString@pString+1))&0ffh,w
  9014  0032F6  64EA               	cpfsgt	fsr0h
  9015  0032F8  D003               	bra	u4617
  9016  0032FA  6EEA               	movwf	fsr0h
  9017  0032FC  50EF               	movf	indf0,w
  9018  0032FE  D003               	bra	u4610
  9019  003300                     u4617:
  9020  003300  6EF7               	movwf	tblptrh
  9021  003302  0008               	tblrd	*
  9022                           	
  9023  003304  50F5               	movf	tablat,w
  9024  003306                     u4610:
  9025  003306  0900               	iorlw	0
  9026  003308  A4D8               	btfss	status,2
  9027  00330A  EF89  F019         	goto	u4621
  9028  00330E  EF8B  F019         	goto	u4620
  9029  003312                     u4621:
  9030  003312  EF56  F019         	goto	l403
  9031  003316                     u4620:
  9032                           	
  9033  003316                     l404:		; BSR set to: ?
  9034                           
  9035                           	line	266
  9036                           ;glcd.c: 266: }
  9037  003316                     l401:
  9038                           			; BSR set to: ?
  9039                           
  9040  003316  0012               	return
  9041                           	opt stack 0
  9042                           GLOBAL __end_of_glcdWriteString
  9043  003318                     	__end_of_glcdWriteString:
  9044                           	FNSIZE	_glcdWriteString,0,2
  9045                           ; =============== function _glcdWriteString ends
                                  ============
  9046                           
  9047                           	signat	_glcdWriteString,4216
  9048                           	global	_Vdelay_ms
  9049                           	global	??_Vdelay_ms
  9050                           	global	?_Vdelay_ms
  9051                           
  9052                           ; *************** function _Vdelay_ms **********
                                 *******
  9053                           ; Defined at:
  9054                           ;		line 355 in file "main.c"
  9055                           ; Parameters:
  9056                           ;		wDelay         size:   2offs:   0	type: unsig
                                 ned int 
  9057                           ; Auto variables:
  9058                           ;		wCount      	       	type: unsigned int 
  9059                           ;		_dcnt       	       	type: unsigned char 
  9060                           ; Return value:
  9061                           ;		type: void 
  9062                           ;		size: 0
  9063                           ; Registers used:
  9064                           ;		wreg, status,2, status,0, cstack
  9065                           ; Tracked objects:
  9066                           ;		On entry : 0/0
  9067                           ;		On exit  : 0/0
  9068                           ;		Unchanged: 0/0
  9069                           ; Data sizes:
  9070                           ;		Autos:    3
  9071                           ;		Params:   2
  9072                           ;		Temp:     1
  9073                           ;		Total:    6
  9074                           ; This function calls:
  9075                           ;		___wmul
  9076                           ; This function is called by:
  9077                           ;		_glbaseInit
  9078                           ;		_ButtonDown
  9079                           ; This function uses a non-reentrant model
  9080                           ; 
  9081                                   psect   text30,class=CODE,space=0,reloc=
                                 2
  9082                           
  9083                           	opt lm
  9084                           	file	"main.c"
  9085                           	line	355
  9086  000000                     	__size_of_Vdelay_ms	equ	__end_of_Vdelay_ms-_Vde
                                 lay_ms
  9087                           ;main.c: 354: void Vdelay_ms(UINT16 wDelay)
  9088                           ;main.c: 355: {
  9089                           	
  9090  0030D4                     _Vdelay_ms:		; BSR set to: ?
  9091                           
  9092                           	opt stack 27
  9093                           	line	358
  9094  0030D4  0E00               	movlw	low(0)
  9095  0030D6  0101               	movlb	1	; () banked
  9096  0030D8  0101               	movlb	1	; () banked
  9097  0030DA  6F0E               	movwf	((Vdelay_ms@wCount))&0ffh
  9098  0030DC  0E00               	movlw	high(0)
  9099  0030DE  0101               	movlb	1	; () banked
  9100  0030E0  6F0F               	movwf	((Vdelay_ms@wCount+1))&0ffh
  9101  0030E2  EF88  F018         	goto	l641
  9102                           	line	359
  9103                           	
  9104  0030E6                     l638:		; BSR set to: ?
  9105                           
  9106                           	line	360
  9107                           ;main.c: 359: {
  9108                           ;main.c: 360: { unsigned char _dcnt; _dcnt = (10
                                 0)*((10000000)/(12*1000L)); while(--_dcnt != 0) 
                                 continue; };
  9109  0030E6  0101               	movlb	1	; () banked
  9110  0030E8  6F11               	movwf	(??_Vdelay_ms+3+0)&0ffh
  9111  0030EA  0E64               	movlw	low(064h)
  9112  0030EC  0101               	movlb	1	; () banked
  9113  0030EE  0101               	movlb	1	; () banked
  9114  0030F0  6F10               	movwf	((Vdelay_ms@_dcnt))&0ffh
  9115  0030F2  0101               	movlb	1	; () banked
  9116  0030F4  5111               	movf	(??_Vdelay_ms+3+0)&0ffh,w
  9117  0030F6  EF7F  F018         	goto	l642
  9118                           	
  9119  0030FA                     l643:		; BSR set to: ?
  9120                           
  9121  0030FA  EF7F  F018         	goto	l642
  9122                           	
  9123  0030FE                     l642:		; BSR set to: ?
  9124                           
  9125  0030FE  0101               	movlb	1	; () banked
  9126  003100  0101               	movlb	1	; () banked
  9127  003102  2F10               	decfsz	((Vdelay_ms@_dcnt))&0ffh
  9128                           	
  9129  003104  EF7D  F018         	goto	l643
  9130                           	
  9131  003108                     l644:		; BSR set to: ?
  9132                           
  9133                           	line	358
  9134  003108  0101               	movlb	1	; () banked
  9135  00310A  0101               	movlb	1	; () banked
  9136  00310C  4B0E               	infsnz	((Vdelay_ms@wCount))&0ffh
  9137  00310E  2B0F               	incf	((Vdelay_ms@wCount+1))&0ffh
  9138                           	
  9139  003110                     l641:		; BSR set to: ?
  9140                           
  9141  003110  0E0A               	movlw	low(0Ah)
  9142  003112  0101               	movlb	1	; () banked
  9143  003114  0101               	movlb	1	; () banked
  9144  003116  6F55               	movwf	(0+(?___wmul+02h))&0ffh
  9145  003118  0E00               	movlw	high(0Ah)
  9146  00311A  0101               	movlb	1	; () banked
  9147  00311C  6F56               	movwf	(1+(?___wmul+02h))&0ffh
  9148  00311E  C10C  F153         	movff	(Vdelay_ms@wDelay),(?___wmul)
  9149  003122  C10D  F154         	movff	(Vdelay_ms@wDelay+1),(?___wmul+1)
  9150  003126  ECA9  F018         	call	___wmul	;wreg free
  9151  00312A  0101               	movlb	1	; () banked
  9152  00312C  0101               	movlb	1	; () banked
  9153  00312E  5153               	movf	(0+?___wmul)&0ffh,w
  9154  003130  0101               	movlb	1	; () banked
  9155  003132  0101               	movlb	1	; () banked
  9156  003134  5D0E               	subwf	((Vdelay_ms@wCount))&0ffh,w
  9157  003136  0101               	movlb	1	; () banked
  9158  003138  0101               	movlb	1	; () banked
  9159  00313A  5154               	movf	(1+?___wmul)&0ffh,w
  9160  00313C  0101               	movlb	1	; () banked
  9161  00313E  0101               	movlb	1	; () banked
  9162  003140  590F               	subwfb	((Vdelay_ms@wCount+1))&0ffh,w
  9163  003142  A0D8               	btfss	status,0
  9164  003144  EFA6  F018         	goto	u4631
  9165  003148  EFA8  F018         	goto	u4630
  9166  00314C                     u4631:
  9167  00314C  EF73  F018         	goto	l638
  9168  003150                     u4630:
  9169                           	
  9170  003150                     l639:		; BSR set to: ?
  9171                           
  9172                           	line	363
  9173                           ;main.c: 361: }
  9174                           ;main.c: 363: }
  9175  003150                     l637:
  9176                           			; BSR set to: ?
  9177                           
  9178  003150  0012               	return
  9179                           	opt stack 0
  9180                           GLOBAL __end_of_Vdelay_ms
  9181  003152                     	__end_of_Vdelay_ms:
  9182                           	FNSIZE	_Vdelay_ms,4,2
  9183                           ; =============== function _Vdelay_ms ends =====
                                 =======
  9184                           
  9185                           	signat	_Vdelay_ms,4216
  9186                           	global	_rtcDecToBCD
  9187                           	global	??_rtcDecToBCD
  9188                           	global	?_rtcDecToBCD
  9189                           
  9190                           ; *************** function _rtcDecToBCD ********
                                 *********
  9191                           ; Defined at:
  9192                           ;		line 255 in file "rtc.c"
  9193                           ; Parameters:
  9194                           ;		yNum           size:   1offs:   0	type: unsig
                                 ned char 
  9195                           ; Auto variables:
  9196                           ;		None
  9197                           ; Return value:
  9198                           ;		type: unsigned char 
  9199                           ;		size: 1
  9200                           ; Registers used:
  9201                           ;		wreg, status,2, status,0, cstack
  9202                           ; Tracked objects:
  9203                           ;		On entry : 0/0
  9204                           ;		On exit  : 0/0
  9205                           ;		Unchanged: 0/0
  9206                           ; Data sizes:
  9207                           ;		Autos:    0
  9208                           ;		Params:   1
  9209                           ;		Temp:     2
  9210                           ;		Total:    3
  9211                           ; This function calls:
  9212                           ;		___awmod
  9213                           ;		___awdiv
  9214                           ; This function is called by:
  9215                           ;		_rtc24to12Hour
  9216                           ;		_wwvMakeTimeStruct
  9217                           ; This function uses a non-reentrant model
  9218                           ; 
  9219                                   psect   text31,class=CODE,space=0,reloc=
                                 2
  9220                           
  9221                           	opt lm
  9222                           	file	"rtc.c"
  9223                           	line	255
  9224  000000                     	__size_of_rtcDecToBCD	equ	__end_of_rtcDecToBCD-
                                 _rtcDecToBCD
  9225                           ;rtc.c: 254: UINT8 rtcDecToBCD(UINT8 yNum)
  9226                           ;rtc.c: 255: {
  9227                           	
  9228  0033D6                     _rtcDecToBCD:		; BSR set to: ?
  9229                           
  9230                           	opt stack 27
  9231                           	line	256
  9232  0033D6  0E0A               	movlw	low(0Ah)
  9233  0033D8  0101               	movlb	1	; () banked
  9234  0033DA  0101               	movlb	1	; () banked
  9235  0033DC  6F55               	movwf	(0+(?___awmod+02h))&0ffh
  9236  0033DE  0E00               	movlw	high(0Ah)
  9237  0033E0  0101               	movlb	1	; () banked
  9238  0033E2  6F56               	movwf	(1+(?___awmod+02h))&0ffh
  9239  0033E4  0101               	movlb	1	; () banked
  9240  0033E6  0101               	movlb	1	; () banked
  9241  0033E8  C143  F153         	movff	(rtcDecToBCD@yNum),(?___awmod)
  9242  0033EC  0101               	movlb	1	; () banked
  9243  0033EE  0101               	movlb	1	; () banked
  9244  0033F0  6B54               	clrf	((?___awmod+1))&0ffh
  9245  0033F2  EC9A  F013         	call	___awmod	;wreg free
  9246  0033F6  C153  F144         	movff	0+?___awmod,??_rtcDecToBCD+0+0
  9247  0033FA  C154  F145         	movff	1+?___awmod,??_rtcDecToBCD+0+0+1
  9248  0033FE  0E0A               	movlw	low(0Ah)
  9249  003400  0101               	movlb	1	; () banked
  9250  003402  0101               	movlb	1	; () banked
  9251  003404  6F55               	movwf	(0+(?___awdiv+02h))&0ffh
  9252  003406  0E00               	movlw	high(0Ah)
  9253  003408  0101               	movlb	1	; () banked
  9254  00340A  6F56               	movwf	(1+(?___awdiv+02h))&0ffh
  9255  00340C  0101               	movlb	1	; () banked
  9256  00340E  0101               	movlb	1	; () banked
  9257  003410  C143  F153         	movff	(rtcDecToBCD@yNum),(?___awdiv)
  9258  003414  0101               	movlb	1	; () banked
  9259  003416  0101               	movlb	1	; () banked
  9260  003418  6B54               	clrf	((?___awdiv+1))&0ffh
  9261  00341A  EC4A  F012         	call	___awdiv	;wreg free
  9262  00341E  0101               	movlb	1	; () banked
  9263  003420  0101               	movlb	1	; () banked
  9264  003422  3953               	swapf	(0+?___awdiv)&0ffh,w
  9265  003424  0BF0               	andlw	(0ffh shl 4) & 0ffh
  9266  003426  0101               	movlb	1	; () banked
  9267  003428  2544               	addwf	(??_rtcDecToBCD+0+0)&0ffh,w
  9268  00342A  EF17  F01A         	goto	l865
  9269                           	line	258
  9270                           ;rtc.c: 258: }
  9271  00342E                     l865:
  9272                           			; BSR set to: ?
  9273                           
  9274  00342E  0012               	return
  9275                           	opt stack 0
  9276                           GLOBAL __end_of_rtcDecToBCD
  9277  003430                     	__end_of_rtcDecToBCD:
  9278                           	FNSIZE	_rtcDecToBCD,2,1
  9279                           ; =============== function _rtcDecToBCD ends ===
                                 =========
  9280                           
  9281                           	signat	_rtcDecToBCD,4217
  9282                           	global	_glcdMoveTo
  9283                           	global	??_glcdMoveTo
  9284                           	global	?_glcdMoveTo
  9285                           
  9286                           ; *************** function _glcdMoveTo *********
                                 ********
  9287                           ; Defined at:
  9288                           ;		line 172 in file "glcd.c"
  9289                           ; Parameters:
  9290                           ;		yX             size:   1offs:   0	type: unsig
                                 ned char 
  9291                           ;		yY             size:   1offs:   1	type: unsig
                                 ned char 
  9292                           ; Auto variables:
  9293                           ;		None
  9294                           ; Return value:
  9295                           ;		type: void 
  9296                           ;		size: 0
  9297                           ; Registers used:
  9298                           ;		wreg, status,2, status,0, cstack
  9299                           ; Tracked objects:
  9300                           ;		On entry : 0/0
  9301                           ;		On exit  : 0/0
  9302                           ;		Unchanged: 0/0
  9303                           ; Data sizes:
  9304                           ;		Autos:    0
  9305                           ;		Params:   2
  9306                           ;		Temp:     0
  9307                           ;		Total:    2
  9308                           ; This function calls:
  9309                           ;		_glcdSetCol
  9310                           ;		_glcdSetPage
  9311                           ; This function is called by:
  9312                           ;		_DisplayTime
  9313                           ;		_ButtonDown
  9314                           ;		_DrawTZSetting
  9315                           ;		_wwvGetTime
  9316                           ; This function uses a non-reentrant model
  9317                           ; 
  9318                                   psect   text32,class=CODE,space=0,reloc=
                                 2
  9319                           
  9320                           	opt lm
  9321                           	file	"glcd.c"
  9322                           	line	172
  9323  000000                     	__size_of_glcdMoveTo	equ	__end_of_glcdMoveTo-_g
                                 lcdMoveTo
  9324                           ;glcd.c: 171: void glcdMoveTo(UINT8 yX, UINT8 yY
                                 )
  9325                           ;glcd.c: 172: {
  9326                           	
  9327  0034D2                     _glcdMoveTo:		; BSR set to: ?
  9328                           
  9329                           	opt stack 27
  9330                           	line	175
  9331                           ;glcd.c: 175: s_yLastPage = yY;
  9332  0034D2  C135  F008         	movff	(glcdMoveTo@yY),(c:8)	;volatile
  9333                           	line	176
  9334                           ;glcd.c: 176: if(yX > 63)
  9335  0034D6  0E3F               	movlw	(040h-1)
  9336  0034D8  0101               	movlb	1	; () banked
  9337  0034DA  0101               	movlb	1	; () banked
  9338  0034DC  6534               	cpfsgt	((glcdMoveTo@yX))&0ffh
  9339  0034DE  EF73  F01A         	goto	u4641
  9340  0034E2  EF75  F01A         	goto	u4640
  9341  0034E6                     u4641:
  9342  0034E6  EF7E  F01A         	goto	l391
  9343  0034EA                     u4640:
  9344                           	line	178
  9345                           ;glcd.c: 177: {
  9346                           ;glcd.c: 178: s_yLastSeg = 1;
  9347  0034EA  0E01               	movlw	low(01h)
  9348  0034EC  6E07               	movwf	((c:7)),c	;volatile
  9349                           	line	179
  9350                           ;glcd.c: 179: s_yLastCol = yX - 64;
  9351  0034EE  0101               	movlb	1	; () banked
  9352  0034F0  0101               	movlb	1	; () banked
  9353  0034F2  5134               	movf	((glcdMoveTo@yX))&0ffh,w
  9354  0034F4  0FC0               	addlw	low(0C0h)
  9355  0034F6  6E0A               	movwf	((c:10)),c	;volatile
  9356                           	line	180
  9357                           ;glcd.c: 180: }
  9358  0034F8  EF82  F01A         	goto	l392
  9359                           	line	181
  9360                           	
  9361  0034FC                     l391:		; BSR set to: ?
  9362                           
  9363                           	line	183
  9364                           ;glcd.c: 181: else
  9365                           ;glcd.c: 182: {
  9366                           ;glcd.c: 183: s_yLastSeg = 0;
  9367  0034FC  0E00               	movlw	low(0)
  9368  0034FE  6E07               	movwf	((c:7)),c	;volatile
  9369                           	line	184
  9370                           ;glcd.c: 184: s_yLastCol = yX;
  9371  003500  C134  F00A         	movff	(glcdMoveTo@yX),(c:10)	;volatile
  9372                           	line	185
  9373                           	
  9374  003504                     l392:		; BSR set to: ?
  9375                           
  9376                           	line	187
  9377                           ;glcd.c: 185: }
  9378                           ;glcd.c: 187: glcdSetCol(yX, s_yLastSeg);
  9379  003504  C007 F144          	movff	(c:7),0+(?_glcdSetCol+01h)	;volatile
  9380  003508  C134  F143         	movff	(glcdMoveTo@yX),(?_glcdSetCol)
  9381  00350C  EC4D  F01B         	call	_glcdSetCol	;wreg free
  9382                           	line	188
  9383                           ;glcd.c: 188: glcdSetPage(yY, s_yLastSeg);
  9384  003510  C007 F144          	movff	(c:7),0+(?_glcdSetPage+01h)	;volatile
  9385  003514  C135  F143         	movff	(glcdMoveTo@yY),(?_glcdSetPage)
  9386  003518  EC1D  F01B         	call	_glcdSetPage	;wreg free
  9387                           	line	190
  9388                           ;glcd.c: 190: }
  9389  00351C                     l390:
  9390                           			; BSR set to: ?
  9391                           
  9392  00351C  0012               	return
  9393                           	opt stack 0
  9394                           GLOBAL __end_of_glcdMoveTo
  9395  00351E                     	__end_of_glcdMoveTo:
  9396                           	FNSIZE	_glcdMoveTo,0,2
  9397                           ; =============== function _glcdMoveTo ends ====
                                 ========
  9398                           
  9399                           	signat	_glcdMoveTo,8312
  9400                           	global	_wwvGetWeekDay
  9401                           	global	??_wwvGetWeekDay
  9402                           	global	?_wwvGetWeekDay
  9403                           
  9404                           ; *************** function _wwvGetWeekDay ******
                                 ***********
  9405                           ; Defined at:
  9406                           ;		line 654 in file "wwv.c"
  9407                           ; Parameters:
  9408                           ;		nMonth         size:   2offs:   0	type: int 
  9409                           ;		nDate          size:   2offs:   2	type: int 
  9410                           ;		nYear          size:   2offs:   4	type: int 
  9411                           ; Auto variables:
  9412                           ;		r           	       	type: int 
  9413                           ; Return value:
  9414                           ;		type: unsigned char 
  9415                           ;		size: 1
  9416                           ; Registers used:
  9417                           ;		wreg, status,2, status,0, cstack
  9418                           ; Tracked objects:
  9419                           ;		On entry : 0/0
  9420                           ;		On exit  : 0/0
  9421                           ;		Unchanged: 0/0
  9422                           ; Data sizes:
  9423                           ;		Autos:    2
  9424                           ;		Params:   6
  9425                           ;		Temp:     8
  9426                           ;		Total:   16
  9427                           ; This function calls:
  9428                           ;		___awdiv
  9429                           ;		___wmul
  9430                           ;		___awmod
  9431                           ; This function is called by:
  9432                           ;		_wwvMakeTimeStruct
  9433                           ; This function uses a non-reentrant model
  9434                           ; 
  9435                                   psect   text33,class=CODE,space=0,reloc=
                                 2
  9436                           
  9437                           	opt lm
  9438                           	file	"wwv.c"
  9439                           	line	654
  9440  000000                     	__size_of_wwvGetWeekDay	equ	__end_of_wwvGetWeek
                                 Day-_wwvGetWeekDay
  9441                           ;wwv.c: 653: static UINT8 wwvGetWeekDay(int nMon
                                 th, int nDate, int nYear)
  9442                           ;wwv.c: 654: {
  9443                           	
  9444  001FC4                     _wwvGetWeekDay:		; BSR set to: ?
  9445                           
  9446                           	opt stack 27
  9447                           	line	657
  9448  001FC4  0101               	movlb	1	; () banked
  9449  001FC6  0101               	movlb	1	; () banked
  9450  001FC8  5144               	movf	((wwvGetWeekDay@nMonth+1))&0ffh,w
  9451  001FCA  0A80               	xorlw	80h
  9452  001FCC  0F80               	addlw	-((0)^80h)
  9453  001FCE  0E03               	movlw	03h
  9454  001FD0  B4D8               	btfsc	status,2
  9455  001FD2  5D43               	subwf	((wwvGetWeekDay@nMonth))&0ffh,w
  9456  001FD4  B0D8               	btfsc	status,0
  9457  001FD6  EFEF  F00F         	goto	u4651
  9458  001FDA  EFF1  F00F         	goto	u4650
  9459  001FDE                     u4651:
  9460  001FDE  EF0B  F010         	goto	l1342
  9461  001FE2                     u4650:
  9462                           	line	659
  9463                           ;wwv.c: 658: {
  9464                           ;wwv.c: 659: nMonth = nMonth + 12;
  9465  001FE2  0E0C               	movlw	low(0Ch)
  9466  001FE4  0101               	movlb	1	; () banked
  9467  001FE6  0101               	movlb	1	; () banked
  9468  001FE8  2543               	addwf	((wwvGetWeekDay@nMonth))&0ffh,w
  9469  001FEA  0101               	movlb	1	; () banked
  9470                           	
  9471  001FEC  0101               	movlb	1	; () banked
  9472  001FEE  6F43               	movwf	((wwvGetWeekDay@nMonth))&0ffh
  9473  001FF0  0E00               	movlw	high(0Ch)
  9474  001FF2  0101               	movlb	1	; () banked
  9475  001FF4  0101               	movlb	1	; () banked
  9476  001FF6  2144               	addwfc	((wwvGetWeekDay@nMonth+1))&0ffh,w
  9477  001FF8  0101               	movlb	1	; () banked
  9478  001FFA  6F44               	movwf	1+((wwvGetWeekDay@nMonth))&0ffh
  9479                           	line	660
  9480                           ;wwv.c: 660: nYear = nYear - 1;
  9481  001FFC  0EFF               	movlw	low(-1)
  9482  001FFE  0101               	movlb	1	; () banked
  9483  002000  0101               	movlb	1	; () banked
  9484  002002  2547               	addwf	((wwvGetWeekDay@nYear))&0ffh,w
  9485  002004  0101               	movlb	1	; () banked
  9486                           	
  9487  002006  0101               	movlb	1	; () banked
  9488  002008  6F47               	movwf	((wwvGetWeekDay@nYear))&0ffh
  9489  00200A  0EFF               	movlw	high(-1)
  9490  00200C  0101               	movlb	1	; () banked
  9491  00200E  0101               	movlb	1	; () banked
  9492  002010  2148               	addwfc	((wwvGetWeekDay@nYear+1))&0ffh,w
  9493  002012  0101               	movlb	1	; () banked
  9494  002014  6F48               	movwf	1+((wwvGetWeekDay@nYear))&0ffh
  9495                           	line	661
  9496                           	
  9497  002016                     l1342:		; BSR set to: ?
  9498                           
  9499                           	line	662
  9500                           ;wwv.c: 661: }
  9501                           ;wwv.c: 662: r = (nDate + (2 * nMonth) + (6 * (n
                                 Month + 1) / 10) + nYear + (nYear / 4) - (nYear 
                                 / 100) + (nYear / 400)) % 7;
  9502  002016  0E06               	movlw	low(06h)
  9503  002018  0101               	movlb	1	; () banked
  9504  00201A  0101               	movlb	1	; () banked
  9505  00201C  6F55               	movwf	(0+(?___wmul+02h))&0ffh
  9506  00201E  0E00               	movlw	high(06h)
  9507  002020  0101               	movlb	1	; () banked
  9508  002022  6F56               	movwf	(1+(?___wmul+02h))&0ffh
  9509  002024  0E01               	movlw	low(01h)
  9510  002026  0101               	movlb	1	; () banked
  9511  002028  0101               	movlb	1	; () banked
  9512  00202A  2543               	addwf	((wwvGetWeekDay@nMonth))&0ffh,w
  9513  00202C  0101               	movlb	1	; () banked
  9514                           	
  9515  00202E  0101               	movlb	1	; () banked
  9516  002030  6F53               	movwf	((?___wmul))&0ffh
  9517  002032  0E00               	movlw	high(01h)
  9518  002034  0101               	movlb	1	; () banked
  9519  002036  0101               	movlb	1	; () banked
  9520  002038  2144               	addwfc	((wwvGetWeekDay@nMonth+1))&0ffh,w
  9521  00203A  0101               	movlb	1	; () banked
  9522  00203C  6F54               	movwf	1+((?___wmul))&0ffh
  9523  00203E  ECA9  F018         	call	___wmul	;wreg free
  9524  002042  C153  F153         	movff	0+?___wmul,(?___awdiv)
  9525  002046  C154  F154         	movff	1+?___wmul,(?___awdiv+1)
  9526  00204A  0E0A               	movlw	low(0Ah)
  9527  00204C  0101               	movlb	1	; () banked
  9528  00204E  0101               	movlb	1	; () banked
  9529  002050  6F55               	movwf	(0+(?___awdiv+02h))&0ffh
  9530  002052  0E00               	movlw	high(0Ah)
  9531  002054  0101               	movlb	1	; () banked
  9532  002056  6F56               	movwf	(1+(?___awdiv+02h))&0ffh
  9533  002058  EC4A  F012         	call	___awdiv	;wreg free
  9534  00205C  90D8               	bcf	status,0
  9535  00205E  0101               	movlb	1	; () banked
  9536  002060  0101               	movlb	1	; () banked
  9537  002062  3543               	rlcf	((wwvGetWeekDay@nMonth))&0ffh,w
  9538  002064  0101               	movlb	1	; () banked
  9539  002066  6F4B               	movwf	(??_wwvGetWeekDay+2+0)&0ffh
  9540  002068  0101               	movlb	1	; () banked
  9541  00206A  0101               	movlb	1	; () banked
  9542  00206C  3544               	rlcf	((wwvGetWeekDay@nMonth+1))&0ffh,w
  9543  00206E  0101               	movlb	1	; () banked
  9544  002070  6F4C               	movwf	1+(??_wwvGetWeekDay+2+0)&0ffh
  9545  002072  0101               	movlb	1	; () banked
  9546  002074  0101               	movlb	1	; () banked
  9547  002076  5153               	movf	(0+?___awdiv)&0ffh,w
  9548  002078  0101               	movlb	1	; () banked
  9549  00207A  254B               	addwf	(??_wwvGetWeekDay+2+0)&0ffh,w
  9550  00207C  0101               	movlb	1	; () banked
  9551  00207E  6F4D               	movwf	(??_wwvGetWeekDay+4+0)&0ffh
  9552  002080  0101               	movlb	1	; () banked
  9553  002082  0101               	movlb	1	; () banked
  9554  002084  5154               	movf	(1+?___awdiv)&0ffh,w
  9555  002086  0101               	movlb	1	; () banked
  9556  002088  214C               	addwfc	(??_wwvGetWeekDay+2+1)&0ffh,w
  9557  00208A  0101               	movlb	1	; () banked
  9558  00208C  6F4E               	movwf	1+(??_wwvGetWeekDay+4+0)&0ffh
  9559  00208E  0E04               	movlw	low(04h)
  9560  002090  0101               	movlb	1	; () banked
  9561  002092  0101               	movlb	1	; () banked
  9562  002094  6F55               	movwf	(0+(?___awdiv+02h))&0ffh
  9563  002096  0E00               	movlw	high(04h)
  9564  002098  0101               	movlb	1	; () banked
  9565  00209A  6F56               	movwf	(1+(?___awdiv+02h))&0ffh
  9566  00209C  C147  F153         	movff	(wwvGetWeekDay@nYear),(?___awdiv)
  9567  0020A0  C148  F154         	movff	(wwvGetWeekDay@nYear+1),(?___awdiv+1)
  9568  0020A4  EC4A  F012         	call	___awdiv	;wreg free
  9569  0020A8  0101               	movlb	1	; () banked
  9570  0020AA  0101               	movlb	1	; () banked
  9571  0020AC  5153               	movf	(0+?___awdiv)&0ffh,w
  9572  0020AE  0101               	movlb	1	; () banked
  9573  0020B0  254D               	addwf	(??_wwvGetWeekDay+4+0)&0ffh,w
  9574  0020B2  0101               	movlb	1	; () banked
  9575  0020B4  6F4F               	movwf	(??_wwvGetWeekDay+6+0)&0ffh
  9576  0020B6  0101               	movlb	1	; () banked
  9577  0020B8  0101               	movlb	1	; () banked
  9578  0020BA  5154               	movf	(1+?___awdiv)&0ffh,w
  9579  0020BC  0101               	movlb	1	; () banked
  9580  0020BE  214E               	addwfc	(??_wwvGetWeekDay+4+1)&0ffh,w
  9581  0020C0  0101               	movlb	1	; () banked
  9582  0020C2  6F50               	movwf	1+(??_wwvGetWeekDay+6+0)&0ffh
  9583  0020C4  0101               	movlb	1	; () banked
  9584  0020C6  0101               	movlb	1	; () banked
  9585  0020C8  5145               	movf	((wwvGetWeekDay@nDate))&0ffh,w
  9586  0020CA  0101               	movlb	1	; () banked
  9587  0020CC  274F               	addwf	(??_wwvGetWeekDay+6+0)&0ffh
  9588  0020CE  0101               	movlb	1	; () banked
  9589  0020D0  0101               	movlb	1	; () banked
  9590  0020D2  5146               	movf	((wwvGetWeekDay@nDate+1))&0ffh,w
  9591  0020D4  0101               	movlb	1	; () banked
  9592  0020D6  2350               	addwfc	(??_wwvGetWeekDay+6+1)&0ffh
  9593  0020D8  0101               	movlb	1	; () banked
  9594  0020DA  0101               	movlb	1	; () banked
  9595  0020DC  5147               	movf	((wwvGetWeekDay@nYear))&0ffh,w
  9596  0020DE  0101               	movlb	1	; () banked
  9597  0020E0  274F               	addwf	(??_wwvGetWeekDay+6+0)&0ffh
  9598  0020E2  0101               	movlb	1	; () banked
  9599  0020E4  0101               	movlb	1	; () banked
  9600  0020E6  5148               	movf	((wwvGetWeekDay@nYear+1))&0ffh,w
  9601  0020E8  0101               	movlb	1	; () banked
  9602  0020EA  2350               	addwfc	(??_wwvGetWeekDay+6+1)&0ffh
  9603  0020EC  0E64               	movlw	low(064h)
  9604  0020EE  0101               	movlb	1	; () banked
  9605  0020F0  0101               	movlb	1	; () banked
  9606  0020F2  6F55               	movwf	(0+(?___awdiv+02h))&0ffh
  9607  0020F4  0E00               	movlw	high(064h)
  9608  0020F6  0101               	movlb	1	; () banked
  9609  0020F8  6F56               	movwf	(1+(?___awdiv+02h))&0ffh
  9610  0020FA  C147  F153         	movff	(wwvGetWeekDay@nYear),(?___awdiv)
  9611  0020FE  C148  F154         	movff	(wwvGetWeekDay@nYear+1),(?___awdiv+1)
  9612  002102  EC4A  F012         	call	___awdiv	;wreg free
  9613  002106  0101               	movlb	1	; () banked
  9614  002108  0101               	movlb	1	; () banked
  9615  00210A  5153               	movf	(0+?___awdiv)&0ffh,w
  9616  00210C  0101               	movlb	1	; () banked
  9617  00210E  5D4F               	subwf	(??_wwvGetWeekDay+6+0)&0ffh,w
  9618  002110  0101               	movlb	1	; () banked
  9619  002112  6F51               	movwf	(??_wwvGetWeekDay+8+0)&0ffh
  9620  002114  0101               	movlb	1	; () banked
  9621  002116  0101               	movlb	1	; () banked
  9622  002118  5154               	movf	(1+?___awdiv)&0ffh,w
  9623  00211A  0101               	movlb	1	; () banked
  9624  00211C  5950               	subwfb	(??_wwvGetWeekDay+6+1)&0ffh,w
  9625  00211E  0101               	movlb	1	; () banked
  9626  002120  6F52               	movwf	1+(??_wwvGetWeekDay+8+0)&0ffh
  9627  002122  0E90               	movlw	low(0190h)
  9628  002124  0101               	movlb	1	; () banked
  9629  002126  0101               	movlb	1	; () banked
  9630  002128  6F55               	movwf	(0+(?___awdiv+02h))&0ffh
  9631  00212A  0E01               	movlw	high(0190h)
  9632  00212C  0101               	movlb	1	; () banked
  9633  00212E  6F56               	movwf	(1+(?___awdiv+02h))&0ffh
  9634  002130  C147  F153         	movff	(wwvGetWeekDay@nYear),(?___awdiv)
  9635  002134  C148  F154         	movff	(wwvGetWeekDay@nYear+1),(?___awdiv+1)
  9636  002138  EC4A  F012         	call	___awdiv	;wreg free
  9637  00213C  0101               	movlb	1	; () banked
  9638  00213E  0101               	movlb	1	; () banked
  9639  002140  5153               	movf	(0+?___awdiv)&0ffh,w
  9640  002142  0101               	movlb	1	; () banked
  9641  002144  2551               	addwf	(??_wwvGetWeekDay+8+0)&0ffh,w
  9642  002146  0101               	movlb	1	; () banked
  9643                           	
  9644  002148  0101               	movlb	1	; () banked
  9645  00214A  6F53               	movwf	((?___awmod))&0ffh
  9646  00214C  0101               	movlb	1	; () banked
  9647  00214E  0101               	movlb	1	; () banked
  9648  002150  5154               	movf	(1+?___awdiv)&0ffh,w
  9649  002152  0101               	movlb	1	; () banked
  9650  002154  2152               	addwfc	(??_wwvGetWeekDay+8+1)&0ffh,w
  9651  002156  0101               	movlb	1	; () banked
  9652  002158  6F54               	movwf	1+((?___awmod))&0ffh
  9653  00215A  0E07               	movlw	low(07h)
  9654  00215C  0101               	movlb	1	; () banked
  9655  00215E  0101               	movlb	1	; () banked
  9656  002160  6F55               	movwf	(0+(?___awmod+02h))&0ffh
  9657  002162  0E00               	movlw	high(07h)
  9658  002164  0101               	movlb	1	; () banked
  9659  002166  6F56               	movwf	(1+(?___awmod+02h))&0ffh
  9660  002168  EC9A  F013         	call	___awmod	;wreg free
  9661  00216C  C153  F149         	movff	0+?___awmod,(wwvGetWeekDay@r)
  9662  002170  C154  F14A         	movff	1+?___awmod,(wwvGetWeekDay@r+1)
  9663                           	line	663
  9664                           ;wwv.c: 663: return r+1;
  9665  002174  0101               	movlb	1	; () banked
  9666  002176  0101               	movlb	1	; () banked
  9667  002178  2949               	incf	((wwvGetWeekDay@r))&0ffh,w
  9668  00217A  EFBF  F010         	goto	l1341
  9669                           	line	665
  9670                           ;wwv.c: 665: }
  9671  00217E                     l1341:
  9672                           			; BSR set to: ?
  9673                           
  9674  00217E  0012               	return
  9675                           	opt stack 0
  9676                           GLOBAL __end_of_wwvGetWeekDay
  9677  002180                     	__end_of_wwvGetWeekDay:
  9678                           	FNSIZE	_wwvGetWeekDay,10,6
  9679                           ; =============== function _wwvGetWeekDay ends =
                                 ===========
  9680                           
  9681                           	signat	_wwvGetWeekDay,12409
  9682                           	global	_rtcReadRam
  9683                           	global	??_rtcReadRam
  9684                           	global	?_rtcReadRam
  9685                           
  9686                           ; *************** function _rtcReadRam *********
                                 ********
  9687                           ; Defined at:
  9688                           ;		line 95 in file "rtc.c"
  9689                           ; Parameters:
  9690                           ;		yAddress       size:   1offs:   0	type: unsig
                                 ned char 
  9691                           ; Auto variables:
  9692                           ;		y           	       	type: unsigned char 
  9693                           ; Return value:
  9694                           ;		type: unsigned char 
  9695                           ;		size: 1
  9696                           ; Registers used:
  9697                           ;		wreg, status,2, status,0, cstack
  9698                           ; Tracked objects:
  9699                           ;		On entry : 0/0
  9700                           ;		On exit  : 0/0
  9701                           ;		Unchanged: 0/0
  9702                           ; Data sizes:
  9703                           ;		Autos:    1
  9704                           ;		Params:   1
  9705                           ;		Temp:     0
  9706                           ;		Total:    2
  9707                           ; This function calls:
  9708                           ;		_spiChipSelect
  9709                           ;		_spiWrite
  9710                           ;		_spiRead
  9711                           ;		_spiChipDeselect
  9712                           ; This function is called by:
  9713                           ;		_DisplayTime
  9714                           ;		_ButtonDown
  9715                           ;		_rtcInit
  9716                           ;		_rtcBumpLastSync
  9717                           ;		_wwvGetTime
  9718                           ; This function uses a non-reentrant model
  9719                           ; 
  9720                                   psect   text34,class=CODE,space=0,reloc=
                                 2
  9721                           
  9722                           	opt lm
  9723                           	file	"rtc.c"
  9724                           	line	95
  9725  000000                     	__size_of_rtcReadRam	equ	__end_of_rtcReadRam-_r
                                 tcReadRam
  9726                           ;rtc.c: 94: UINT8 rtcReadRam( UINT8 yAddress)
  9727                           ;rtc.c: 95: {
  9728                           	
  9729  0036CA                     _rtcReadRam:		; BSR set to: ?
  9730                           
  9731                           	opt stack 27
  9732                           	line	98
  9733  0036CA  ECBF  F01B         	call	_spiChipSelect	;wreg free
  9734                           	line	100
  9735                           ;rtc.c: 100: spiWrite(yAddress);
  9736  0036CE  C135  F137         	movff	(rtcReadRam@yAddress),(?_spiWrite)
  9737  0036D2  EC8C  F019         	call	_spiWrite	;wreg free
  9738                           	line	101
  9739                           ;rtc.c: 101: y = spiRead();
  9740  0036D6  EC1C  F019         	call	_spiRead	;wreg free
  9741  0036DA  0101               	movlb	1	; () banked
  9742  0036DC  0101               	movlb	1	; () banked
  9743  0036DE  6F36               	movwf	((rtcReadRam@y))&0ffh
  9744                           	line	103
  9745                           ;rtc.c: 103: spiChipDeselect();
  9746  0036E0  ECBB  F01B         	call	_spiChipDeselect	;wreg free
  9747                           	line	105
  9748                           ;rtc.c: 105: return y;
  9749  0036E4  0101               	movlb	1	; () banked
  9750  0036E6  0101               	movlb	1	; () banked
  9751  0036E8  5136               	movf	((rtcReadRam@y))&0ffh,w
  9752  0036EA  EF77  F01B         	goto	l860
  9753                           	line	107
  9754                           ;rtc.c: 107: }
  9755  0036EE                     l860:
  9756                           			; BSR set to: ?
  9757                           
  9758  0036EE  0012               	return
  9759                           	opt stack 0
  9760                           GLOBAL __end_of_rtcReadRam
  9761  0036F0                     	__end_of_rtcReadRam:
  9762                           	FNSIZE	_rtcReadRam,1,1
  9763                           ; =============== function _rtcReadRam ends ====
                                 ========
  9764                           
  9765                           	signat	_rtcReadRam,4217
  9766                           	global	_rtcBCDToDec
  9767                           	global	??_rtcBCDToDec
  9768                           	global	?_rtcBCDToDec
  9769                           
  9770                           ; *************** function _rtcBCDToDec ********
                                 *********
  9771                           ; Defined at:
  9772                           ;		line 227 in file "rtc.c"
  9773                           ; Parameters:
  9774                           ;		yNum           size:   1offs:   0	type: unsig
                                 ned char 
  9775                           ; Auto variables:
  9776                           ;		yBin        	       	type: unsigned char 
  9777                           ; Return value:
  9778                           ;		type: unsigned char 
  9779                           ;		size: 1
  9780                           ; Registers used:
  9781                           ;		wreg, status,2, status,0, prodl, prodh
  9782                           ; Tracked objects:
  9783                           ;		On entry : 0/0
  9784                           ;		On exit  : 0/0
  9785                           ;		Unchanged: 0/0
  9786                           ; Data sizes:
  9787                           ;		Autos:    1
  9788                           ;		Params:   1
  9789                           ;		Temp:     1
  9790                           ;		Total:    3
  9791                           ; This function calls:
  9792                           ;		Nothing
  9793                           ; This function is called by:
  9794                           ;		_main
  9795                           ;		_MakeDateString
  9796                           ;		_rtc24to12Hour
  9797                           ;		_wwvGetTime
  9798                           ; This function uses a non-reentrant model
  9799                           ; 
  9800                                   psect   text35,class=CODE,space=0,reloc=
                                 2
  9801                           
  9802                           	opt lm
  9803                           	file	"rtc.c"
  9804                           	line	227
  9805  000000                     	__size_of_rtcBCDToDec	equ	__end_of_rtcBCDToDec-
                                 _rtcBCDToDec
  9806                           ;rtc.c: 226: UINT8 rtcBCDToDec(UINT8 yNum)
  9807                           ;rtc.c: 227: {
  9808                           	
  9809  00366A                     _rtcBCDToDec:		; BSR set to: ?
  9810                           
  9811                           	opt stack 27
  9812                           	line	230
  9813                           ;rtc.c: 228: UINT8 yBin;
  9814                           ;rtc.c: 230: yBin = ((yNum & (UINT8)0xf0) >> (UI
                                 NT8)4) * (UINT8)10;
  9815  00366A  C143  F145         	movff	(rtcBCDToDec@yNum),??_rtcBCDToDec+1+0
  9816  00366E  0EF0               	movlw	0F0h
  9817  003670  0101               	movlb	1	; () banked
  9818  003672  1745               	andwf	(??_rtcBCDToDec+1+0)&0ffh
  9819  003674  0101               	movlb	1	; () banked
  9820  003676  3945               	swapf	(??_rtcBCDToDec+1+0)&0ffh,w
  9821  003678  0B0F               	andlw	(0ffh shr 4) & 0ffh
  9822  00367A  0D0A               	mullw	0Ah
  9823  00367C  CFF3 F144          	movff	prodl,(rtcBCDToDec@yBin)
  9824                           	line	231
  9825                           ;rtc.c: 231: yBin += (yNum & (UINT8)0x0f);
  9826  003680  0101               	movlb	1	; () banked
  9827  003682  0101               	movlb	1	; () banked
  9828  003684  5143               	movf	((rtcBCDToDec@yNum))&0ffh,w
  9829  003686  0B0F               	andlw	low(0Fh)
  9830  003688  0101               	movlb	1	; () banked
  9831  00368A  0101               	movlb	1	; () banked
  9832  00368C  2744               	addwf	((rtcBCDToDec@yBin))&0ffh
  9833                           	line	232
  9834                           ;rtc.c: 232: return yBin;
  9835  00368E  0101               	movlb	1	; () banked
  9836  003690  0101               	movlb	1	; () banked
  9837  003692  5144               	movf	((rtcBCDToDec@yBin))&0ffh,w
  9838  003694  EF4C  F01B         	goto	l864
  9839                           	line	234
  9840                           ;rtc.c: 234: }
  9841  003698                     l864:
  9842                           			; BSR set to: ?
  9843                           
  9844  003698  0012               	return
  9845                           	opt stack 0
  9846                           GLOBAL __end_of_rtcBCDToDec
  9847  00369A                     	__end_of_rtcBCDToDec:
  9848                           	FNSIZE	_rtcBCDToDec,2,1
  9849                           ; =============== function _rtcBCDToDec ends ===
                                 =========
  9850                           
  9851                           	signat	_rtcBCDToDec,4217
  9852                           	global	_glcdDrawBitmap
  9853                           	global	??_glcdDrawBitmap
  9854                           	global	?_glcdDrawBitmap
  9855                           
  9856                           ; *************** function _glcdDrawBitmap *****
                                 ************
  9857                           ; Defined at:
  9858                           ;		line 288 in file "glcd.c"
  9859                           ; Parameters:
  9860                           ;		pBMP           size:   2offs:   0	type: PTR u
                                 nsigned char ; Largest target is 46
  9861                           ;		 -> digPM(46), digAM(46), digColon(18), digBl
                                 ank(39), 
  9862                           ;		 -> dig9(39), dig8(39), dig7(39), dig6(39), 
  9863                           ;		 -> dig5(39), dig4(39), dig3(39), dig2(39), 
  9864                           ;		 -> dig1(39), dig0(39), 
  9865                           ;		yWidth         size:   1offs:   2	type: unsig
                                 ned char 
  9866                           ;		yHeight        size:   1offs:   3	type: unsig
                                 ned char 
  9867                           ; Auto variables:
  9868                           ;		yBaseCol    	       	type: unsigned char 
  9869                           ;		yBaseSeg    	       	type: unsigned char 
  9870                           ;		yXAxis      	       	type: unsigned char 
  9871                           ;		yYAxis      	       	type: unsigned char 
  9872                           ; Return value:
  9873                           ;		type: void 
  9874                           ;		size: 0
  9875                           ; Registers used:
  9876                           ;		wreg, status,2, status,0, tblptrl, tblptrh, t
                                 blptru, tablat, cstack
  9877                           ; Tracked objects:
  9878                           ;		On entry : 0/0
  9879                           ;		On exit  : 0/0
  9880                           ;		Unchanged: 0/0
  9881                           ; Data sizes:
  9882                           ;		Autos:    4
  9883                           ;		Params:   4
  9884                           ;		Temp:     1
  9885                           ;		Total:    9
  9886                           ; This function calls:
  9887                           ;		_glcdSetPage
  9888                           ;		_glcdSetCol
  9889                           ;		_glbaseWriteData
  9890                           ; This function is called by:
  9891                           ;		_glcdDrawImage
  9892                           ; This function uses a non-reentrant model
  9893                           ; 
  9894                                   psect   text36,class=CODE,space=0,reloc=
                                 2
  9895                           
  9896                           	opt lm
  9897                           	file	"glcd.c"
  9898                           	line	288
  9899  000000                     	__size_of_glcdDrawBitmap	equ	__end_of_glcdDrawB
                                 itmap-_glcdDrawBitmap
  9900                           ;glcd.c: 287: void glcdDrawBitmap(UINT8 *pBMP, U
                                 INT8 yWidth, UINT8 yHeight)
  9901                           ;glcd.c: 288: {
  9902                           	
  9903  002866                     _glcdDrawBitmap:		; BSR set to: ?
  9904                           
  9905                           	opt stack 27
  9906                           	line	292
  9907  002866  0608               	decf	((c:8)),c	;volatile
  9908                           	line	293
  9909                           ;glcd.c: 293: yBaseCol = s_yLastCol;
  9910  002868  C00A F13E          	movff	(c:10),(glcdDrawBitmap@yBaseCol)	;volatil
                                 e
  9911                           	line	294
  9912                           ;glcd.c: 294: yBaseSeg = s_yLastSeg;
  9913  00286C  C007 F13F          	movff	(c:7),(glcdDrawBitmap@yBaseSeg)	;volatile
  9914                           	line	298
  9915                           ;glcd.c: 298: for(yYAxis = 0; yYAxis < yHeight; 
                                 yYAxis++)
  9916  002870  0101               	movlb	1	; () banked
  9917  002872  6F42               	movwf	(??_glcdDrawBitmap+4+0)&0ffh
  9918  002874  0E00               	movlw	low(0)
  9919  002876  0101               	movlb	1	; () banked
  9920  002878  0101               	movlb	1	; () banked
  9921  00287A  6F41               	movwf	((glcdDrawBitmap@yYAxis))&0ffh
  9922  00287C  0101               	movlb	1	; () banked
  9923  00287E  5142               	movf	(??_glcdDrawBitmap+4+0)&0ffh,w
  9924  002880  EFBA  F014         	goto	l409
  9925                           	line	299
  9926                           	
  9927  002884                     l406:		; BSR set to: ?
  9928                           
  9929                           	line	301
  9930                           ;glcd.c: 299: {
  9931                           ;glcd.c: 301: if(++s_yLastPage > 7)
  9932  002884  2A08               	incf	((c:8)),c	;volatile
  9933  002886  0E07               	movlw	(08h-1)
  9934  002888  6408               	cpfsgt	((c:8))&0ffh	;volatile
  9935  00288A  EF49  F014         	goto	u4661
  9936  00288E  EF4B  F014         	goto	u4660
  9937  002892                     u4661:
  9938  002892  EF4F  F014         	goto	l410
  9939  002896                     u4660:
  9940                           	line	303
  9941                           ;glcd.c: 302: {
  9942                           ;glcd.c: 303: s_yLastPage = 7;
  9943  002896  0E07               	movlw	low(07h)
  9944  002898  6E08               	movwf	((c:8)),c	;volatile
  9945                           	line	304
  9946                           ;glcd.c: 304: return;
  9947  00289A  EFC7  F014         	goto	l405
  9948                           	line	305
  9949                           	
  9950  00289E                     l410:		; BSR set to: ?
  9951                           
  9952                           	line	306
  9953                           ;glcd.c: 305: }
  9954                           ;glcd.c: 306: glcdSetPage(s_yLastPage, yBaseSeg)
                                 ;
  9955  00289E  C13F  F144         	movff	(glcdDrawBitmap@yBaseSeg),0+(?_glcdSetPag
                                 e+01h)
  9956  0028A2  C008 F143          	movff	(c:8),(?_glcdSetPage)	;volatile
  9957  0028A6  EC1D  F01B         	call	_glcdSetPage	;wreg free
  9958                           	line	307
  9959                           ;glcd.c: 307: glcdSetCol(yBaseCol, yBaseSeg);
  9960  0028AA  C13F  F144         	movff	(glcdDrawBitmap@yBaseSeg),0+(?_glcdSetCol
                                 +01h)
  9961  0028AE  C13E  F143         	movff	(glcdDrawBitmap@yBaseCol),(?_glcdSetCol)
  9962  0028B2  EC4D  F01B         	call	_glcdSetCol	;wreg free
  9963                           	line	308
  9964                           ;glcd.c: 308: s_yLastCol = yBaseCol;
  9965  0028B6  C13E  F00A         	movff	(glcdDrawBitmap@yBaseCol),(c:10)	;volatil
                                 e
  9966                           	line	309
  9967                           ;glcd.c: 309: s_yLastSeg = yBaseSeg;
  9968  0028BA  C13F  F007         	movff	(glcdDrawBitmap@yBaseSeg),(c:7)	;volatile
  9969                           	line	312
  9970                           ;glcd.c: 312: yXAxis = 0;
  9971  0028BE  0101               	movlb	1	; () banked
  9972  0028C0  6F42               	movwf	(??_glcdDrawBitmap+4+0)&0ffh
  9973  0028C2  0E00               	movlw	low(0)
  9974  0028C4  0101               	movlb	1	; () banked
  9975  0028C6  0101               	movlb	1	; () banked
  9976  0028C8  6F40               	movwf	((glcdDrawBitmap@yXAxis))&0ffh
  9977  0028CA  0101               	movlb	1	; () banked
  9978  0028CC  5142               	movf	(??_glcdDrawBitmap+4+0)&0ffh,w
  9979                           	line	313
  9980                           ;glcd.c: 313: while(yXAxis < yWidth)
  9981  0028CE  EFAA  F014         	goto	l411
  9982                           	
  9983  0028D2                     l412:		; BSR set to: ?
  9984                           
  9985                           	line	315
  9986  0028D2  C007 F148          	movff	(c:7),0+(?_glbaseWriteData+02h)	;volatile
  9987  0028D6  0101               	movlb	1	; () banked
  9988  0028D8  6F42               	movwf	(??_glcdDrawBitmap+4+0)&0ffh
  9989  0028DA  0E01               	movlw	low(01h)
  9990  0028DC  0101               	movlb	1	; () banked
  9991  0028DE  0101               	movlb	1	; () banked
  9992  0028E0  6F47               	movwf	(0+(?_glbaseWriteData+01h))&0ffh
  9993  0028E2  0101               	movlb	1	; () banked
  9994  0028E4  5142               	movf	(??_glcdDrawBitmap+4+0)&0ffh,w
  9995  0028E6  0101               	movlb	1	; () banked
  9996  0028E8  C13A  FFF6         	movff	(glcdDrawBitmap@pBMP),tblptrl
  9997  0028EC  0101               	movlb	1	; () banked
  9998  0028EE  C13B  FFF7         	movff	(glcdDrawBitmap@pBMP+1),tblptrh
  9999  0028F2  0008               	tblrd	*
 10000                           	
 10001  0028F4  0101               	movlb	1	; () banked
 10002  0028F6  CFF5 F146          	movff	tablat,(?_glbaseWriteData)
 10003  0028FA  EC8F  F01A         	call	_glbaseWriteData	;wreg free
 10004                           ;glcd.c: 314: {
 10005                           ;glcd.c: 315: glbaseWriteData(*pBMP++, 1, s_yLas
                                 tSeg);
 10006  0028FE  0101               	movlb	1	; () banked
 10007  002900  0101               	movlb	1	; () banked
 10008  002902  4B3A               	infsnz	((glcdDrawBitmap@pBMP))&0ffh
 10009  002904  2B3B               	incf	((glcdDrawBitmap@pBMP+1))&0ffh
 10010                           	line	317
 10011                           ;glcd.c: 317: if(++s_yLastCol > 63)
 10012  002906  2A0A               	incf	((c:10)),c	;volatile
 10013  002908  0E3F               	movlw	(040h-1)
 10014  00290A  640A               	cpfsgt	((c:10))&0ffh	;volatile
 10015  00290C  EF8A  F014         	goto	u4671
 10016  002910  EF8C  F014         	goto	u4670
 10017  002914                     u4671:
 10018  002914  EFA7  F014         	goto	l414
 10019  002918                     u4670:
 10020                           	line	320
 10021                           ;glcd.c: 318: {
 10022                           ;glcd.c: 320: if(!s_yLastSeg)
 10023  002918  6607               	tstfsz	((c:7)),c	;volatile
 10024  00291A  EF91  F014         	goto	u4681
 10025  00291E  EF93  F014         	goto	u4680
 10026  002922                     u4681:
 10027  002922  EFA5  F014         	goto	l415
 10028  002926                     u4680:
 10029                           	line	323
 10030                           ;glcd.c: 321: {
 10031                           ;glcd.c: 323: s_yLastCol = 0;
 10032  002926  0E00               	movlw	low(0)
 10033  002928  6E0A               	movwf	((c:10)),c	;volatile
 10034                           	line	324
 10035                           ;glcd.c: 324: s_yLastSeg = 1;
 10036  00292A  0E01               	movlw	low(01h)
 10037  00292C  6E07               	movwf	((c:7)),c	;volatile
 10038                           	line	325
 10039                           ;glcd.c: 325: glcdSetCol(s_yLastCol, s_yLastSeg)
                                 ;
 10040  00292E  C007 F144          	movff	(c:7),0+(?_glcdSetCol+01h)	;volatile
 10041  002932  C00A F143          	movff	(c:10),(?_glcdSetCol)	;volatile
 10042  002936  EC4D  F01B         	call	_glcdSetCol	;wreg free
 10043                           	line	326
 10044                           ;glcd.c: 326: glcdSetPage(s_yLastPage, s_yLastSe
                                 g);
 10045  00293A  C007 F144          	movff	(c:7),0+(?_glcdSetPage+01h)	;volatile
 10046  00293E  C008 F143          	movff	(c:8),(?_glcdSetPage)	;volatile
 10047  002942  EC1D  F01B         	call	_glcdSetPage	;wreg free
 10048                           	line	327
 10049                           ;glcd.c: 327: }
 10050  002946  EFA7  F014         	goto	l414
 10051                           	line	328
 10052                           	
 10053  00294A                     l415:		; BSR set to: ?
 10054                           
 10055                           	line	331
 10056                           ;glcd.c: 328: else
 10057                           ;glcd.c: 329: {
 10058                           ;glcd.c: 331: return;
 10059  00294A  EFC7  F014         	goto	l405
 10060                           	line	333
 10061                           	
 10062  00294E                     l414:		; BSR set to: ?
 10063                           
 10064                           	line	334
 10065                           ;glcd.c: 332: }
 10066                           ;glcd.c: 333: }
 10067                           ;glcd.c: 334: yXAxis++;
 10068  00294E  0101               	movlb	1	; () banked
 10069  002950  0101               	movlb	1	; () banked
 10070  002952  2B40               	incf	((glcdDrawBitmap@yXAxis))&0ffh
 10071                           	line	336
 10072                           	
 10073  002954                     l411:		; BSR set to: ?
 10074                           
 10075                           	line	313
 10076  002954  0101               	movlb	1	; () banked
 10077  002956  0101               	movlb	1	; () banked
 10078  002958  513C               	movf	((glcdDrawBitmap@yWidth))&0ffh,w
 10079  00295A  0101               	movlb	1	; () banked
 10080  00295C  0101               	movlb	1	; () banked
 10081  00295E  5D40               	subwf	((glcdDrawBitmap@yXAxis))&0ffh,w
 10082  002960  A0D8               	btfss	status,0
 10083  002962  EFB5  F014         	goto	u4691
 10084  002966  EFB7  F014         	goto	u4690
 10085  00296A                     u4691:
 10086  00296A  EF69  F014         	goto	l412
 10087  00296E                     u4690:
 10088                           	
 10089  00296E                     l413:		; BSR set to: ?
 10090                           
 10091                           	line	298
 10092  00296E  0101               	movlb	1	; () banked
 10093  002970  0101               	movlb	1	; () banked
 10094  002972  2B41               	incf	((glcdDrawBitmap@yYAxis))&0ffh
 10095                           	
 10096  002974                     l409:		; BSR set to: ?
 10097                           
 10098  002974  0101               	movlb	1	; () banked
 10099  002976  0101               	movlb	1	; () banked
 10100  002978  513D               	movf	((glcdDrawBitmap@yHeight))&0ffh,w
 10101  00297A  0101               	movlb	1	; () banked
 10102  00297C  0101               	movlb	1	; () banked
 10103  00297E  5D41               	subwf	((glcdDrawBitmap@yYAxis))&0ffh,w
 10104  002980  A0D8               	btfss	status,0
 10105  002982  EFC5  F014         	goto	u4701
 10106  002986  EFC7  F014         	goto	u4700
 10107  00298A                     u4701:
 10108  00298A  EF42  F014         	goto	l406
 10109  00298E                     u4700:
 10110                           	
 10111  00298E                     l407:		; BSR set to: ?
 10112                           
 10113                           	line	339
 10114                           ;glcd.c: 336: }
 10115                           ;glcd.c: 337: }
 10116                           ;glcd.c: 339: }
 10117  00298E                     l405:
 10118                           			; BSR set to: ?
 10119                           
 10120  00298E  0012               	return
 10121                           	opt stack 0
 10122                           GLOBAL __end_of_glcdDrawBitmap
 10123  002990                     	__end_of_glcdDrawBitmap:
 10124                           	FNSIZE	_glcdDrawBitmap,5,4
 10125                           ; =============== function _glcdDrawBitmap ends 
                                 ============
 10126                           
 10127                           	signat	_glcdDrawBitmap,12408
 10128                           	global	_spiRead
 10129                           	global	??_spiRead
 10130                           	global	?_spiRead
 10131                           
 10132                           ; *************** function _spiRead ************
                                 *****
 10133                           ; Defined at:
 10134                           ;		line 69 in file "spi.c"
 10135                           ; Parameters:
 10136                           ;		None
 10137                           ; Auto variables:
 10138                           ;		yData       	       	type: unsigned char 
 10139                           ;		yShift      	       	type: unsigned char 
 10140                           ; Return value:
 10141                           ;		type: unsigned char 
 10142                           ;		size: 1
 10143                           ; Registers used:
 10144                           ;		wreg, status,2, status,0, cstack
 10145                           ; Tracked objects:
 10146                           ;		On entry : 0/0
 10147                           ;		On exit  : 0/0
 10148                           ;		Unchanged: 0/0
 10149                           ; Data sizes:
 10150                           ;		Autos:    2
 10151                           ;		Params:   0
 10152                           ;		Temp:     1
 10153                           ;		Total:    3
 10154                           ; This function calls:
 10155                           ;		_DelayShort
 10156                           ; This function is called by:
 10157                           ;		_rtcReadRam
 10158                           ;		_rtcGetClock
 10159                           ; This function uses a non-reentrant model
 10160                           ; 
 10161                                   psect   text37,class=CODE,space=0,reloc=
                                 2
 10162                           
 10163                           	opt lm
 10164                           	file	"spi.c"
 10165                           	line	69
 10166  000000                     	__size_of_spiRead	equ	__end_of_spiRead-_spiRead
 10167                           ;spi.c: 68: UINT8 spiRead(void)
 10168                           ;spi.c: 69: {
 10169                           	
 10170  003238                     _spiRead:		; BSR set to: ?
 10171                           
 10172                           	opt stack 26
 10173                           	line	71
 10174                           ;spi.c: 70: UINT8 yShift;
 10175                           ;spi.c: 71: UINT8 yData = 0;
 10176  003238  0101               	movlb	1	; () banked
 10177  00323A  6F39               	movwf	(??_spiRead+2+0)&0ffh
 10178  00323C  0E00               	movlw	low(0)
 10179  00323E  0101               	movlb	1	; () banked
 10180  003240  0101               	movlb	1	; () banked
 10181  003242  6F37               	movwf	((spiRead@yData))&0ffh
 10182  003244  0101               	movlb	1	; () banked
 10183  003246  5139               	movf	(??_spiRead+2+0)&0ffh,w
 10184                           	line	73
 10185                           ;spi.c: 73: TRISA4 = 1;
 10186  003248  8892               	bsf	c:(31892/8),(31892)&7	;volatile
 10187                           	line	75
 10188                           ;spi.c: 75: for(yShift = 0x01; yShift; yShift <<
                                 = 1)
 10189  00324A  0101               	movlb	1	; () banked
 10190  00324C  6F39               	movwf	(??_spiRead+2+0)&0ffh
 10191  00324E  0E01               	movlw	low(01h)
 10192  003250  0101               	movlb	1	; () banked
 10193  003252  0101               	movlb	1	; () banked
 10194  003254  6F38               	movwf	((spiRead@yShift))&0ffh
 10195  003256  0101               	movlb	1	; () banked
 10196  003258  5139               	movf	(??_spiRead+2+0)&0ffh,w
 10197  00325A  EF45  F019         	goto	l1061
 10198                           	line	76
 10199                           	
 10200  00325E                     l1058:		; BSR set to: ?
 10201                           
 10202                           	line	77
 10203                           ;spi.c: 76: {
 10204                           ;spi.c: 77: LATA5 = 1;
 10205  00325E  8A89               	bsf	c:(31821/8),(31821)&7	;volatile
 10206                           	line	79
 10207                           ;spi.c: 79: if(RA4)
 10208  003260  A880               	btfss	c:(31748/8),(31748)&7	;volatile
 10209  003262  EF35  F019         	goto	u4711
 10210  003266  EF37  F019         	goto	u4710
 10211  00326A                     u4711:
 10212  00326A  EF3D  F019         	goto	l1062
 10213  00326E                     u4710:
 10214                           	line	80
 10215                           ;spi.c: 80: yData |= yShift;
 10216  00326E  0101               	movlb	1	; () banked
 10217  003270  0101               	movlb	1	; () banked
 10218  003272  5138               	movf	((spiRead@yShift))&0ffh,w
 10219  003274  0101               	movlb	1	; () banked
 10220  003276  0101               	movlb	1	; () banked
 10221  003278  1337               	iorwf	((spiRead@yData))&0ffh
 10222                           	
 10223  00327A                     l1062:		; BSR set to: ?
 10224                           
 10225                           	line	82
 10226                           ;spi.c: 82: DelayShort();
 10227  00327A  ECC3  F01B         	call	_DelayShort	;wreg free
 10228                           	line	83
 10229                           ;spi.c: 83: LATA5 = 0;
 10230  00327E  9A89               	bcf	c:(31821/8),(31821)&7	;volatile
 10231                           	line	84
 10232                           ;spi.c: 84: DelayShort();
 10233  003280  ECC3  F01B         	call	_DelayShort	;wreg free
 10234                           	line	75
 10235  003284  0101               	movlb	1	; () banked
 10236  003286  90D8               	bcf status,0
 10237  003288  3738               	rlcf	((spiRead@yShift))&0ffh
 10238                           
 10239                           	
 10240  00328A                     l1061:		; BSR set to: ?
 10241                           
 10242  00328A  0101               	movlb	1	; () banked
 10243  00328C  0101               	movlb	1	; () banked
 10244  00328E  6738               	tstfsz	((spiRead@yShift))&0ffh
 10245  003290  EF4C  F019         	goto	u4721
 10246  003294  EF4E  F019         	goto	u4720
 10247  003298                     u4721:
 10248  003298  EF2F  F019         	goto	l1058
 10249  00329C                     u4720:
 10250                           	
 10251  00329C                     l1059:		; BSR set to: ?
 10252                           
 10253                           	line	87
 10254                           ;spi.c: 85: }
 10255                           ;spi.c: 87: return yData;
 10256  00329C  0101               	movlb	1	; () banked
 10257  00329E  0101               	movlb	1	; () banked
 10258  0032A0  5137               	movf	((spiRead@yData))&0ffh,w
 10259  0032A2  EF53  F019         	goto	l1057
 10260                           	line	89
 10261                           ;spi.c: 89: }
 10262  0032A6                     l1057:
 10263                           			; BSR set to: ?
 10264                           
 10265  0032A6  0012               	return
 10266                           	opt stack 0
 10267                           GLOBAL __end_of_spiRead
 10268  0032A8                     	__end_of_spiRead:
 10269                           	FNSIZE	_spiRead,3,0
 10270                           ; =============== function _spiRead ends =======
                                 =====
 10271                           
 10272                           	signat	_spiRead,89
 10273                           	global	_spiChipDeselect
 10274                           	global	??_spiChipDeselect
 10275                           	global	?_spiChipDeselect
 10276                           
 10277                           ; *************** function _spiChipDeselect ****
                                 *************
 10278                           ; Defined at:
 10279                           ;		line 177 in file "spi.c"
 10280                           ; Parameters:
 10281                           ;		None
 10282                           ; Auto variables:
 10283                           ;		None
 10284                           ; Return value:
 10285                           ;		type: void 
 10286                           ;		size: 0
 10287                           ; Registers used:
 10288                           ;		cstack
 10289                           ; Tracked objects:
 10290                           ;		On entry : 0/0
 10291                           ;		On exit  : 0/0
 10292                           ;		Unchanged: 0/0
 10293                           ; Data sizes:
 10294                           ;		Autos:    0
 10295                           ;		Params:   0
 10296                           ;		Temp:     0
 10297                           ;		Total:    0
 10298                           ; This function calls:
 10299                           ;		_DelayShort
 10300                           ; This function is called by:
 10301                           ;		_rtcReadRam
 10302                           ;		_rtcWriteRam
 10303                           ;		_rtcGetClock
 10304                           ; This function uses a non-reentrant model
 10305                           ; 
 10306                                   psect   text38,class=CODE,space=0,reloc=
                                 2
 10307                           
 10308                           	opt lm
 10309                           	file	"spi.c"
 10310                           	line	177
 10311  000000                     	__size_of_spiChipDeselect	equ	__end_of_spiChipD
                                 eselect-_spiChipDeselect
 10312                           ;spi.c: 176: void spiChipDeselect(void)
 10313                           ;spi.c: 177: {
 10314                           	
 10315  003776                     _spiChipDeselect:		; BSR set to: ?
 10316                           
 10317                           	opt stack 26
 10318                           	line	178
 10319  003776  9689               	bcf	c:(31819/8),(31819)&7	;volatile
 10320                           	line	179
 10321                           ;spi.c: 179: DelayShort();
 10322  003778  ECC3  F01B         	call	_DelayShort	;wreg free
 10323                           	line	180
 10324                           ;spi.c: 180: }
 10325  00377C                     l1071:
 10326                           			; BSR set to: ?
 10327                           
 10328  00377C  0012               	return
 10329                           	opt stack 0
 10330                           GLOBAL __end_of_spiChipDeselect
 10331  00377E                     	__end_of_spiChipDeselect:
 10332                           	FNSIZE	_spiChipDeselect,0,0
 10333                           ; =============== function _spiChipDeselect ends
                                  ============
 10334                           
 10335                           	signat	_spiChipDeselect,88
 10336                           	global	___wmul
 10337                           	global	??___wmul
 10338                           	global	?___wmul
 10339                           
 10340                           ; *************** function ___wmul *************
                                 ****
 10341                           ; Defined at:
 10342                           ;		line 3 in file "C:\Program Files\HI-TECH Soft
                                 ware\PICC-18\PRO\9.66\sources\wmul.c"
 10343                           ; Parameters:
 10344                           ;		multiplier     size:   2offs:   0	type: unsig
                                 ned int 
 10345                           ;		multiplicand   size:   2offs:   2	type: unsig
                                 ned int 
 10346                           ; Auto variables:
 10347                           ;		product     	       	type: unsigned int 
 10348                           ; Return value:
 10349                           ;		type: unsigned int 
 10350                           ;		size: 2
 10351                           ; Registers used:
 10352                           ;		wreg, status,2, status,0
 10353                           ; Tracked objects:
 10354                           ;		On entry : 0/0
 10355                           ;		On exit  : 0/0
 10356                           ;		Unchanged: 0/0
 10357                           ; Data sizes:
 10358                           ;		Autos:    2
 10359                           ;		Params:   4
 10360                           ;		Temp:     0
 10361                           ;		Total:    6
 10362                           ; This function calls:
 10363                           ;		Nothing
 10364                           ; This function is called by:
 10365                           ;		_DisplayTime
 10366                           ;		_MakeDateString
 10367                           ;		_Vdelay_ms
 10368                           ;		_wwvGetWeekDay
 10369                           ; This function uses a non-reentrant model
 10370                           ; 
 10371                                   psect   text39,class=CODE,space=0,reloc=
                                 2
 10372                           
 10373                           	opt lm
 10374                           	file	"C:\Program Files\HI-TECH Software\PICC-18
                                 \PRO\9.66\sources\wmul.c"
 10375                           	line	3
 10376  000000                     	__size_of___wmul	equ	__end_of___wmul-___wmul
 10377                           	
 10378  003152                     ___wmul:		; BSR set to: ?
 10379                           
 10380                           	opt stack 26
 10381                           	line	4
 10382  003152  0E00               	movlw	low(0)
 10383  003154  0101               	movlb	1	; () banked
 10384  003156  0101               	movlb	1	; () banked
 10385  003158  6F57               	movwf	((___wmul@product))&0ffh
 10386  00315A  0E00               	movlw	high(0)
 10387  00315C  0101               	movlb	1	; () banked
 10388  00315E  6F58               	movwf	((___wmul@product+1))&0ffh
 10389                           	line	6
 10390                           	
 10391  003160                     l1696:		; BSR set to: ?
 10392                           
 10393                           	line	7
 10394  003160  0101               	movlb	1	; () banked
 10395                           	
 10396  003162  0101               	movlb	1	; () banked
 10397  003164  A153               	btfss	((___wmul@multiplier))&0ffh,(0)&7
 10398  003166  EFB7  F018         	goto	u4731
 10399  00316A  EFB9  F018         	goto	u4730
 10400  00316E                     u4731:
 10401  00316E  EFC5  F018         	goto	l1697
 10402  003172                     u4730:
 10403                           	line	8
 10404  003172  0101               	movlb	1	; () banked
 10405  003174  0101               	movlb	1	; () banked
 10406  003176  5155               	movf	((___wmul@multiplicand))&0ffh,w
 10407  003178  0101               	movlb	1	; () banked
 10408  00317A  0101               	movlb	1	; () banked
 10409  00317C  2757               	addwf	((___wmul@product))&0ffh
 10410  00317E  0101               	movlb	1	; () banked
 10411  003180  0101               	movlb	1	; () banked
 10412  003182  5156               	movf	((___wmul@multiplicand+1))&0ffh,w
 10413  003184  0101               	movlb	1	; () banked
 10414  003186  0101               	movlb	1	; () banked
 10415  003188  2358               	addwfc	((___wmul@product+1))&0ffh
 10416                           
 10417                           	
 10418  00318A                     l1697:		; BSR set to: ?
 10419                           
 10420                           	line	9
 10421  00318A  0101               	movlb	1	; () banked
 10422  00318C  90D8               	bcf	status,0
 10423  00318E  0101               	movlb	1	; () banked
 10424  003190  3755               	rlcf	((___wmul@multiplicand))&0ffh
 10425  003192  0101               	movlb	1	; () banked
 10426  003194  3756               	rlcf	((___wmul@multiplicand+1))&0ffh
 10427                           	line	10
 10428  003196  0101               	movlb	1	; () banked
 10429  003198  90D8               	bcf	status,0
 10430  00319A  0101               	movlb	1	; () banked
 10431  00319C  3354               	rrcf	((___wmul@multiplier+1))&0ffh
 10432  00319E  0101               	movlb	1	; () banked
 10433  0031A0  3353               	rrcf	((___wmul@multiplier))&0ffh
 10434                           	line	11
 10435  0031A2  0101               	movlb	1	; () banked
 10436  0031A4  0101               	movlb	1	; () banked
 10437  0031A6  5154               	movf	((___wmul@multiplier+1))&0ffh,w
 10438  0031A8  1153               	iorwf ((___wmul@multiplier))&0ffh,w
 10439                           
 10440  0031AA  A4D8               	btfss	status,2
 10441  0031AC  EFDA  F018         	goto	u4741
 10442  0031B0  EFDC  F018         	goto	u4740
 10443  0031B4                     u4741:
 10444  0031B4  EFB0  F018         	goto	l1696
 10445  0031B8                     u4740:
 10446                           	
 10447  0031B8                     l1695:		; BSR set to: ?
 10448                           
 10449                           	line	12
 10450  0031B8  C157  F153         	movff	(___wmul@product),(?___wmul)
 10451  0031BC  C158  F154         	movff	(___wmul@product+1),(?___wmul+1)
 10452  0031C0  EFE2  F018         	goto	l1693
 10453                           	line	13
 10454  0031C4                     l1693:
 10455                           			; BSR set to: ?
 10456                           
 10457  0031C4  0012               	return
 10458                           	opt stack 0
 10459                           GLOBAL __end_of___wmul
 10460  0031C6                     	__end_of___wmul:
 10461                           	FNSIZE	___wmul,2,4
 10462                           ; =============== function ___wmul ends ========
                                 ====
 10463                           
 10464                           	signat	___wmul,8314
 10465                           	global	___awmod
 10466                           	global	??___awmod
 10467                           	global	?___awmod
 10468                           
 10469                           ; *************** function ___awmod ************
                                 *****
 10470                           ; Defined at:
 10471                           ;		line 5 in file "C:\Program Files\HI-TECH Soft
                                 ware\PICC-18\PRO\9.66\sources\awmod.c"
 10472                           ; Parameters:
 10473                           ;		dividend       size:   2offs:   0	type: int 
 10474                           ;		divisor        size:   2offs:   2	type: int 
 10475                           ; Auto variables:
 10476                           ;		sign        	       	type: unsigned char 
 10477                           ;		counter     	       	type: unsigned char 
 10478                           ; Return value:
 10479                           ;		type: int 
 10480                           ;		size: 2
 10481                           ; Registers used:
 10482                           ;		wreg, status,2, status,0
 10483                           ; Tracked objects:
 10484                           ;		On entry : 0/0
 10485                           ;		On exit  : 0/0
 10486                           ;		Unchanged: 0/0
 10487                           ; Data sizes:
 10488                           ;		Autos:    2
 10489                           ;		Params:   4
 10490                           ;		Temp:     1
 10491                           ;		Total:    7
 10492                           ; This function calls:
 10493                           ; This function is called by:
 10494                           ;		_rtcDecToBCD
 10495                           ;		_wwvMakeTimeStruct
 10496                           ;		_wwvGetWeekDay
 10497                           ; This function uses a non-reentrant model
 10498                           ; 
 10499                                   psect   text40,class=CODE,space=0,reloc=
                                 2
 10500                           
 10501                           	opt lm
 10502                           	file	"C:\Program Files\HI-TECH Software\PICC-18
                                 \PRO\9.66\sources\awmod.c"
 10503                           	line	5
 10504  000000                     	__size_of___awmod	equ	__end_of___awmod-___awmod
 10505                           	
 10506  002734                     ___awmod:		; BSR set to: ?
 10507                           
 10508                           	opt stack 26
 10509                           	line	8
 10510  002734  0101               	movlb	1	; () banked
 10511  002736  6F59               	movwf	(??___awmod+2+0)&0ffh
 10512  002738  0E00               	movlw	low(0)
 10513  00273A  0101               	movlb	1	; () banked
 10514  00273C  0101               	movlb	1	; () banked
 10515  00273E  6F57               	movwf	((___awmod@sign))&0ffh
 10516  002740  0101               	movlb	1	; () banked
 10517  002742  5159               	movf	(??___awmod+2+0)&0ffh,w
 10518                           	line	9
 10519  002744  0101               	movlb	1	; () banked
 10520  002746  0101               	movlb	1	; () banked
 10521  002748  AF54               	btfss	((___awmod@dividend+1))&0ffh,7
 10522  00274A  EFA9  F013         	goto	u4751
 10523  00274E  EFAB  F013         	goto	u4750
 10524  002752                     u4751:
 10525  002752  EFBA  F013         	goto	l1433
 10526  002756                     u4750:
 10527                           	line	10
 10528  002756  0101               	movlb	1	; () banked
 10529  002758  0101               	movlb	1	; () banked
 10530  00275A  6D53               	negf	((___awmod@dividend))&0ffh
 10531  00275C  0101               	movlb	1	; () banked
 10532  00275E  1F54               	comf	((___awmod@dividend+1))&0ffh
 10533  002760  B0D8               	btfsc	status,0
 10534  002762  2B54               	incf	((___awmod@dividend+1))&0ffh
 10535                           	line	11
 10536  002764  0101               	movlb	1	; () banked
 10537  002766  6F59               	movwf	(??___awmod+2+0)&0ffh
 10538  002768  0E01               	movlw	low(01h)
 10539  00276A  0101               	movlb	1	; () banked
 10540  00276C  0101               	movlb	1	; () banked
 10541  00276E  6F57               	movwf	((___awmod@sign))&0ffh
 10542  002770  0101               	movlb	1	; () banked
 10543  002772  5159               	movf	(??___awmod+2+0)&0ffh,w
 10544                           	line	12
 10545                           	
 10546  002774                     l1433:		; BSR set to: ?
 10547                           
 10548                           	line	13
 10549  002774  0101               	movlb	1	; () banked
 10550  002776  0101               	movlb	1	; () banked
 10551  002778  AF56               	btfss	((___awmod@divisor+1))&0ffh,7
 10552  00277A  EFC1  F013         	goto	u4761
 10553  00277E  EFC3  F013         	goto	u4760
 10554  002782                     u4761:
 10555  002782  EFCA  F013         	goto	l1434
 10556  002786                     u4760:
 10557                           	line	14
 10558  002786  0101               	movlb	1	; () banked
 10559  002788  0101               	movlb	1	; () banked
 10560  00278A  6D55               	negf	((___awmod@divisor))&0ffh
 10561  00278C  0101               	movlb	1	; () banked
 10562  00278E  1F56               	comf	((___awmod@divisor+1))&0ffh
 10563  002790  B0D8               	btfsc	status,0
 10564  002792  2B56               	incf	((___awmod@divisor+1))&0ffh
 10565                           	
 10566  002794                     l1434:		; BSR set to: ?
 10567                           
 10568                           	line	15
 10569  002794  0101               	movlb	1	; () banked
 10570  002796  0101               	movlb	1	; () banked
 10571  002798  5156               	movf	((___awmod@divisor+1))&0ffh,w
 10572  00279A  1155               	iorwf ((___awmod@divisor))&0ffh,w
 10573                           
 10574  00279C  B4D8               	btfsc	status,2
 10575  00279E  EFD3  F013         	goto	u4771
 10576  0027A2  EFD5  F013         	goto	u4770
 10577  0027A6                     u4771:
 10578  0027A6  EF1B  F014         	goto	l1435
 10579  0027AA                     u4770:
 10580                           	line	16
 10581  0027AA  0101               	movlb	1	; () banked
 10582  0027AC  6F59               	movwf	(??___awmod+2+0)&0ffh
 10583  0027AE  0E01               	movlw	low(01h)
 10584  0027B0  0101               	movlb	1	; () banked
 10585  0027B2  0101               	movlb	1	; () banked
 10586  0027B4  6F58               	movwf	((___awmod@counter))&0ffh
 10587  0027B6  0101               	movlb	1	; () banked
 10588  0027B8  5159               	movf	(??___awmod+2+0)&0ffh,w
 10589                           	line	17
 10590  0027BA  EFE8  F013         	goto	l1436
 10591                           	
 10592  0027BE                     l1437:		; BSR set to: ?
 10593                           
 10594                           	line	18
 10595  0027BE  0101               	movlb	1	; () banked
 10596  0027C0  90D8               	bcf	status,0
 10597  0027C2  0101               	movlb	1	; () banked
 10598  0027C4  3755               	rlcf	((___awmod@divisor))&0ffh
 10599  0027C6  0101               	movlb	1	; () banked
 10600  0027C8  3756               	rlcf	((___awmod@divisor+1))&0ffh
 10601                           	line	19
 10602  0027CA  0101               	movlb	1	; () banked
 10603  0027CC  0101               	movlb	1	; () banked
 10604  0027CE  2B58               	incf	((___awmod@counter))&0ffh
 10605                           	line	20
 10606                           	
 10607  0027D0                     l1436:		; BSR set to: ?
 10608                           
 10609                           	line	17
 10610  0027D0  0101               	movlb	1	; () banked
 10611                           	
 10612  0027D2  0101               	movlb	1	; () banked
 10613  0027D4  AF56               	btfss	((___awmod@divisor+1))&0ffh,(15)&7
 10614  0027D6  EFEF  F013         	goto	u4781
 10615  0027DA  EFF1  F013         	goto	u4780
 10616  0027DE                     u4781:
 10617  0027DE  EFDF  F013         	goto	l1437
 10618  0027E2                     u4780:
 10619                           	
 10620  0027E2                     l1438:		; BSR set to: ?
 10621                           
 10622                           	line	21
 10623                           	
 10624  0027E2                     l1441:		; BSR set to: ?
 10625                           
 10626                           	line	22
 10627  0027E2  0101               	movlb	1	; () banked
 10628  0027E4  0101               	movlb	1	; () banked
 10629  0027E6  5155               	movf	((___awmod@divisor))&0ffh,w
 10630  0027E8  0101               	movlb	1	; () banked
 10631  0027EA  0101               	movlb	1	; () banked
 10632  0027EC  5D53               	subwf	((___awmod@dividend))&0ffh,w
 10633  0027EE  0101               	movlb	1	; () banked
 10634  0027F0  0101               	movlb	1	; () banked
 10635  0027F2  5156               	movf	((___awmod@divisor+1))&0ffh,w
 10636  0027F4  0101               	movlb	1	; () banked
 10637  0027F6  0101               	movlb	1	; () banked
 10638  0027F8  5954               	subwfb	((___awmod@dividend+1))&0ffh,w
 10639  0027FA  A0D8               	btfss	status,0
 10640  0027FC  EF02  F014         	goto	u4791
 10641  002800  EF04  F014         	goto	u4790
 10642  002804                     u4791:
 10643  002804  EF10  F014         	goto	l1442
 10644  002808                     u4790:
 10645                           	line	23
 10646  002808  0101               	movlb	1	; () banked
 10647  00280A  0101               	movlb	1	; () banked
 10648  00280C  5155               	movf	((___awmod@divisor))&0ffh,w
 10649  00280E  0101               	movlb	1	; () banked
 10650  002810  0101               	movlb	1	; () banked
 10651  002812  5F53               	subwf	((___awmod@dividend))&0ffh
 10652  002814  0101               	movlb	1	; () banked
 10653  002816  0101               	movlb	1	; () banked
 10654  002818  5156               	movf	((___awmod@divisor+1))&0ffh,w
 10655  00281A  0101               	movlb	1	; () banked
 10656  00281C  0101               	movlb	1	; () banked
 10657  00281E  5B54               	subwfb	((___awmod@dividend+1))&0ffh
 10658                           
 10659                           	
 10660  002820                     l1442:		; BSR set to: ?
 10661                           
 10662                           	line	24
 10663  002820  0101               	movlb	1	; () banked
 10664  002822  90D8               	bcf	status,0
 10665  002824  0101               	movlb	1	; () banked
 10666  002826  3356               	rrcf	((___awmod@divisor+1))&0ffh
 10667  002828  0101               	movlb	1	; () banked
 10668  00282A  3355               	rrcf	((___awmod@divisor))&0ffh
 10669                           	line	25
 10670  00282C  0101               	movlb	1	; () banked
 10671  00282E  0101               	movlb	1	; () banked
 10672  002830  2F58               	decfsz	((___awmod@counter))&0ffh
 10673                           	
 10674  002832  EFF1  F013         	goto	l1441
 10675                           	
 10676  002836                     l1440:		; BSR set to: ?
 10677                           
 10678                           	line	26
 10679                           	
 10680  002836                     l1435:		; BSR set to: ?
 10681                           
 10682                           	line	27
 10683  002836  0101               	movlb	1	; () banked
 10684  002838  0101               	movlb	1	; () banked
 10685  00283A  5157               	movf	((___awmod@sign))&0ffh,w
 10686  00283C  B4D8               	btfsc	status,2
 10687  00283E  EF23  F014         	goto	u4801
 10688  002842  EF25  F014         	goto	u4800
 10689  002846                     u4801:
 10690  002846  EF2C  F014         	goto	l1443
 10691  00284A                     u4800:
 10692                           	line	28
 10693  00284A  0101               	movlb	1	; () banked
 10694  00284C  0101               	movlb	1	; () banked
 10695  00284E  6D53               	negf	((___awmod@dividend))&0ffh
 10696  002850  0101               	movlb	1	; () banked
 10697  002852  1F54               	comf	((___awmod@dividend+1))&0ffh
 10698  002854  B0D8               	btfsc	status,0
 10699  002856  2B54               	incf	((___awmod@dividend+1))&0ffh
 10700                           	
 10701  002858                     l1443:		; BSR set to: ?
 10702                           
 10703                           	line	29
 10704  002858  C153  F153         	movff	(___awmod@dividend),(?___awmod)
 10705  00285C  C154  F154         	movff	(___awmod@dividend+1),(?___awmod+1)
 10706  002860  EF32  F014         	goto	l1432
 10707                           	line	30
 10708  002864                     l1432:
 10709                           			; BSR set to: ?
 10710                           
 10711  002864  0012               	return
 10712                           	opt stack 0
 10713                           GLOBAL __end_of___awmod
 10714  002866                     	__end_of___awmod:
 10715                           	FNSIZE	___awmod,3,4
 10716                           ; =============== function ___awmod ends =======
                                 =====
 10717                           
 10718                           	signat	___awmod,8314
 10719                           	global	___awdiv
 10720                           	global	??___awdiv
 10721                           	global	?___awdiv
 10722                           
 10723                           ; *************** function ___awdiv ************
                                 *****
 10724                           ; Defined at:
 10725                           ;		line 5 in file "C:\Program Files\HI-TECH Soft
                                 ware\PICC-18\PRO\9.66\sources\awdiv.c"
 10726                           ; Parameters:
 10727                           ;		dividend       size:   2offs:   0	type: int 
 10728                           ;		divisor        size:   2offs:   2	type: int 
 10729                           ; Auto variables:
 10730                           ;		counter     	       	type: unsigned char 
 10731                           ;		sign        	       	type: unsigned char 
 10732                           ;		quotient    	       	type: int 
 10733                           ; Return value:
 10734                           ;		type: int 
 10735                           ;		size: 2
 10736                           ; Registers used:
 10737                           ;		wreg, status,2, status,0
 10738                           ; Tracked objects:
 10739                           ;		On entry : 0/0
 10740                           ;		On exit  : 0/0
 10741                           ;		Unchanged: 0/0
 10742                           ; Data sizes:
 10743                           ;		Autos:    4
 10744                           ;		Params:   4
 10745                           ;		Temp:     1
 10746                           ;		Total:    9
 10747                           ; This function calls:
 10748                           ; This function is called by:
 10749                           ;		_rtcDecToBCD
 10750                           ;		_wwvGetWeekDay
 10751                           ; This function uses a non-reentrant model
 10752                           ; 
 10753                                   psect   text41,class=CODE,space=0,reloc=
                                 2
 10754                           
 10755                           	opt lm
 10756                           	file	"C:\Program Files\HI-TECH Software\PICC-18
                                 \PRO\9.66\sources\awdiv.c"
 10757                           	line	5
 10758  000000                     	__size_of___awdiv	equ	__end_of___awdiv-___awdiv
 10759                           	
 10760  002494                     ___awdiv:		; BSR set to: ?
 10761                           
 10762                           	opt stack 26
 10763                           	line	9
 10764  002494  0101               	movlb	1	; () banked
 10765  002496  6F5B               	movwf	(??___awdiv+4+0)&0ffh
 10766  002498  0E00               	movlw	low(0)
 10767  00249A  0101               	movlb	1	; () banked
 10768  00249C  0101               	movlb	1	; () banked
 10769  00249E  6F58               	movwf	((___awdiv@sign))&0ffh
 10770  0024A0  0101               	movlb	1	; () banked
 10771  0024A2  515B               	movf	(??___awdiv+4+0)&0ffh,w
 10772                           	line	10
 10773  0024A4  0101               	movlb	1	; () banked
 10774  0024A6  0101               	movlb	1	; () banked
 10775  0024A8  AF56               	btfss	((___awdiv@divisor+1))&0ffh,7
 10776  0024AA  EF59  F012         	goto	u4811
 10777  0024AE  EF5B  F012         	goto	u4810
 10778  0024B2                     u4811:
 10779  0024B2  EF6A  F012         	goto	l1421
 10780  0024B6                     u4810:
 10781                           	line	11
 10782  0024B6  0101               	movlb	1	; () banked
 10783  0024B8  0101               	movlb	1	; () banked
 10784  0024BA  6D55               	negf	((___awdiv@divisor))&0ffh
 10785  0024BC  0101               	movlb	1	; () banked
 10786  0024BE  1F56               	comf	((___awdiv@divisor+1))&0ffh
 10787  0024C0  B0D8               	btfsc	status,0
 10788  0024C2  2B56               	incf	((___awdiv@divisor+1))&0ffh
 10789                           	line	12
 10790  0024C4  0101               	movlb	1	; () banked
 10791  0024C6  6F5B               	movwf	(??___awdiv+4+0)&0ffh
 10792  0024C8  0E01               	movlw	low(01h)
 10793  0024CA  0101               	movlb	1	; () banked
 10794  0024CC  0101               	movlb	1	; () banked
 10795  0024CE  6F58               	movwf	((___awdiv@sign))&0ffh
 10796  0024D0  0101               	movlb	1	; () banked
 10797  0024D2  515B               	movf	(??___awdiv+4+0)&0ffh,w
 10798                           	line	13
 10799                           	
 10800  0024D4                     l1421:		; BSR set to: ?
 10801                           
 10802                           	line	14
 10803  0024D4  0101               	movlb	1	; () banked
 10804  0024D6  0101               	movlb	1	; () banked
 10805  0024D8  AF54               	btfss	((___awdiv@dividend+1))&0ffh,7
 10806  0024DA  EF71  F012         	goto	u4821
 10807  0024DE  EF73  F012         	goto	u4820
 10808  0024E2                     u4821:
 10809  0024E2  EF7E  F012         	goto	l1422
 10810  0024E6                     u4820:
 10811                           	line	15
 10812  0024E6  0101               	movlb	1	; () banked
 10813  0024E8  0101               	movlb	1	; () banked
 10814  0024EA  6D53               	negf	((___awdiv@dividend))&0ffh
 10815  0024EC  0101               	movlb	1	; () banked
 10816  0024EE  1F54               	comf	((___awdiv@dividend+1))&0ffh
 10817  0024F0  B0D8               	btfsc	status,0
 10818  0024F2  2B54               	incf	((___awdiv@dividend+1))&0ffh
 10819                           	line	16
 10820  0024F4  0E01               	movlw	(01h)&0ffh
 10821  0024F6  0101               	movlb	1	; () banked
 10822  0024F8  0101               	movlb	1	; () banked
 10823  0024FA  1B58               	xorwf	((___awdiv@sign))&0ffh
 10824                           	line	17
 10825                           	
 10826  0024FC                     l1422:		; BSR set to: ?
 10827                           
 10828                           	line	18
 10829  0024FC  0E00               	movlw	low(0)
 10830  0024FE  0101               	movlb	1	; () banked
 10831  002500  0101               	movlb	1	; () banked
 10832  002502  6F59               	movwf	((___awdiv@quotient))&0ffh
 10833  002504  0E00               	movlw	high(0)
 10834  002506  0101               	movlb	1	; () banked
 10835  002508  6F5A               	movwf	((___awdiv@quotient+1))&0ffh
 10836                           	line	19
 10837  00250A  0101               	movlb	1	; () banked
 10838  00250C  0101               	movlb	1	; () banked
 10839  00250E  5156               	movf	((___awdiv@divisor+1))&0ffh,w
 10840  002510  1155               	iorwf ((___awdiv@divisor))&0ffh,w
 10841                           
 10842  002512  B4D8               	btfsc	status,2
 10843  002514  EF8E  F012         	goto	u4831
 10844  002518  EF90  F012         	goto	u4830
 10845  00251C                     u4831:
 10846  00251C  EFDF  F012         	goto	l1423
 10847  002520                     u4830:
 10848                           	line	20
 10849  002520  0101               	movlb	1	; () banked
 10850  002522  6F5B               	movwf	(??___awdiv+4+0)&0ffh
 10851  002524  0E01               	movlw	low(01h)
 10852  002526  0101               	movlb	1	; () banked
 10853  002528  0101               	movlb	1	; () banked
 10854  00252A  6F57               	movwf	((___awdiv@counter))&0ffh
 10855  00252C  0101               	movlb	1	; () banked
 10856  00252E  515B               	movf	(??___awdiv+4+0)&0ffh,w
 10857                           	line	21
 10858  002530  EFA3  F012         	goto	l1424
 10859                           	
 10860  002534                     l1425:		; BSR set to: ?
 10861                           
 10862                           	line	22
 10863  002534  0101               	movlb	1	; () banked
 10864  002536  90D8               	bcf	status,0
 10865  002538  0101               	movlb	1	; () banked
 10866  00253A  3755               	rlcf	((___awdiv@divisor))&0ffh
 10867  00253C  0101               	movlb	1	; () banked
 10868  00253E  3756               	rlcf	((___awdiv@divisor+1))&0ffh
 10869                           	line	23
 10870  002540  0101               	movlb	1	; () banked
 10871  002542  0101               	movlb	1	; () banked
 10872  002544  2B57               	incf	((___awdiv@counter))&0ffh
 10873                           	line	24
 10874                           	
 10875  002546                     l1424:		; BSR set to: ?
 10876                           
 10877                           	line	21
 10878  002546  0101               	movlb	1	; () banked
 10879                           	
 10880  002548  0101               	movlb	1	; () banked
 10881  00254A  AF56               	btfss	((___awdiv@divisor+1))&0ffh,(15)&7
 10882  00254C  EFAA  F012         	goto	u4841
 10883  002550  EFAC  F012         	goto	u4840
 10884  002554                     u4841:
 10885  002554  EF9A  F012         	goto	l1425
 10886  002558                     u4840:
 10887                           	
 10888  002558                     l1426:		; BSR set to: ?
 10889                           
 10890                           	line	25
 10891                           	
 10892  002558                     l1429:		; BSR set to: ?
 10893                           
 10894                           	line	26
 10895  002558  0101               	movlb	1	; () banked
 10896  00255A  90D8               	bcf	status,0
 10897  00255C  0101               	movlb	1	; () banked
 10898  00255E  3759               	rlcf	((___awdiv@quotient))&0ffh
 10899  002560  0101               	movlb	1	; () banked
 10900  002562  375A               	rlcf	((___awdiv@quotient+1))&0ffh
 10901                           	line	27
 10902  002564  0101               	movlb	1	; () banked
 10903  002566  0101               	movlb	1	; () banked
 10904  002568  5155               	movf	((___awdiv@divisor))&0ffh,w
 10905  00256A  0101               	movlb	1	; () banked
 10906  00256C  0101               	movlb	1	; () banked
 10907  00256E  5D53               	subwf	((___awdiv@dividend))&0ffh,w
 10908  002570  0101               	movlb	1	; () banked
 10909  002572  0101               	movlb	1	; () banked
 10910  002574  5156               	movf	((___awdiv@divisor+1))&0ffh,w
 10911  002576  0101               	movlb	1	; () banked
 10912  002578  0101               	movlb	1	; () banked
 10913  00257A  5954               	subwfb	((___awdiv@dividend+1))&0ffh,w
 10914  00257C  A0D8               	btfss	status,0
 10915  00257E  EFC3  F012         	goto	u4851
 10916  002582  EFC5  F012         	goto	u4850
 10917  002586                     u4851:
 10918  002586  EFD4  F012         	goto	l1430
 10919  00258A                     u4850:
 10920                           	line	28
 10921  00258A  0101               	movlb	1	; () banked
 10922  00258C  0101               	movlb	1	; () banked
 10923  00258E  5155               	movf	((___awdiv@divisor))&0ffh,w
 10924  002590  0101               	movlb	1	; () banked
 10925  002592  0101               	movlb	1	; () banked
 10926  002594  5F53               	subwf	((___awdiv@dividend))&0ffh
 10927  002596  0101               	movlb	1	; () banked
 10928  002598  0101               	movlb	1	; () banked
 10929  00259A  5156               	movf	((___awdiv@divisor+1))&0ffh,w
 10930  00259C  0101               	movlb	1	; () banked
 10931  00259E  0101               	movlb	1	; () banked
 10932  0025A0  5B54               	subwfb	((___awdiv@dividend+1))&0ffh
 10933                           
 10934                           	line	29
 10935  0025A2  0101               	movlb	1	; () banked
 10936  0025A4  0101               	movlb	1	; () banked
 10937  0025A6  8159               	bsf	(0+(0/8)+(___awdiv@quotient))&0ffh,(0)&7
 10938                           	line	30
 10939                           	
 10940  0025A8                     l1430:		; BSR set to: ?
 10941                           
 10942                           	line	31
 10943  0025A8  0101               	movlb	1	; () banked
 10944  0025AA  90D8               	bcf	status,0
 10945  0025AC  0101               	movlb	1	; () banked
 10946  0025AE  3356               	rrcf	((___awdiv@divisor+1))&0ffh
 10947  0025B0  0101               	movlb	1	; () banked
 10948  0025B2  3355               	rrcf	((___awdiv@divisor))&0ffh
 10949                           	line	32
 10950  0025B4  0101               	movlb	1	; () banked
 10951  0025B6  0101               	movlb	1	; () banked
 10952  0025B8  2F57               	decfsz	((___awdiv@counter))&0ffh
 10953                           	
 10954  0025BA  EFAC  F012         	goto	l1429
 10955                           	
 10956  0025BE                     l1428:		; BSR set to: ?
 10957                           
 10958                           	line	33
 10959                           	
 10960  0025BE                     l1423:		; BSR set to: ?
 10961                           
 10962                           	line	34
 10963  0025BE  0101               	movlb	1	; () banked
 10964  0025C0  0101               	movlb	1	; () banked
 10965  0025C2  5158               	movf	((___awdiv@sign))&0ffh,w
 10966  0025C4  B4D8               	btfsc	status,2
 10967  0025C6  EFE7  F012         	goto	u4861
 10968  0025CA  EFE9  F012         	goto	u4860
 10969  0025CE                     u4861:
 10970  0025CE  EFF0  F012         	goto	l1431
 10971  0025D2                     u4860:
 10972                           	line	35
 10973  0025D2  0101               	movlb	1	; () banked
 10974  0025D4  0101               	movlb	1	; () banked
 10975  0025D6  6D59               	negf	((___awdiv@quotient))&0ffh
 10976  0025D8  0101               	movlb	1	; () banked
 10977  0025DA  1F5A               	comf	((___awdiv@quotient+1))&0ffh
 10978  0025DC  B0D8               	btfsc	status,0
 10979  0025DE  2B5A               	incf	((___awdiv@quotient+1))&0ffh
 10980                           	
 10981  0025E0                     l1431:		; BSR set to: ?
 10982                           
 10983                           	line	36
 10984  0025E0  C159  F153         	movff	(___awdiv@quotient),(?___awdiv)
 10985  0025E4  C15A  F154         	movff	(___awdiv@quotient+1),(?___awdiv+1)
 10986  0025E8  EFF6  F012         	goto	l1420
 10987                           	line	37
 10988  0025EC                     l1420:
 10989                           			; BSR set to: ?
 10990                           
 10991  0025EC  0012               	return
 10992                           	opt stack 0
 10993                           GLOBAL __end_of___awdiv
 10994  0025EE                     	__end_of___awdiv:
 10995                           	FNSIZE	___awdiv,5,4
 10996                           ; =============== function ___awdiv ends =======
                                 =====
 10997                           
 10998                           	signat	___awdiv,8314
 10999                           	global	_spiChipSelect
 11000                           	global	??_spiChipSelect
 11001                           	global	?_spiChipSelect
 11002                           
 11003                           ; *************** function _spiChipSelect ******
                                 ***********
 11004                           ; Defined at:
 11005                           ;		line 154 in file "spi.c"
 11006                           ; Parameters:
 11007                           ;		None
 11008                           ; Auto variables:
 11009                           ;		None
 11010                           ; Return value:
 11011                           ;		type: void 
 11012                           ;		size: 0
 11013                           ; Registers used:
 11014                           ;		cstack
 11015                           ; Tracked objects:
 11016                           ;		On entry : 0/0
 11017                           ;		On exit  : 0/0
 11018                           ;		Unchanged: 0/0
 11019                           ; Data sizes:
 11020                           ;		Autos:    0
 11021                           ;		Params:   0
 11022                           ;		Temp:     0
 11023                           ;		Total:    0
 11024                           ; This function calls:
 11025                           ;		_DelayShort
 11026                           ; This function is called by:
 11027                           ;		_rtcReadRam
 11028                           ;		_rtcWriteRam
 11029                           ;		_rtcGetClock
 11030                           ; This function uses a non-reentrant model
 11031                           ; 
 11032                                   psect   text42,class=CODE,space=0,reloc=
                                 2
 11033                           
 11034                           	opt lm
 11035                           	file	"spi.c"
 11036                           	line	154
 11037  000000                     	__size_of_spiChipSelect	equ	__end_of_spiChipSel
                                 ect-_spiChipSelect
 11038                           ;spi.c: 153: void spiChipSelect(void)
 11039                           ;spi.c: 154: {
 11040                           	
 11041  00377E                     _spiChipSelect:		; BSR set to: ?
 11042                           
 11043                           	opt stack 26
 11044                           	line	155
 11045                           ;spi.c: 155: LATA3 = 1;
 11046  00377E  8689               	bsf	c:(31819/8),(31819)&7	;volatile
 11047                           	line	156
 11048                           ;spi.c: 156: DelayShort();
 11049  003780  ECC3  F01B         	call	_DelayShort	;wreg free
 11050                           	line	157
 11051                           ;spi.c: 157: }
 11052  003784                     l1070:
 11053                           			; BSR set to: ?
 11054                           
 11055  003784  0012               	return
 11056                           	opt stack 0
 11057                           GLOBAL __end_of_spiChipSelect
 11058  003786                     	__end_of_spiChipSelect:
 11059                           	FNSIZE	_spiChipSelect,0,0
 11060                           ; =============== function _spiChipSelect ends =
                                 ===========
 11061                           
 11062                           	signat	_spiChipSelect,88
 11063                           	global	_spiWrite
 11064                           	global	??_spiWrite
 11065                           	global	?_spiWrite
 11066                           
 11067                           ; *************** function _spiWrite ***********
                                 ******
 11068                           ; Defined at:
 11069                           ;		line 110 in file "spi.c"
 11070                           ; Parameters:
 11071                           ;		yByte          size:   1offs:   0	type: unsig
                                 ned char 
 11072                           ; Auto variables:
 11073                           ;		yShift      	       	type: unsigned char 
 11074                           ; Return value:
 11075                           ;		type: void 
 11076                           ;		size: 0
 11077                           ; Registers used:
 11078                           ;		wreg, status,2, status,0, cstack
 11079                           ; Tracked objects:
 11080                           ;		On entry : 0/0
 11081                           ;		On exit  : 0/0
 11082                           ;		Unchanged: 0/0
 11083                           ; Data sizes:
 11084                           ;		Autos:    1
 11085                           ;		Params:   1
 11086                           ;		Temp:     1
 11087                           ;		Total:    3
 11088                           ; This function calls:
 11089                           ;		_DelayShort
 11090                           ; This function is called by:
 11091                           ;		_rtcReadRam
 11092                           ;		_rtcWriteRam
 11093                           ;		_rtcGetClock
 11094                           ; This function uses a non-reentrant model
 11095                           ; 
 11096                                   psect   text43,class=CODE,space=0,reloc=
                                 2
 11097                           
 11098                           	opt lm
 11099                           	file	"spi.c"
 11100                           	line	110
 11101  000000                     	__size_of_spiWrite	equ	__end_of_spiWrite-_spiWr
                                 ite
 11102                           ;spi.c: 109: void spiWrite(UINT8 yByte)
 11103                           ;spi.c: 110: {
 11104                           	
 11105  003318                     _spiWrite:		; BSR set to: ?
 11106                           
 11107                           	opt stack 26
 11108                           	line	113
 11109                           ;spi.c: 111: UINT8 yShift;
 11110                           ;spi.c: 113: TRISA4 = 0;
 11111  003318  9892               	bcf	c:(31892/8),(31892)&7	;volatile
 11112                           	line	115
 11113                           ;spi.c: 115: for(yShift = 0x01; yShift; yShift <
                                 <= 1)
 11114  00331A  0101               	movlb	1	; () banked
 11115  00331C  6F39               	movwf	(??_spiWrite+1+0)&0ffh
 11116  00331E  0E01               	movlw	low(01h)
 11117  003320  0101               	movlb	1	; () banked
 11118  003322  0101               	movlb	1	; () banked
 11119  003324  6F38               	movwf	((spiWrite@yShift))&0ffh
 11120  003326  0101               	movlb	1	; () banked
 11121  003328  5139               	movf	(??_spiWrite+1+0)&0ffh,w
 11122  00332A  EFB2  F019         	goto	l1067
 11123                           	line	116
 11124                           	
 11125  00332E                     l1064:		; BSR set to: ?
 11126                           
 11127                           	line	117
 11128                           ;spi.c: 116: {
 11129                           ;spi.c: 117: if(yByte & yShift)
 11130  00332E  0101               	movlb	1	; () banked
 11131  003330  0101               	movlb	1	; () banked
 11132  003332  5137               	movf	((spiWrite@yByte))&0ffh,w
 11133  003334  0101               	movlb	1	; () banked
 11134  003336  0101               	movlb	1	; () banked
 11135  003338  1538               	andwf	((spiWrite@yShift))&0ffh,w
 11136  00333A  0900               	iorlw	0
 11137  00333C  B4D8               	btfsc	status,2
 11138  00333E  EFA3  F019         	goto	u4871
 11139  003342  EFA5  F019         	goto	u4870
 11140  003346                     u4871:
 11141  003346  EFA8  F019         	goto	l1068
 11142  00334A                     u4870:
 11143                           	line	119
 11144                           ;spi.c: 118: {
 11145                           ;spi.c: 119: LATA4 = 1;
 11146  00334A  8889               	bsf	c:(31820/8),(31820)&7	;volatile
 11147                           	line	120
 11148                           ;spi.c: 120: }
 11149  00334C  EFA9  F019         	goto	l1069
 11150                           	line	121
 11151                           	
 11152  003350                     l1068:		; BSR set to: ?
 11153                           
 11154                           	line	123
 11155                           ;spi.c: 121: else
 11156                           ;spi.c: 122: {
 11157                           ;spi.c: 123: LATA4 = 0;
 11158  003350  9889               	bcf	c:(31820/8),(31820)&7	;volatile
 11159                           	line	124
 11160                           	
 11161  003352                     l1069:		; BSR set to: ?
 11162                           
 11163                           	line	126
 11164                           ;spi.c: 124: }
 11165                           ;spi.c: 126: LATA5 = 1;
 11166  003352  8A89               	bsf	c:(31821/8),(31821)&7	;volatile
 11167                           	line	127
 11168                           ;spi.c: 127: DelayShort();
 11169  003354  ECC3  F01B         	call	_DelayShort	;wreg free
 11170                           	line	128
 11171                           ;spi.c: 128: LATA5 = 0;
 11172  003358  9A89               	bcf	c:(31821/8),(31821)&7	;volatile
 11173                           	line	129
 11174                           ;spi.c: 129: DelayShort();
 11175  00335A  ECC3  F01B         	call	_DelayShort	;wreg free
 11176                           	line	115
 11177  00335E  0101               	movlb	1	; () banked
 11178  003360  90D8               	bcf status,0
 11179  003362  3738               	rlcf	((spiWrite@yShift))&0ffh
 11180                           
 11181                           	
 11182  003364                     l1067:		; BSR set to: ?
 11183                           
 11184  003364  0101               	movlb	1	; () banked
 11185  003366  0101               	movlb	1	; () banked
 11186  003368  6738               	tstfsz	((spiWrite@yShift))&0ffh
 11187  00336A  EFB9  F019         	goto	u4881
 11188  00336E  EFBB  F019         	goto	u4880
 11189  003372                     u4881:
 11190  003372  EF97  F019         	goto	l1064
 11191  003376                     u4880:
 11192                           	
 11193  003376                     l1065:		; BSR set to: ?
 11194                           
 11195                           	line	133
 11196                           ;spi.c: 130: }
 11197                           ;spi.c: 133: }
 11198  003376                     l1063:
 11199                           			; BSR set to: ?
 11200                           
 11201  003376  0012               	return
 11202                           	opt stack 0
 11203                           GLOBAL __end_of_spiWrite
 11204  003378                     	__end_of_spiWrite:
 11205                           	FNSIZE	_spiWrite,2,1
 11206                           ; =============== function _spiWrite ends ======
                                 ======
 11207                           
 11208                           	signat	_spiWrite,4216
 11209                           	global	_glcdWriteChar
 11210                           	global	??_glcdWriteChar
 11211                           	global	?_glcdWriteChar
 11212                           
 11213                           ; *************** function _glcdWriteChar ******
                                 ***********
 11214                           ; Defined at:
 11215                           ;		line 211 in file "glcd.c"
 11216                           ; Parameters:
 11217                           ;		yChar          size:   1offs:   0	type: unsig
                                 ned char 
 11218                           ; Auto variables:
 11219                           ;		pChar       	       	type: PTR unsigned char 
                                 ; Largest target is 576
 11220                           ;		 -> yFont6x8(576), 
 11221                           ;		i           	       	type: unsigned int 
 11222                           ; Return value:
 11223                           ;		type: void 
 11224                           ;		size: 0
 11225                           ; Registers used:
 11226                           ;		wreg, status,2, status,0, tblptrl, tblptrh, t
                                 blptru, tablat, prodl, prodh, cstack
 11227                           ; Tracked objects:
 11228                           ;		On entry : 0/0
 11229                           ;		On exit  : 0/0
 11230                           ;		Unchanged: 0/0
 11231                           ; Data sizes:
 11232                           ;		Autos:    4
 11233                           ;		Params:   1
 11234                           ;		Temp:     2
 11235                           ;		Total:    7
 11236                           ; This function calls:
 11237                           ;		_glbaseWriteData
 11238                           ;		_glcdSetCol
 11239                           ;		_glcdSetPage
 11240                           ; This function is called by:
 11241                           ;		_glcdWriteString
 11242                           ;		_wwvGetTime
 11243                           ; This function uses a non-reentrant model
 11244                           ; 
 11245                                   psect   text44,class=CODE,space=0,reloc=
                                 2
 11246                           
 11247                           	opt lm
 11248                           	file	"glcd.c"
 11249                           	line	211
 11250  000000                     	__size_of_glcdWriteChar	equ	__end_of_glcdWriteC
                                 har-_glcdWriteChar
 11251                           ;glcd.c: 210: void glcdWriteChar(UINT8 yChar)
 11252                           ;glcd.c: 211: {
 11253                           	
 11254  002990                     _glcdWriteChar:		; BSR set to: ?
 11255                           
 11256                           	opt stack 26
 11257                           	line	215
 11258  002990  0E20               	movlw	(020h)&0ffh
 11259  002992  0101               	movlb	1	; () banked
 11260  002994  0101               	movlb	1	; () banked
 11261  002996  5F36               	subwf	((glcdWriteChar@yChar))&0ffh
 11262                           	line	218
 11263                           ;glcd.c: 218: for(i = 0; i < 6; i++)
 11264  002998  0E00               	movlw	low(0)
 11265  00299A  0101               	movlb	1	; () banked
 11266  00299C  0101               	movlb	1	; () banked
 11267  00299E  6F39               	movwf	((glcdWriteChar@i))&0ffh
 11268  0029A0  0E00               	movlw	high(0)
 11269  0029A2  0101               	movlb	1	; () banked
 11270  0029A4  6F3A               	movwf	((glcdWriteChar@i+1))&0ffh
 11271  0029A6  0E06               	movlw	06h
 11272  0029A8  0101               	movlb	1	; () banked
 11273  0029AA  0101               	movlb	1	; () banked
 11274  0029AC  5D39               	subwf	((glcdWriteChar@i))&0ffh,w
 11275  0029AE  0E00               	movlw	0
 11276  0029B0  0101               	movlb	1	; () banked
 11277  0029B2  593A               	subwfb	((glcdWriteChar@i+1))&0ffh,w
 11278  0029B4  A0D8               	btfss	status,0
 11279  0029B6  EFDF  F014         	goto	u4891
 11280  0029BA  EFE1  F014         	goto	u4890
 11281  0029BE                     u4891:
 11282  0029BE  EFE3  F014         	goto	l394
 11283  0029C2                     u4890:
 11284  0029C2  EF5C  F015         	goto	l395
 11285                           	line	219
 11286                           	
 11287  0029C6                     l394:		; BSR set to: ?
 11288                           
 11289                           	line	220
 11290                           ;glcd.c: 219: {
 11291                           ;glcd.c: 220: pChar = ((UINT8 *)yFont6x8 + (6 * 
                                 yChar) + i);
 11292  0029C6  0101               	movlb	1	; () banked
 11293  0029C8  0101               	movlb	1	; () banked
 11294  0029CA  5136               	movf	((glcdWriteChar@yChar))&0ffh,w
 11295  0029CC  0D06               	mullw	06h
 11296  0029CE  0EF2               	movlw	low(_yFont6x8)
 11297  0029D0  24F3               	addwf	(prodl),c,w
 11298  0029D2  0101               	movlb	1	; () banked
 11299  0029D4  6F3B               	movwf	(??_glcdWriteChar+4+0)&0ffh
 11300  0029D6  0E39               	movlw	high(_yFont6x8)
 11301  0029D8  20F4               	addwfc	prod+1,w
 11302  0029DA  0101               	movlb	1	; () banked
 11303  0029DC  6F3C               	movwf	1+(??_glcdWriteChar+4+0)&0ffh
 11304  0029DE  0101               	movlb	1	; () banked
 11305  0029E0  0101               	movlb	1	; () banked
 11306  0029E2  5139               	movf	((glcdWriteChar@i))&0ffh,w
 11307  0029E4  0101               	movlb	1	; () banked
 11308  0029E6  253B               	addwf	(??_glcdWriteChar+4+0)&0ffh,w
 11309  0029E8  0101               	movlb	1	; () banked
 11310                           	
 11311  0029EA  0101               	movlb	1	; () banked
 11312  0029EC  6F37               	movwf	((glcdWriteChar@pChar))&0ffh
 11313  0029EE  0101               	movlb	1	; () banked
 11314  0029F0  0101               	movlb	1	; () banked
 11315  0029F2  513A               	movf	((glcdWriteChar@i+1))&0ffh,w
 11316  0029F4  0101               	movlb	1	; () banked
 11317  0029F6  213C               	addwfc	(??_glcdWriteChar+4+1)&0ffh,w
 11318  0029F8  0101               	movlb	1	; () banked
 11319  0029FA  6F38               	movwf	1+((glcdWriteChar@pChar))&0ffh
 11320                           	line	221
 11321                           ;glcd.c: 221: glbaseWriteData(*pChar, 1, s_yLast
                                 Seg);
 11322  0029FC  C007 F148          	movff	(c:7),0+(?_glbaseWriteData+02h)	;volatile
 11323  002A00  0101               	movlb	1	; () banked
 11324  002A02  6F3B               	movwf	(??_glcdWriteChar+4+0)&0ffh
 11325  002A04  0E01               	movlw	low(01h)
 11326  002A06  0101               	movlb	1	; () banked
 11327  002A08  0101               	movlb	1	; () banked
 11328  002A0A  6F47               	movwf	(0+(?_glbaseWriteData+01h))&0ffh
 11329  002A0C  0101               	movlb	1	; () banked
 11330  002A0E  513B               	movf	(??_glcdWriteChar+4+0)&0ffh,w
 11331  002A10  0101               	movlb	1	; () banked
 11332  002A12  C137  FFF6         	movff	(glcdWriteChar@pChar),tblptrl
 11333  002A16  0101               	movlb	1	; () banked
 11334  002A18  C138  FFF7         	movff	(glcdWriteChar@pChar+1),tblptrh
 11335  002A1C  0008               	tblrd	*
 11336                           	
 11337  002A1E  0101               	movlb	1	; () banked
 11338  002A20  CFF5 F146          	movff	tablat,(?_glbaseWriteData)
 11339  002A24  EC8F  F01A         	call	_glbaseWriteData	;wreg free
 11340                           	line	222
 11341                           ;glcd.c: 222: if(++s_yLastCol > 63)
 11342  002A28  2A0A               	incf	((c:10)),c	;volatile
 11343  002A2A  0E3F               	movlw	(040h-1)
 11344  002A2C  640A               	cpfsgt	((c:10))&0ffh	;volatile
 11345  002A2E  EF1B  F015         	goto	u4901
 11346  002A32  EF1D  F015         	goto	u4900
 11347  002A36                     u4901:
 11348  002A36  EF4A  F015         	goto	l397
 11349  002A3A                     u4900:
 11350                           	line	225
 11351                           ;glcd.c: 223: {
 11352                           ;glcd.c: 225: s_yLastCol = 0;
 11353  002A3A  0E00               	movlw	low(0)
 11354  002A3C  6E0A               	movwf	((c:10)),c	;volatile
 11355                           	line	226
 11356                           ;glcd.c: 226: if(s_yLastSeg)
 11357  002A3E  5007               	movf	((c:7)),c,w	;volatile
 11358  002A40  B4D8               	btfsc	status,2
 11359  002A42  EF25  F015         	goto	u4911
 11360  002A46  EF27  F015         	goto	u4910
 11361  002A4A                     u4911:
 11362  002A4A  EF36  F015         	goto	l398
 11363  002A4E                     u4910:
 11364                           	line	229
 11365                           ;glcd.c: 227: {
 11366                           ;glcd.c: 229: s_yLastSeg = 0;
 11367  002A4E  0E00               	movlw	low(0)
 11368  002A50  6E07               	movwf	((c:7)),c	;volatile
 11369                           	line	230
 11370                           ;glcd.c: 230: if(++s_yLastPage > 7)
 11371  002A52  2A08               	incf	((c:8)),c	;volatile
 11372  002A54  0E07               	movlw	(08h-1)
 11373  002A56  6408               	cpfsgt	((c:8))&0ffh	;volatile
 11374  002A58  EF30  F015         	goto	u4921
 11375  002A5C  EF32  F015         	goto	u4920
 11376  002A60                     u4921:
 11377  002A60  EF34  F015         	goto	l399
 11378  002A64                     u4920:
 11379                           	line	231
 11380                           ;glcd.c: 231: s_yLastPage = 0;
 11381  002A64  0E00               	movlw	low(0)
 11382  002A66  6E08               	movwf	((c:8)),c	;volatile
 11383                           	
 11384  002A68                     l399:		; BSR set to: ?
 11385                           
 11386                           	line	232
 11387                           ;glcd.c: 232: }
 11388  002A68  EF38  F015         	goto	l400
 11389                           	line	233
 11390                           	
 11391  002A6C                     l398:		; BSR set to: ?
 11392                           
 11393                           	line	234
 11394                           ;glcd.c: 233: else
 11395                           ;glcd.c: 234: s_yLastSeg = 1;
 11396  002A6C  0E01               	movlw	low(01h)
 11397  002A6E  6E07               	movwf	((c:7)),c	;volatile
 11398                           	
 11399  002A70                     l400:		; BSR set to: ?
 11400                           
 11401                           	line	236
 11402                           ;glcd.c: 236: glcdSetCol(0, s_yLastSeg);
 11403  002A70  C007 F144          	movff	(c:7),0+(?_glcdSetCol+01h)	;volatile
 11404  002A74  0101               	movlb	1	; () banked
 11405  002A76  6F3B               	movwf	(??_glcdWriteChar+4+0)&0ffh
 11406  002A78  0E00               	movlw	low(0)
 11407  002A7A  0101               	movlb	1	; () banked
 11408  002A7C  0101               	movlb	1	; () banked
 11409  002A7E  6F43               	movwf	((?_glcdSetCol))&0ffh
 11410  002A80  0101               	movlb	1	; () banked
 11411  002A82  513B               	movf	(??_glcdWriteChar+4+0)&0ffh,w
 11412  002A84  EC4D  F01B         	call	_glcdSetCol	;wreg free
 11413                           	line	237
 11414                           ;glcd.c: 237: glcdSetPage(s_yLastPage, s_yLastSe
                                 g);
 11415  002A88  C007 F144          	movff	(c:7),0+(?_glcdSetPage+01h)	;volatile
 11416  002A8C  C008 F143          	movff	(c:8),(?_glcdSetPage)	;volatile
 11417  002A90  EC1D  F01B         	call	_glcdSetPage	;wreg free
 11418                           	line	238
 11419                           	
 11420  002A94                     l397:		; BSR set to: ?
 11421                           
 11422                           	line	218
 11423  002A94  0101               	movlb	1	; () banked
 11424  002A96  0101               	movlb	1	; () banked
 11425  002A98  4B39               	infsnz	((glcdWriteChar@i))&0ffh
 11426  002A9A  2B3A               	incf	((glcdWriteChar@i+1))&0ffh
 11427  002A9C  0E06               	movlw	06h
 11428  002A9E  0101               	movlb	1	; () banked
 11429  002AA0  0101               	movlb	1	; () banked
 11430  002AA2  5D39               	subwf	((glcdWriteChar@i))&0ffh,w
 11431  002AA4  0E00               	movlw	0
 11432  002AA6  0101               	movlb	1	; () banked
 11433  002AA8  593A               	subwfb	((glcdWriteChar@i+1))&0ffh,w
 11434  002AAA  A0D8               	btfss	status,0
 11435  002AAC  EF5A  F015         	goto	u4931
 11436  002AB0  EF5C  F015         	goto	u4930
 11437  002AB4                     u4931:
 11438  002AB4  EFE3  F014         	goto	l394
 11439  002AB8                     u4930:
 11440                           	
 11441  002AB8                     l395:		; BSR set to: ?
 11442                           
 11443                           	line	241
 11444                           ;glcd.c: 238: }
 11445                           ;glcd.c: 239: }
 11446                           ;glcd.c: 241: }
 11447  002AB8                     l393:
 11448                           			; BSR set to: ?
 11449                           
 11450  002AB8  0012               	return
 11451                           	opt stack 0
 11452                           GLOBAL __end_of_glcdWriteChar
 11453  002ABA                     	__end_of_glcdWriteChar:
 11454                           	FNSIZE	_glcdWriteChar,6,1
 11455                           ; =============== function _glcdWriteChar ends =
                                 ===========
 11456                           
 11457                           	signat	_glcdWriteChar,4216
 11458                           	global	_glcdSetCol
 11459                           	global	??_glcdSetCol
 11460                           	global	?_glcdSetCol
 11461                           
 11462                           ; *************** function _glcdSetCol *********
                                 ********
 11463                           ; Defined at:
 11464                           ;		line 146 in file "glcd.c"
 11465                           ; Parameters:
 11466                           ;		yCol           size:   1offs:   0	type: unsig
                                 ned char 
 11467                           ;		ySeg           size:   1offs:   1	type: unsig
                                 ned char 
 11468                           ; Auto variables:
 11469                           ;		None
 11470                           ; Return value:
 11471                           ;		type: void 
 11472                           ;		size: 0
 11473                           ; Registers used:
 11474                           ;		wreg, status,2, status,0, cstack
 11475                           ; Tracked objects:
 11476                           ;		On entry : 0/0
 11477                           ;		On exit  : 0/0
 11478                           ;		Unchanged: 0/0
 11479                           ; Data sizes:
 11480                           ;		Autos:    0
 11481                           ;		Params:   2
 11482                           ;		Temp:     1
 11483                           ;		Total:    3
 11484                           ; This function calls:
 11485                           ;		_glbaseWaitForNonBusy
 11486                           ;		_glbaseWriteData
 11487                           ; This function is called by:
 11488                           ;		_glcdClearScreen
 11489                           ;		_glcdMoveTo
 11490                           ;		_glcdWriteChar
 11491                           ;		_glcdDrawBitmap
 11492                           ; This function uses a non-reentrant model
 11493                           ; 
 11494                                   psect   text45,class=CODE,space=0,reloc=
                                 2
 11495                           
 11496                           	opt lm
 11497                           	file	"glcd.c"
 11498                           	line	146
 11499  000000                     	__size_of_glcdSetCol	equ	__end_of_glcdSetCol-_g
                                 lcdSetCol
 11500                           ;glcd.c: 145: void glcdSetCol(UINT8 yCol, UINT8 
                                 ySeg)
 11501                           ;glcd.c: 146: {
 11502                           	
 11503  00369A                     _glcdSetCol:		; BSR set to: ?
 11504                           
 11505                           	opt stack 25
 11506                           	line	147
 11507  00369A  C144  F149         	movff	(glcdSetCol@ySeg),(?_glbaseWaitForNonBusy
                                 )
 11508  00369E  ECB1  F01A         	call	_glbaseWaitForNonBusy	;wreg free
 11509                           	line	148
 11510                           ;glcd.c: 148: glbaseWriteData(0x40 | yCol, 0, yS
                                 eg);
 11511  0036A2  C144  F148         	movff	(glcdSetCol@ySeg),0+(?_glbaseWriteData+02
                                 h)
 11512  0036A6  0101               	movlb	1	; () banked
 11513  0036A8  6F45               	movwf	(??_glcdSetCol+0+0)&0ffh
 11514  0036AA  0E00               	movlw	low(0)
 11515  0036AC  0101               	movlb	1	; () banked
 11516  0036AE  0101               	movlb	1	; () banked
 11517  0036B0  6F47               	movwf	(0+(?_glbaseWriteData+01h))&0ffh
 11518  0036B2  0101               	movlb	1	; () banked
 11519  0036B4  5145               	movf	(??_glcdSetCol+0+0)&0ffh,w
 11520  0036B6  0101               	movlb	1	; () banked
 11521  0036B8  0101               	movlb	1	; () banked
 11522  0036BA  5143               	movf	((glcdSetCol@yCol))&0ffh,w
 11523  0036BC  0940               	iorlw	low(040h)
 11524  0036BE  0101               	movlb	1	; () banked
 11525  0036C0  0101               	movlb	1	; () banked
 11526  0036C2  6F46               	movwf	((?_glbaseWriteData))&0ffh
 11527  0036C4  EC8F  F01A         	call	_glbaseWriteData	;wreg free
 11528                           	line	149
 11529                           ;glcd.c: 149: }
 11530  0036C8                     l389:
 11531                           			; BSR set to: ?
 11532                           
 11533  0036C8  0012               	return
 11534                           	opt stack 0
 11535                           GLOBAL __end_of_glcdSetCol
 11536  0036CA                     	__end_of_glcdSetCol:
 11537                           	FNSIZE	_glcdSetCol,1,2
 11538                           ; =============== function _glcdSetCol ends ====
                                 ========
 11539                           
 11540                           	signat	_glcdSetCol,8312
 11541                           	global	_glcdSetPage
 11542                           	global	??_glcdSetPage
 11543                           	global	?_glcdSetPage
 11544                           
 11545                           ; *************** function _glcdSetPage ********
                                 *********
 11546                           ; Defined at:
 11547                           ;		line 121 in file "glcd.c"
 11548                           ; Parameters:
 11549                           ;		yPage          size:   1offs:   0	type: unsig
                                 ned char 
 11550                           ;		ySeg           size:   1offs:   1	type: unsig
                                 ned char 
 11551                           ; Auto variables:
 11552                           ;		None
 11553                           ; Return value:
 11554                           ;		type: void 
 11555                           ;		size: 0
 11556                           ; Registers used:
 11557                           ;		wreg, status,2, status,0, cstack
 11558                           ; Tracked objects:
 11559                           ;		On entry : 0/0
 11560                           ;		On exit  : 0/0
 11561                           ;		Unchanged: 0/0
 11562                           ; Data sizes:
 11563                           ;		Autos:    0
 11564                           ;		Params:   2
 11565                           ;		Temp:     1
 11566                           ;		Total:    3
 11567                           ; This function calls:
 11568                           ;		_glbaseWaitForNonBusy
 11569                           ;		_glbaseWriteData
 11570                           ; This function is called by:
 11571                           ;		_glcdClearScreen
 11572                           ;		_glcdMoveTo
 11573                           ;		_glcdWriteChar
 11574                           ;		_glcdDrawBitmap
 11575                           ; This function uses a non-reentrant model
 11576                           ; 
 11577                                   psect   text46,class=CODE,space=0,reloc=
                                 2
 11578                           
 11579                           	opt lm
 11580                           	file	"glcd.c"
 11581                           	line	121
 11582  000000                     	__size_of_glcdSetPage	equ	__end_of_glcdSetPage-
                                 _glcdSetPage
 11583                           ;glcd.c: 120: void glcdSetPage(UINT8 yPage, UINT
                                 8 ySeg)
 11584                           ;glcd.c: 121: {
 11585                           	
 11586  00363A                     _glcdSetPage:		; BSR set to: ?
 11587                           
 11588                           	opt stack 25
 11589                           	line	122
 11590                           ;glcd.c: 122: glbaseWaitForNonBusy(ySeg);
 11591  00363A  C144  F149         	movff	(glcdSetPage@ySeg),(?_glbaseWaitForNonBus
                                 y)
 11592  00363E  ECB1  F01A         	call	_glbaseWaitForNonBusy	;wreg free
 11593                           	line	123
 11594                           ;glcd.c: 123: glbaseWriteData(0xB8 | yPage, 0, y
                                 Seg);
 11595  003642  C144  F148         	movff	(glcdSetPage@ySeg),0+(?_glbaseWriteData+0
                                 2h)
 11596  003646  0101               	movlb	1	; () banked
 11597  003648  6F45               	movwf	(??_glcdSetPage+0+0)&0ffh
 11598  00364A  0E00               	movlw	low(0)
 11599  00364C  0101               	movlb	1	; () banked
 11600  00364E  0101               	movlb	1	; () banked
 11601  003650  6F47               	movwf	(0+(?_glbaseWriteData+01h))&0ffh
 11602  003652  0101               	movlb	1	; () banked
 11603  003654  5145               	movf	(??_glcdSetPage+0+0)&0ffh,w
 11604  003656  0101               	movlb	1	; () banked
 11605  003658  0101               	movlb	1	; () banked
 11606  00365A  5143               	movf	((glcdSetPage@yPage))&0ffh,w
 11607  00365C  09B8               	iorlw	low(0B8h)
 11608  00365E  0101               	movlb	1	; () banked
 11609  003660  0101               	movlb	1	; () banked
 11610  003662  6F46               	movwf	((?_glbaseWriteData))&0ffh
 11611  003664  EC8F  F01A         	call	_glbaseWriteData	;wreg free
 11612                           	line	124
 11613                           ;glcd.c: 124: }
 11614  003668                     l388:
 11615                           			; BSR set to: ?
 11616                           
 11617  003668  0012               	return
 11618                           	opt stack 0
 11619                           GLOBAL __end_of_glcdSetPage
 11620  00366A                     	__end_of_glcdSetPage:
 11621                           	FNSIZE	_glcdSetPage,1,2
 11622                           ; =============== function _glcdSetPage ends ===
                                 =========
 11623                           
 11624                           	signat	_glcdSetPage,8312
 11625                           	global	_glbaseWriteData
 11626                           	global	??_glbaseWriteData
 11627                           	global	?_glbaseWriteData
 11628                           
 11629                           ; *************** function _glbaseWriteData ****
                                 *************
 11630                           ; Defined at:
 11631                           ;		line 214 in file "glbase.c"
 11632                           ; Parameters:
 11633                           ;		yData          size:   1offs:   0	type: unsig
                                 ned char 
 11634                           ;		yDFlag         size:   1offs:   1	type: unsig
                                 ned char 
 11635                           ;		yCS            size:   1offs:   2	type: unsig
                                 ned char 
 11636                           ; Auto variables:
 11637                           ;		None
 11638                           ; Return value:
 11639                           ;		type: void 
 11640                           ;		size: 0
 11641                           ; Registers used:
 11642                           ;		wreg, status,2, status,0, cstack
 11643                           ; Tracked objects:
 11644                           ;		On entry : 0/0
 11645                           ;		On exit  : 0/0
 11646                           ;		Unchanged: 0/0
 11647                           ; Data sizes:
 11648                           ;		Autos:    0
 11649                           ;		Params:   3
 11650                           ;		Temp:     0
 11651                           ;		Total:    3
 11652                           ; This function calls:
 11653                           ;		_glbaseWaitForNonBusy
 11654                           ;		_glbaseEnableController
 11655                           ;		_DelayShort
 11656                           ;		_glbaseDisableController
 11657                           ; This function is called by:
 11658                           ;		_glcdInit
 11659                           ;		_glcdClearScreen
 11660                           ;		_glcdSetPage
 11661                           ;		_glcdSetCol
 11662                           ;		_glcdWriteChar
 11663                           ;		_glcdDrawBitmap
 11664                           ; This function uses a non-reentrant model
 11665                           ; 
 11666                                   psect   text47,class=CODE,space=0,reloc=
                                 2
 11667                           
 11668                           	opt lm
 11669                           	file	"glbase.c"
 11670                           	line	214
 11671  000000                     	__size_of_glbaseWriteData	equ	__end_of_glbaseWr
                                 iteData-_glbaseWriteData
 11672                           ;glbase.c: 213: void glbaseWriteData(UINT8 yData
                                 , UINT8 yDFlag, UINT8 yCS)
 11673                           ;glbase.c: 214: {
 11674                           	
 11675  00351E                     _glbaseWriteData:		; BSR set to: ?
 11676                           
 11677                           	opt stack 24
 11678                           	line	216
 11679                           ;glbase.c: 216: glbaseWaitForNonBusy(yCS);
 11680  00351E  C148  F149         	movff	(glbaseWriteData@yCS),(?_glbaseWaitForNon
                                 Busy)
 11681  003522  ECB1  F01A         	call	_glbaseWaitForNonBusy	;wreg free
 11682                           	line	218
 11683                           ;glbase.c: 218: TRISC = 0x00;
 11684  003526  0E00               	movlw	low(0)
 11685  003528  6E94               	movwf	((c:3988)),c	;volatile
 11686                           	line	219
 11687                           ;glbase.c: 219: LATB4 = 0;
 11688  00352A  988A               	bcf	c:(31828/8),(31828)&7	;volatile
 11689                           	line	220
 11690                           ;glbase.c: 220: LATB3 = yDFlag;
 11691  00352C  0101               	movlb	1	; () banked
 11692  00352E  0101               	movlb	1	; () banked
 11693  003530  A147               	btfss	((glbaseWriteData@yDFlag))&0ffh,0
 11694  003532  D001               	bra	u4945
 11695  003534  868A               	bsf	c:(31827/8),(31827)&7	;volatile
 11696  003536                     	u4945:
 11697  003536  0101               	movlb	1	; () banked
 11698  003538  0101               	movlb	1	; () banked
 11699  00353A  B147               	btfsc	((glbaseWriteData@yDFlag))&0ffh,0
 11700  00353C  D001               	bra	u4946
 11701  00353E  968A               	bcf	c:(31827/8),(31827)&7	;volatile
 11702  003540                     	u4946:
 11703                           	line	221
 11704                           ;glbase.c: 221: glbaseEnableController(yCS);
 11705  003540  C148  F14B         	movff	(glbaseWriteData@yCS),(?_glbaseEnableCont
                                 roller)
 11706  003544  EC8A  F01B         	call	_glbaseEnableController	;wreg free
 11707                           	line	222
 11708                           ;glbase.c: 222: LATC = yData;
 11709  003548  C146  FF8B         	movff	(glbaseWriteData@yData),(c:3979)	;volatil
                                 e
 11710                           	line	223
 11711                           ;glbase.c: 223: LATB5 = 1;
 11712  00354C  8A8A               	bsf	c:(31829/8),(31829)&7	;volatile
 11713                           	line	224
 11714                           ;glbase.c: 224: DelayShort();
 11715  00354E  ECC3  F01B         	call	_DelayShort	;wreg free
 11716                           	line	225
 11717                           ;glbase.c: 225: LATB5 = 0;
 11718  003552  9A8A               	bcf	c:(31829/8),(31829)&7	;volatile
 11719                           	line	226
 11720                           ;glbase.c: 226: DelayShort();
 11721  003554  ECC3  F01B         	call	_DelayShort	;wreg free
 11722                           	line	227
 11723                           ;glbase.c: 227: glbaseDisableController(yCS);
 11724  003558  C148  F14B         	movff	(glbaseWriteData@yCS),(?_glbaseDisableCon
                                 troller)
 11725  00355C  EC78  F01B         	call	_glbaseDisableController	;wreg free
 11726                           	line	230
 11727                           ;glbase.c: 230: }
 11728  003560                     l195:
 11729                           			; BSR set to: ?
 11730                           
 11731  003560  0012               	return
 11732                           	opt stack 0
 11733                           GLOBAL __end_of_glbaseWriteData
 11734  003562                     	__end_of_glbaseWriteData:
 11735                           	FNSIZE	_glbaseWriteData,0,3
 11736                           ; =============== function _glbaseWriteData ends
                                  ============
 11737                           
 11738                           	signat	_glbaseWriteData,12408
 11739                           	global	_glbaseWaitForNonBusy
 11740                           	global	??_glbaseWaitForNonBusy
 11741                           	global	?_glbaseWaitForNonBusy
 11742                           
 11743                           ; *************** function _glbaseWaitForNonBusy
                                  *****************
 11744                           ; Defined at:
 11745                           ;		line 135 in file "glbase.c"
 11746                           ; Parameters:
 11747                           ;		yCS            size:   1offs:   0	type: unsig
                                 ned char 
 11748                           ; Auto variables:
 11749                           ;		yStatus     	       	type: unsigned char 
 11750                           ; Return value:
 11751                           ;		type: void 
 11752                           ;		size: 0
 11753                           ; Registers used:
 11754                           ;		wreg, status,2, status,0, cstack
 11755                           ; Tracked objects:
 11756                           ;		On entry : 0/0
 11757                           ;		On exit  : 0/0
 11758                           ;		Unchanged: 0/0
 11759                           ; Data sizes:
 11760                           ;		Autos:    1
 11761                           ;		Params:   1
 11762                           ;		Temp:     0
 11763                           ;		Total:    2
 11764                           ; This function calls:
 11765                           ;		_glbaseEnableController
 11766                           ;		_DelayShort
 11767                           ;		_glbaseDisableController
 11768                           ; This function is called by:
 11769                           ;		_glbaseWriteData
 11770                           ;		_glcdSetPage
 11771                           ;		_glcdSetCol
 11772                           ; This function uses a non-reentrant model
 11773                           ; 
 11774                                   psect   text48,class=CODE,space=0,reloc=
                                 2
 11775                           
 11776                           	opt lm
 11777                           	file	"glbase.c"
 11778                           	line	135
 11779  000000                     	__size_of_glbaseWaitForNonBusy	equ	__end_of_glb
                                 aseWaitForNonBusy-_glbaseWaitForNonBusy
 11780                           ;glbase.c: 134: void glbaseWaitForNonBusy(UINT8 
                                 yCS)
 11781                           ;glbase.c: 135: {
 11782                           	
 11783  003562                     _glbaseWaitForNonBusy:		; BSR set to: ?
 11784                           
 11785                           	opt stack 23
 11786                           	line	138
 11787                           ;glbase.c: 136: UINT8 yStatus;
 11788                           ;glbase.c: 138: do
 11789                           	
 11790  003562                     l193:		; BSR set to: ?
 11791                           
 11792                           	line	140
 11793                           ;glbase.c: 139: {
 11794                           ;glbase.c: 140: TRISC = 0xff;
 11795  003562  6894               	setf	((c:3988)),c	;volatile
 11796                           	line	141
 11797                           ;glbase.c: 141: LATB3 = 0;
 11798  003564  968A               	bcf	c:(31827/8),(31827)&7	;volatile
 11799                           	line	142
 11800                           ;glbase.c: 142: LATB4 = 1;
 11801  003566  888A               	bsf	c:(31828/8),(31828)&7	;volatile
 11802                           	line	143
 11803                           ;glbase.c: 143: glbaseEnableController(yCS);
 11804  003568  C149  F14B         	movff	(glbaseWaitForNonBusy@yCS),(?_glbaseEnabl
                                 eController)
 11805  00356C  EC8A  F01B         	call	_glbaseEnableController	;wreg free
 11806                           	line	144
 11807                           ;glbase.c: 144: LATB5 = 1;
 11808  003570  8A8A               	bsf	c:(31829/8),(31829)&7	;volatile
 11809                           	line	145
 11810                           ;glbase.c: 145: DelayShort();
 11811  003572  ECC3  F01B         	call	_DelayShort	;wreg free
 11812                           	line	146
 11813                           ;glbase.c: 146: yStatus = PORTC;
 11814  003576  CF82 F14A          	movff	(c:3970),(glbaseWaitForNonBusy@yStatus)	;
                                 volatile
 11815                           	line	147
 11816                           ;glbase.c: 147: LATB5 = 0;
 11817  00357A  9A8A               	bcf	c:(31829/8),(31829)&7	;volatile
 11818                           	line	148
 11819                           ;glbase.c: 148: DelayShort();
 11820  00357C  ECC3  F01B         	call	_DelayShort	;wreg free
 11821                           	line	149
 11822                           ;glbase.c: 149: glbaseDisableController(yCS);
 11823  003580  C149  F14B         	movff	(glbaseWaitForNonBusy@yCS),(?_glbaseDisab
                                 leController)
 11824  003584  EC78  F01B         	call	_glbaseDisableController	;wreg free
 11825                           	line	150
 11826                           ;glbase.c: 150: } while (yStatus & 0x90);
 11827  003588  0101               	movlb	1	; () banked
 11828  00358A  0101               	movlb	1	; () banked
 11829  00358C  514A               	movf	((glbaseWaitForNonBusy@yStatus))&0ffh,w
 11830  00358E  0B90               	andlw	low(090h)
 11831  003590  A4D8               	btfss	status,2
 11832  003592  EFCD  F01A         	goto	u4951
 11833  003596  EFCF  F01A         	goto	u4950
 11834  00359A                     u4951:
 11835  00359A  EFB1  F01A         	goto	l193
 11836  00359E                     u4950:
 11837                           	
 11838  00359E                     l192:		; BSR set to: ?
 11839                           
 11840                           	line	152
 11841                           ;glbase.c: 152: }
 11842  00359E                     l190:
 11843                           			; BSR set to: ?
 11844                           
 11845  00359E  0012               	return
 11846                           	opt stack 0
 11847                           GLOBAL __end_of_glbaseWaitForNonBusy
 11848  0035A0                     	__end_of_glbaseWaitForNonBusy:
 11849                           	FNSIZE	_glbaseWaitForNonBusy,1,1
 11850                           ; =============== function _glbaseWaitForNonBusy
                                  ends ============
 11851                           
 11852                           	signat	_glbaseWaitForNonBusy,4216
 11853                           	global	_glbaseEnableController
 11854                           	global	??_glbaseEnableController
 11855                           	global	?_glbaseEnableController
 11856                           
 11857                           ; *************** function _glbaseEnableControll
                                 er *****************
 11858                           ; Defined at:
 11859                           ;		line 78 in file "glbase.c"
 11860                           ; Parameters:
 11861                           ;		yCS            size:   1offs:   0	type: unsig
                                 ned char 
 11862                           ; Auto variables:
 11863                           ;		None
 11864                           ; Return value:
 11865                           ;		type: void 
 11866                           ;		size: 0
 11867                           ; Registers used:
 11868                           ;		wreg, status,2, status,0
 11869                           ; Tracked objects:
 11870                           ;		On entry : 0/0
 11871                           ;		On exit  : 0/0
 11872                           ;		Unchanged: 0/0
 11873                           ; Data sizes:
 11874                           ;		Autos:    0
 11875                           ;		Params:   1
 11876                           ;		Temp:     0
 11877                           ;		Total:    1
 11878                           ; This function calls:
 11879                           ;		Nothing
 11880                           ; This function is called by:
 11881                           ;		_glbaseWaitForNonBusy
 11882                           ;		_glbaseWriteData
 11883                           ; This function uses a non-reentrant model
 11884                           ; 
 11885                                   psect   text49,class=CODE,space=0,reloc=
                                 2
 11886                           
 11887                           	opt lm
 11888                           	file	"glbase.c"
 11889                           	line	78
 11890  000000                     	__size_of_glbaseEnableController	equ	__end_of_g
                                 lbaseEnableController-_glbaseEnableController
 11891                           ;glbase.c: 77: void glbaseEnableController(UINT8
                                  yCS)
 11892                           ;glbase.c: 78: {
 11893                           	
 11894  003714                     _glbaseEnableController:		; BSR set to: ?
 11895                           
 11896                           	opt stack 22
 11897                           	line	79
 11898                           ;glbase.c: 79: switch(yCS)
 11899  003714  EF92  F01B         	goto	l182
 11900                           	line	81
 11901                           ;glbase.c: 80: {
 11902                           ;glbase.c: 81: case 0 : LATB0 = 1; break;
 11903                           	
 11904  003718                     l183:		; BSR set to: ?
 11905                           
 11906  003718  808A               	bsf	c:(31824/8),(31824)&7	;volatile
 11907  00371A  EF9B  F01B         	goto	l181
 11908                           	line	82
 11909                           ;glbase.c: 82: case 1 : LATB1 = 1; break;
 11910                           	
 11911  00371E                     l184:		; BSR set to: ?
 11912                           
 11913  00371E  828A               	bsf	c:(31825/8),(31825)&7	;volatile
 11914  003720  EF9B  F01B         	goto	l181
 11915                           	line	79
 11916                           	
 11917  003724                     l182:		; BSR set to: ?
 11918                           
 11919  003724  0101               	movlb	1	; () banked
 11920  003726  0101               	movlb	1	; () banked
 11921  003728  514B               	movf	((glbaseEnableController@yCS))&0ffh,w
 11922  00372A  0A00               	xorlw	0 ^ 0
 11923  00372C  E0F5               	bz	l183
 11924  00372E  0A01               	xorlw	1 ^ 0
 11925  003730  E0F6               	bz	l184
 11926  003732  EF9B  F01B         	goto	l181
 11927                           
 11928                           	line	83
 11929                           	
 11930  003736                     l181:		; BSR set to: ?
 11931                           
 11932                           	line	85
 11933                           ;glbase.c: 85: }
 11934  003736                     l180:
 11935                           			; BSR set to: ?
 11936                           
 11937  003736  0012               	return
 11938                           	opt stack 0
 11939                           GLOBAL __end_of_glbaseEnableController
 11940  003738                     	__end_of_glbaseEnableController:
 11941                           	FNSIZE	_glbaseEnableController,0,1
 11942                           ; =============== function _glbaseEnableControll
                                 er ends ============
 11943                           
 11944                           	signat	_glbaseEnableController,4216
 11945                           	global	_glbaseDisableController
 11946                           	global	??_glbaseDisableController
 11947                           	global	?_glbaseDisableController
 11948                           
 11949                           ; *************** function _glbaseDisableControl
                                 ler *****************
 11950                           ; Defined at:
 11951                           ;		line 106 in file "glbase.c"
 11952                           ; Parameters:
 11953                           ;		yCS            size:   1offs:   0	type: unsig
                                 ned char 
 11954                           ; Auto variables:
 11955                           ;		None
 11956                           ; Return value:
 11957                           ;		type: void 
 11958                           ;		size: 0
 11959                           ; Registers used:
 11960                           ;		wreg, status,2, status,0
 11961                           ; Tracked objects:
 11962                           ;		On entry : 0/0
 11963                           ;		On exit  : 0/0
 11964                           ;		Unchanged: 0/0
 11965                           ; Data sizes:
 11966                           ;		Autos:    0
 11967                           ;		Params:   1
 11968                           ;		Temp:     0
 11969                           ;		Total:    1
 11970                           ; This function calls:
 11971                           ;		Nothing
 11972                           ; This function is called by:
 11973                           ;		_glbaseWaitForNonBusy
 11974                           ;		_glbaseWriteData
 11975                           ; This function uses a non-reentrant model
 11976                           ; 
 11977                                   psect   text50,class=CODE,space=0,reloc=
                                 2
 11978                           
 11979                           	opt lm
 11980                           	file	"glbase.c"
 11981                           	line	106
 11982  000000                     	__size_of_glbaseDisableController	equ	__end_of_
                                 glbaseDisableController-_glbaseDisableController
 11983                           ;glbase.c: 105: void glbaseDisableController(UIN
                                 T8 yCS)
 11984                           ;glbase.c: 106: {
 11985                           	
 11986  0036F0                     _glbaseDisableController:		; BSR set to: ?
 11987                           
 11988                           	opt stack 22
 11989                           	line	107
 11990  0036F0  EF80  F01B         	goto	l187
 11991                           	line	109
 11992                           ;glbase.c: 108: {
 11993                           ;glbase.c: 109: case 0 : LATB0 = 0; break;
 11994                           	
 11995  0036F4                     l188:		; BSR set to: ?
 11996                           
 11997  0036F4  908A               	bcf	c:(31824/8),(31824)&7	;volatile
 11998  0036F6  EF89  F01B         	goto	l186
 11999                           	line	110
 12000                           ;glbase.c: 110: case 1 : LATB1 = 0; break;
 12001                           	
 12002  0036FA                     l189:		; BSR set to: ?
 12003                           
 12004  0036FA  928A               	bcf	c:(31825/8),(31825)&7	;volatile
 12005  0036FC  EF89  F01B         	goto	l186
 12006                           	line	107
 12007                           	
 12008  003700                     l187:		; BSR set to: ?
 12009                           
 12010  003700  0101               	movlb	1	; () banked
 12011  003702  0101               	movlb	1	; () banked
 12012  003704  514B               	movf	((glbaseDisableController@yCS))&0ffh,w
 12013  003706  0A00               	xorlw	0 ^ 0
 12014  003708  E0F5               	bz	l188
 12015  00370A  0A01               	xorlw	1 ^ 0
 12016  00370C  E0F6               	bz	l189
 12017  00370E  EF89  F01B         	goto	l186
 12018                           
 12019                           	line	111
 12020                           	
 12021  003712                     l186:		; BSR set to: ?
 12022                           
 12023                           	line	113
 12024                           ;glbase.c: 113: }
 12025  003712                     l185:
 12026                           			; BSR set to: ?
 12027                           
 12028  003712  0012               	return
 12029                           	opt stack 0
 12030                           GLOBAL __end_of_glbaseDisableController
 12031  003714                     	__end_of_glbaseDisableController:
 12032                           	FNSIZE	_glbaseDisableController,0,1
 12033                           ; =============== function _glbaseDisableControl
                                 ler ends ============
 12034                           
 12035                           	signat	_glbaseDisableController,4216
 12036                           	global	_DelayShort
 12037                           	global	??_DelayShort
 12038                           	global	?_DelayShort
 12039                           
 12040                           ; *************** function _DelayShort *********
                                 ********
 12041                           ; Defined at:
 12042                           ;		line 383 in file "main.c"
 12043                           ; Parameters:
 12044                           ;		None
 12045                           ; Auto variables:
 12046                           ;		None
 12047                           ; Return value:
 12048                           ;		type: void 
 12049                           ;		size: 0
 12050                           ; Registers used:
 12051                           ;		None
 12052                           ; Tracked objects:
 12053                           ;		On entry : 0/0
 12054                           ;		On exit  : 0/0
 12055                           ;		Unchanged: 0/0
 12056                           ; Data sizes:
 12057                           ;		Autos:    0
 12058                           ;		Params:   0
 12059                           ;		Temp:     0
 12060                           ;		Total:    0
 12061                           ; This function calls:
 12062                           ;		Nothing
 12063                           ; This function is called by:
 12064                           ;		_glbaseWaitForNonBusy
 12065                           ;		_glbaseWriteData
 12066                           ;		_spiRead
 12067                           ;		_spiWrite
 12068                           ;		_spiChipSelect
 12069                           ;		_spiChipDeselect
 12070                           ; This function uses a non-reentrant model
 12071                           ; 
 12072                                   psect   text51,class=CODE,space=0,reloc=
                                 2
 12073                           
 12074                           	opt lm
 12075                           	file	"main.c"
 12076                           	line	383
 12077  000000                     	__size_of_DelayShort	equ	__end_of_DelayShort-_D
                                 elayShort
 12078                           ;main.c: 382: void DelayShort(void)
 12079                           ;main.c: 383: {
 12080                           	
 12081  003786                     _DelayShort:		; BSR set to: ?
 12082                           
 12083                           	opt stack 22
 12084                           	line	384
 12085                           # 384 "main.c"
 12086  003786  F000                nop ;#
 12087                                   psect   text51
 12088                           	line	386
 12089                           ;main.c: 384: asm(" nop");
 12090                           ;main.c: 386: }
 12091  003788                     l645:
 12092                           			; BSR set to: ?
 12093                           
 12094  003788  0012               	return
 12095                           	opt stack 0
 12096                           GLOBAL __end_of_DelayShort
 12097  00378A                     	__end_of_DelayShort:
 12098                           	FNSIZE	_DelayShort,0,0
 12099                           ; =============== function _DelayShort ends ====
                                 ========
 12100                           
 12101                           	signat	_DelayShort,88
 12102                           	global	_GlobalInt
 12103                           	global	??_GlobalInt
 12104                           	global	?_GlobalInt
 12105                           
 12106                           ; *************** function _GlobalInt **********
                                 *******
 12107                           ; Defined at:
 12108                           ;		line 528 in file "main.c"
 12109                           ; Parameters:
 12110                           ;		None
 12111                           ; Auto variables:
 12112                           ;		None
 12113                           ; Return value:
 12114                           ;		type: void 
 12115                           ;		size: 0
 12116                           ; Registers used:
 12117                           ;		wreg, status,2, status,0
 12118                           ; Tracked objects:
 12119                           ;		On entry : 0/0
 12120                           ;		On exit  : 0/0
 12121                           ;		Unchanged: 0/0
 12122                           ; Data sizes:
 12123                           ;		Autos:    0
 12124                           ;		Params:   0
 12125                           ;		Temp:    14
 12126                           ;		Total:   14
 12127                           ; This function calls:
 12128                           ;		Nothing
 12129                           ; This function is called by:
 12130                           ;		Interrupt level 2
 12131                           ; This function uses a non-reentrant model
 12132                           ; 
 12133                                   psect   text52,class=CODE,space=0,reloc=
                                 2
 12134                           
 12135                           	opt lm
 12136                           	file	"main.c"
 12137                           	line	528
 12138  000000                     	__size_of_GlobalInt	equ	__end_of_GlobalInt-_Glo
                                 balInt
 12139                           ;main.c: 527: void interrupt GlobalInt(void)
 12140                           ;main.c: 528: {
 12141                           	
 12142  002F8A                     _GlobalInt:		; BSR set to: ?
 12143                           
 12144  002F8A  0006               	pop	; remove dummy address from shadow register
                                  refresh
 12145                           
 12146                           	opt stack 31
 12147                                   psect   intcode,class=CODE,space=0,reloc
                                 =2
 12148                           	global	int_func
 12149  000008                     int_func:
 12150                                   psect   intcode
 12151  000008  CFFA F15C          	movff	pclat+0,??_GlobalInt+0
 12152  00000C  CFFB F15D          	movff	pclat+1,??_GlobalInt+1
 12153  000010  CFE9 F15E          	movff	fsr0l+0,??_GlobalInt+2
 12154  000014  EDC5  F017         	call	_GlobalInt,f	;refresh shadow registers
 12155                                   psect   text52
 12156  002F8C  CFEA F15F          	movff	fsr0h+0,??_GlobalInt+3
 12157  002F90  CFE1 F160          	movff	fsr1l+0,??_GlobalInt+4
 12158  002F94  CFE2 F161          	movff	fsr1h+0,??_GlobalInt+5
 12159  002F98  CFD9 F162          	movff	fsr2l+0,??_GlobalInt+6
 12160  002F9C  CFDA F163          	movff	fsr2h+0,??_GlobalInt+7
 12161  002FA0  CFF3 F164          	movff	prodl+0,??_GlobalInt+8
 12162  002FA4  CFF4 F165          	movff	prodh+0,??_GlobalInt+9
 12163  002FA8  CFF6 F166          	movff	tblptrl+0,??_GlobalInt+10
 12164  002FAC  CFF7 F167          	movff	tblptrh+0,??_GlobalInt+11
 12165  002FB0  CFF8 F168          	movff	tblptru+0,??_GlobalInt+12
 12166  002FB4  CFF5 F169          	movff	tablat+0,??_GlobalInt+13
 12167                           	line	530
 12168                           ;main.c: 530: if(PIR1bits.TMR1IF)
 12169                           	
 12170  002FB8  A09E               	btfss	((c:3998)),c,0	;volatile
 12171  002FBA  EFE1  F017         	goto	i2u4961
 12172  002FBE  EFE3  F017         	goto	i2u4960
 12173  002FC2                     i2u4961:
 12174  002FC2  EFFB  F017         	goto	i2l676
 12175  002FC6                     i2u4960:
 12176                           	line	532
 12177                           ;main.c: 531: {
 12178                           ;main.c: 532: T1CONbits.TMR1ON = 0;
 12179  002FC6  90CD               	bcf	((c:4045)),c,0	;volatile
 12180                           	line	533
 12181                           ;main.c: 533: PIR1bits.TMR1IF = 0;
 12182  002FC8  909E               	bcf	((c:3998)),c,0	;volatile
 12183                           	line	534
 12184                           ;main.c: 534: TMR1L = ((UINT8)(40535));
 12185  002FCA  0E57               	movlw	low(057h)
 12186  002FCC  6ECE               	movwf	((c:4046)),c	;volatile
 12187                           	line	535
 12188                           ;main.c: 535: TMR1H = ((UINT8)(((UINT16)(40535) 
                                 >> (UINT8)8) & 0xff));
 12189  002FCE  0E9E               	movlw	low(09Eh)
 12190  002FD0  6ECF               	movwf	((c:4047)),c	;volatile
 12191                           	line	537
 12192                           ;main.c: 537: if(++g_wFrameCounter > 750)
 12193  002FD2  4A0B               	infsnz	((c:11)),c	;volatile
 12194  002FD4  2A0C               	incf	((c:11+1)),c	;volatile
 12195  002FD6  0EEF               	movlw	0EFh
 12196  002FD8  5C0B               	subwf	((c:11))&0ffh,w	;volatile
 12197  002FDA  0E02               	movlw	02h
 12198  002FDC  580C               	subwfb	((c:11+1))&0ffh,w	;volatile
 12199  002FDE  A0D8               	btfss	status,0
 12200  002FE0  EFF4  F017         	goto	i2u4971
 12201  002FE4  EFF6  F017         	goto	i2u4970
 12202  002FE8                     i2u4971:
 12203  002FE8  EFFA  F017         	goto	i2l677
 12204  002FEC                     i2u4970:
 12205                           	line	538
 12206                           ;main.c: 538: g_yTimedOut = 1;
 12207  002FEC  0E01               	movlw	low(01h)
 12208  002FEE  6E09               	movwf	((c:9)),c	;volatile
 12209  002FF0  EFFB  F017         	goto	i2l676
 12210                           	line	539
 12211                           	
 12212  002FF4                     i2l677:		; BSR set to: ?
 12213                           
 12214                           	line	540
 12215                           ;main.c: 539: else
 12216                           ;main.c: 540: T1CONbits.TMR1ON = 1;
 12217  002FF4  80CD               	bsf	((c:4045)),c,0	;volatile
 12218                           	
 12219  002FF6                     i2l678:		; BSR set to: ?
 12220                           
 12221                           	line	541
 12222                           	
 12223  002FF6                     i2l676:		; BSR set to: ?
 12224                           
 12225                           	line	542
 12226                           ;main.c: 541: }
 12227                           ;main.c: 542: }
 12228  002FF6                     i2l675:
 12229                           			; BSR set to: ?
 12230                           
 12231  002FF6  C169  FFF5         	movff	??_GlobalInt+13,tablat+0
 12232  002FFA  C168  FFF8         	movff	??_GlobalInt+12,tblptru+0
 12233  002FFE  C167  FFF7         	movff	??_GlobalInt+11,tblptrh+0
 12234  003002  C166  FFF6         	movff	??_GlobalInt+10,tblptrl+0
 12235  003006  C165  FFF4         	movff	??_GlobalInt+9,prodh+0
 12236  00300A  C164  FFF3         	movff	??_GlobalInt+8,prodl+0
 12237  00300E  C163  FFDA         	movff	??_GlobalInt+7,fsr2h+0
 12238  003012  C162  FFD9         	movff	??_GlobalInt+6,fsr2l+0
 12239  003016  C161  FFE2         	movff	??_GlobalInt+5,fsr1h+0
 12240  00301A  C160  FFE1         	movff	??_GlobalInt+4,fsr1l+0
 12241  00301E  C15F  FFEA         	movff	??_GlobalInt+3,fsr0h+0
 12242  003022  C15E  FFE9         	movff	??_GlobalInt+2,fsr0l+0
 12243  003026  C15D  FFFB         	movff	??_GlobalInt+1,pclat+1
 12244  00302A  C15C  FFFA         	movff	??_GlobalInt+0,pclat+0
 12245  00302E  0011               	retfie f
 12246                           	opt stack 0
 12247                           GLOBAL __end_of_GlobalInt
 12248  003030                     	__end_of_GlobalInt:
 12249                           	FNSIZE	_GlobalInt,14,0
 12250                           ; =============== function _GlobalInt ends =====
                                 =======
 12251                           
 12252                           	signat	_GlobalInt,88
 12253                           	FNCALL	_main,_rtcInit
 12254                           	FNCALL	_main,_glcdInit
 12255                           	FNCALL	_main,_wwvInit
 12256                           	FNCALL	_main,_glcdClearScreen
 12257                           	FNCALL	_main,_rtcGetClock
 12258                           	FNCALL	_main,_DisplayTime
 12259                           	FNCALL	_main,_memcpy
 12260                           	FNCALL	_main,_rtcBCDToDec
 12261                           	FNCALL	_main,_wwvGetTime
 12262                           	FNCALL	_main,_rtcSetClock
 12263                           	FNCALL	_main,_ButtonDown
 12264                           	FNCALL	_rtcGetClock,_spiChipSelect
 12265                           	FNCALL	_rtcGetClock,_spiWrite
 12266                           	FNCALL	_rtcGetClock,_spiRead
 12267                           	FNCALL	_rtcGetClock,_spiChipDeselect
 12268                           	FNCALL	_glcdInit,_glbaseInit
 12269                           	FNCALL	_glcdInit,_glbaseWriteData
 12270                           	FNCALL	_DisplayTime,_glcdMoveTo
 12271                           	FNCALL	_DisplayTime,_glcdDrawImage
 12272                           	FNCALL	_DisplayTime,_rtc24to12Hour
 12273                           	FNCALL	_DisplayTime,___wmul
 12274                           	FNCALL	_DisplayTime,_strcpy
 12275                           	FNCALL	_DisplayTime,_glcdWriteString
 12276                           	FNCALL	_DisplayTime,_MakeDateString
 12277                           	FNCALL	_DisplayTime,_rtcReadRam
 12278                           	FNCALL	_ButtonDown,_Vdelay_ms
 12279                           	FNCALL	_ButtonDown,_glcdClearScreen
 12280                           	FNCALL	_ButtonDown,_glcdMoveTo
 12281                           	FNCALL	_ButtonDown,_glcdWriteString
 12282                           	FNCALL	_ButtonDown,_rtcReadRam
 12283                           	FNCALL	_ButtonDown,_DrawTZSetting
 12284                           	FNCALL	_ButtonDown,_rtcWriteRam
 12285                           	FNCALL	_wwvGetTime,_glcdClearScreen
 12286                           	FNCALL	_wwvGetTime,_glcdMoveTo
 12287                           	FNCALL	_wwvGetTime,_glcdWriteString
 12288                           	FNCALL	_wwvGetTime,_rtcReadRam
 12289                           	FNCALL	_wwvGetTime,_glcdMakeLastSyncString
 12290                           	FNCALL	_wwvGetTime,_wwvStartFrameTimer
 12291                           	FNCALL	_wwvGetTime,_wwvGetSyncBit
 12292                           	FNCALL	_wwvGetTime,_glcdWriteChar
 12293                           	FNCALL	_wwvGetTime,_wwvRead8BitFrame
 12294                           	FNCALL	_wwvGetTime,_wwvGetAnyBit
 12295                           	FNCALL	_wwvGetTime,_rtcBCDToDec
 12296                           	FNCALL	_wwvGetTime,_rtcWriteRam
 12297                           	FNCALL	_wwvGetTime,_wwvMakeTimeStruct
 12298                           	FNCALL	_wwvGetTime,_rtcBumpLastSync
 12299                           	FNCALL	_wwvGetTime,_rtcSaveLastSync
 12300                           	FNCALL	_rtcInit,_spiInit
 12301                           	FNCALL	_rtcInit,_rtcWriteRam
 12302                           	FNCALL	_rtcInit,_rtcReadRam
 12303                           	FNCALL	_rtcInit,_rtcSetClock
 12304                           	FNCALL	_rtcInit,_rtcSaveLastSync
 12305                           	FNCALL	_glcdDrawImage,_glcdDrawBitmap
 12306                           	FNCALL	_rtc24to12Hour,_rtcBCDToDec
 12307                           	FNCALL	_rtc24to12Hour,_rtcDecToBCD
 12308                           	FNCALL	_MakeDateString,_rtcBCDToDec
 12309                           	FNCALL	_MakeDateString,___wmul
 12310                           	FNCALL	_MakeDateString,_strcpy
 12311                           	FNCALL	_MakeDateString,_strcat
 12312                           	FNCALL	_wwvMakeTimeStruct,___awmod
 12313                           	FNCALL	_wwvMakeTimeStruct,_rtcDecToBCD
 12314                           	FNCALL	_wwvMakeTimeStruct,_wwvGetWeekDay
 12315                           	FNCALL	_rtcBumpLastSync,_rtcReadRam
 12316                           	FNCALL	_rtcBumpLastSync,_rtcWriteRam
 12317                           	FNCALL	_DrawTZSetting,_glcdMoveTo
 12318                           	FNCALL	_DrawTZSetting,_glcdWriteString
 12319                           	FNCALL	_wwvGetSyncBit,_wwvGetBit
 12320                           	FNCALL	_wwvRead8BitFrame,_wwvGetBit
 12321                           	FNCALL	_wwvGetAnyBit,_wwvGetBit
 12322                           	FNCALL	_glcdClearScreen,_glcdSetPage
 12323                           	FNCALL	_glcdClearScreen,_glcdSetCol
 12324                           	FNCALL	_glcdClearScreen,_glbaseWriteData
 12325                           	FNCALL	_rtcSetClock,_rtcWriteRam
 12326                           	FNCALL	_rtcSaveLastSync,_rtcWriteRam
 12327                           	FNCALL	_glbaseInit,_Vdelay_ms
 12328                           	FNCALL	_rtcWriteRam,_spiChipSelect
 12329                           	FNCALL	_rtcWriteRam,_spiWrite
 12330                           	FNCALL	_rtcWriteRam,_spiChipDeselect
 12331                           	FNCALL	_glcdWriteString,_glcdWriteChar
 12332                           	FNCALL	_Vdelay_ms,___wmul
 12333                           	FNCALL	_rtcDecToBCD,___awmod
 12334                           	FNCALL	_rtcDecToBCD,___awdiv
 12335                           	FNCALL	_glcdMoveTo,_glcdSetCol
 12336                           	FNCALL	_glcdMoveTo,_glcdSetPage
 12337                           	FNCALL	_wwvGetWeekDay,___awdiv
 12338                           	FNCALL	_wwvGetWeekDay,___wmul
 12339                           	FNCALL	_wwvGetWeekDay,___awmod
 12340                           	FNCALL	_rtcReadRam,_spiChipSelect
 12341                           	FNCALL	_rtcReadRam,_spiWrite
 12342                           	FNCALL	_rtcReadRam,_spiRead
 12343                           	FNCALL	_rtcReadRam,_spiChipDeselect
 12344                           	FNCALL	_glcdDrawBitmap,_glcdSetPage
 12345                           	FNCALL	_glcdDrawBitmap,_glcdSetCol
 12346                           	FNCALL	_glcdDrawBitmap,_glbaseWriteData
 12347                           	FNCALL	_spiRead,_DelayShort
 12348                           	FNCALL	_spiChipDeselect,_DelayShort
 12349                           	FNCALL	_spiChipSelect,_DelayShort
 12350                           	FNCALL	_spiWrite,_DelayShort
 12351                           	FNCALL	_glcdWriteChar,_glbaseWriteData
 12352                           	FNCALL	_glcdWriteChar,_glcdSetCol
 12353                           	FNCALL	_glcdWriteChar,_glcdSetPage
 12354                           	FNCALL	_glcdSetCol,_glbaseWaitForNonBusy
 12355                           	FNCALL	_glcdSetCol,_glbaseWriteData
 12356                           	FNCALL	_glcdSetPage,_glbaseWaitForNonBusy
 12357                           	FNCALL	_glcdSetPage,_glbaseWriteData
 12358                           	FNCALL	_glbaseWriteData,_glbaseWaitForNonBusy
 12359                           	FNCALL	_glbaseWriteData,_glbaseEnableController
 12360                           	FNCALL	_glbaseWriteData,_DelayShort
 12361                           	FNCALL	_glbaseWriteData,_glbaseDisableControlle
                                 r
 12362                           	FNCALL	_glbaseWaitForNonBusy,_glbaseEnableContr
                                 oller
 12363                           	FNCALL	_glbaseWaitForNonBusy,_DelayShort
 12364                           	FNCALL	_glbaseWaitForNonBusy,_glbaseDisableCont
                                 roller
 12365                           	FNROOT	_main
 12366                           	FNCALL	intlevel2,_GlobalInt
 12367                           	global	intlevel2
 12368                           	FNROOT	intlevel2
 12369                           ;	FNARG	_glcdMakeLastSyncString,_DelayShort
 12370                           ;	FNARG	_glcdMakeLastSyncString,_rtcReadRam
 12371                           ;	FNARG	_glcdMakeLastSyncString,_spiChipSelect
 12372                           ;	FNARG	_glcdMakeLastSyncString,_spiWrite
 12373                           ;	FNARG	_glcdMakeLastSyncString,_spiRead
 12374                           ;	FNARG	_glcdMakeLastSyncString,_spiChipDeselect
 12375                           ;	FNARG	_strcpy,_rtcBCDToDec
 12376                           ;	FNARG	___awdiv,___wmul
 12377                           ;	FNARG	___awmod,___awdiv
 12378                           ;	FNARG	___awmod,___wmul
 12379                                   psect   mediumconst,class=MEDIUMCONST,sp
                                 ace=0,reloc=2
 12380                           	global	_yFont6x8
 12381                           	file	"bitmaps.h"
 12382                           	line	106
 12383  0039F2                     _yFont6x8:
 12384  0039F2  00                 	db	low(0)
 12385  0039F3  00                 	db	low(0)
 12386  0039F4  00                 	db	low(0)
 12387  0039F5  00                 	db	low(0)
 12388  0039F6  00                 	db	low(0)
 12389  0039F7  00                 	db	low(0)
 12390  0039F8  00                 	db	low(0)
 12391  0039F9  00                 	db	low(0)
 12392  0039FA  5F                 	db	low(05Fh)
 12393  0039FB  00                 	db	low(0)
 12394  0039FC  00                 	db	low(0)
 12395  0039FD  00                 	db	low(0)
 12396  0039FE  00                 	db	low(0)
 12397  0039FF  07                 	db	low(07h)
 12398  003A00  00                 	db	low(0)
 12399  003A01  07                 	db	low(07h)
 12400  003A02  00                 	db	low(0)
 12401  003A03  00                 	db	low(0)
 12402  003A04  14                 	db	low(014h)
 12403  003A05  7F                 	db	low(07Fh)
 12404  003A06  14                 	db	low(014h)
 12405  003A07  7F                 	db	low(07Fh)
 12406  003A08  14                 	db	low(014h)
 12407  003A09  00                 	db	low(0)
 12408  003A0A  24                 	db	low(024h)
 12409  003A0B  2A                 	db	low(02Ah)
 12410  003A0C  7F                 	db	low(07Fh)
 12411  003A0D  2A                 	db	low(02Ah)
 12412  003A0E  12                 	db	low(012h)
 12413  003A0F  00                 	db	low(0)
 12414  003A10  23                 	db	low(023h)
 12415  003A11  13                 	db	low(013h)
 12416  003A12  08                 	db	low(08h)
 12417  003A13  64                 	db	low(064h)
 12418  003A14  62                 	db	low(062h)
 12419  003A15  00                 	db	low(0)
 12420  003A16  36                 	db	low(036h)
 12421  003A17  49                 	db	low(049h)
 12422  003A18  55                 	db	low(055h)
 12423  003A19  22                 	db	low(022h)
 12424  003A1A  50                 	db	low(050h)
 12425  003A1B  00                 	db	low(0)
 12426  003A1C  00                 	db	low(0)
 12427  003A1D  05                 	db	low(05h)
 12428  003A1E  03                 	db	low(03h)
 12429  003A1F  00                 	db	low(0)
 12430  003A20  00                 	db	low(0)
 12431  003A21  00                 	db	low(0)
 12432  003A22  00                 	db	low(0)
 12433  003A23  1C                 	db	low(01Ch)
 12434  003A24  22                 	db	low(022h)
 12435  003A25  41                 	db	low(041h)
 12436  003A26  00                 	db	low(0)
 12437  003A27  00                 	db	low(0)
 12438  003A28  00                 	db	low(0)
 12439  003A29  41                 	db	low(041h)
 12440  003A2A  22                 	db	low(022h)
 12441  003A2B  1C                 	db	low(01Ch)
 12442  003A2C  00                 	db	low(0)
 12443  003A2D  00                 	db	low(0)
 12444  003A2E  08                 	db	low(08h)
 12445  003A2F  2A                 	db	low(02Ah)
 12446  003A30  1C                 	db	low(01Ch)
 12447  003A31  2A                 	db	low(02Ah)
 12448  003A32  08                 	db	low(08h)
 12449  003A33  00                 	db	low(0)
 12450  003A34  08                 	db	low(08h)
 12451  003A35  08                 	db	low(08h)
 12452  003A36  3E                 	db	low(03Eh)
 12453  003A37  08                 	db	low(08h)
 12454  003A38  08                 	db	low(08h)
 12455  003A39  00                 	db	low(0)
 12456  003A3A  00                 	db	low(0)
 12457  003A3B  50                 	db	low(050h)
 12458  003A3C  30                 	db	low(030h)
 12459  003A3D  00                 	db	low(0)
 12460  003A3E  00                 	db	low(0)
 12461  003A3F  00                 	db	low(0)
 12462  003A40  08                 	db	low(08h)
 12463  003A41  08                 	db	low(08h)
 12464  003A42  08                 	db	low(08h)
 12465  003A43  08                 	db	low(08h)
 12466  003A44  08                 	db	low(08h)
 12467  003A45  00                 	db	low(0)
 12468  003A46  00                 	db	low(0)
 12469  003A47  30                 	db	low(030h)
 12470  003A48  30                 	db	low(030h)
 12471  003A49  00                 	db	low(0)
 12472  003A4A  00                 	db	low(0)
 12473  003A4B  00                 	db	low(0)
 12474  003A4C  20                 	db	low(020h)
 12475  003A4D  10                 	db	low(010h)
 12476  003A4E  08                 	db	low(08h)
 12477  003A4F  04                 	db	low(04h)
 12478  003A50  02                 	db	low(02h)
 12479  003A51  00                 	db	low(0)
 12480  003A52  3E                 	db	low(03Eh)
 12481  003A53  51                 	db	low(051h)
 12482  003A54  49                 	db	low(049h)
 12483  003A55  45                 	db	low(045h)
 12484  003A56  3E                 	db	low(03Eh)
 12485  003A57  00                 	db	low(0)
 12486  003A58  00                 	db	low(0)
 12487  003A59  42                 	db	low(042h)
 12488  003A5A  7F                 	db	low(07Fh)
 12489  003A5B  40                 	db	low(040h)
 12490  003A5C  00                 	db	low(0)
 12491  003A5D  00                 	db	low(0)
 12492  003A5E  42                 	db	low(042h)
 12493  003A5F  61                 	db	low(061h)
 12494  003A60  51                 	db	low(051h)
 12495  003A61  49                 	db	low(049h)
 12496  003A62  46                 	db	low(046h)
 12497  003A63  00                 	db	low(0)
 12498  003A64  21                 	db	low(021h)
 12499  003A65  41                 	db	low(041h)
 12500  003A66  45                 	db	low(045h)
 12501  003A67  4B                 	db	low(04Bh)
 12502  003A68  31                 	db	low(031h)
 12503  003A69  00                 	db	low(0)
 12504  003A6A  18                 	db	low(018h)
 12505  003A6B  14                 	db	low(014h)
 12506  003A6C  12                 	db	low(012h)
 12507  003A6D  7F                 	db	low(07Fh)
 12508  003A6E  10                 	db	low(010h)
 12509  003A6F  00                 	db	low(0)
 12510  003A70  27                 	db	low(027h)
 12511  003A71  45                 	db	low(045h)
 12512  003A72  45                 	db	low(045h)
 12513  003A73  45                 	db	low(045h)
 12514  003A74  39                 	db	low(039h)
 12515  003A75  00                 	db	low(0)
 12516  003A76  3C                 	db	low(03Ch)
 12517  003A77  4A                 	db	low(04Ah)
 12518  003A78  49                 	db	low(049h)
 12519  003A79  49                 	db	low(049h)
 12520  003A7A  30                 	db	low(030h)
 12521  003A7B  00                 	db	low(0)
 12522  003A7C  01                 	db	low(01h)
 12523  003A7D  71                 	db	low(071h)
 12524  003A7E  09                 	db	low(09h)
 12525  003A7F  05                 	db	low(05h)
 12526  003A80  03                 	db	low(03h)
 12527  003A81  00                 	db	low(0)
 12528  003A82  36                 	db	low(036h)
 12529  003A83  49                 	db	low(049h)
 12530  003A84  49                 	db	low(049h)
 12531  003A85  49                 	db	low(049h)
 12532  003A86  36                 	db	low(036h)
 12533  003A87  00                 	db	low(0)
 12534  003A88  06                 	db	low(06h)
 12535  003A89  49                 	db	low(049h)
 12536  003A8A  49                 	db	low(049h)
 12537  003A8B  29                 	db	low(029h)
 12538  003A8C  1E                 	db	low(01Eh)
 12539  003A8D  00                 	db	low(0)
 12540  003A8E  00                 	db	low(0)
 12541  003A8F  36                 	db	low(036h)
 12542  003A90  36                 	db	low(036h)
 12543  003A91  00                 	db	low(0)
 12544  003A92  00                 	db	low(0)
 12545  003A93  00                 	db	low(0)
 12546  003A94  00                 	db	low(0)
 12547  003A95  56                 	db	low(056h)
 12548  003A96  36                 	db	low(036h)
 12549  003A97  00                 	db	low(0)
 12550  003A98  00                 	db	low(0)
 12551  003A99  00                 	db	low(0)
 12552  003A9A  00                 	db	low(0)
 12553  003A9B  08                 	db	low(08h)
 12554  003A9C  14                 	db	low(014h)
 12555  003A9D  22                 	db	low(022h)
 12556  003A9E  41                 	db	low(041h)
 12557  003A9F  00                 	db	low(0)
 12558  003AA0  14                 	db	low(014h)
 12559  003AA1  14                 	db	low(014h)
 12560  003AA2  14                 	db	low(014h)
 12561  003AA3  14                 	db	low(014h)
 12562  003AA4  14                 	db	low(014h)
 12563  003AA5  00                 	db	low(0)
 12564  003AA6  41                 	db	low(041h)
 12565  003AA7  22                 	db	low(022h)
 12566  003AA8  14                 	db	low(014h)
 12567  003AA9  08                 	db	low(08h)
 12568  003AAA  00                 	db	low(0)
 12569  003AAB  00                 	db	low(0)
 12570  003AAC  02                 	db	low(02h)
 12571  003AAD  01                 	db	low(01h)
 12572  003AAE  51                 	db	low(051h)
 12573  003AAF  09                 	db	low(09h)
 12574  003AB0  06                 	db	low(06h)
 12575  003AB1  00                 	db	low(0)
 12576  003AB2  32                 	db	low(032h)
 12577  003AB3  49                 	db	low(049h)
 12578  003AB4  79                 	db	low(079h)
 12579  003AB5  41                 	db	low(041h)
 12580  003AB6  3E                 	db	low(03Eh)
 12581  003AB7  00                 	db	low(0)
 12582  003AB8  7E                 	db	low(07Eh)
 12583  003AB9  11                 	db	low(011h)
 12584  003ABA  11                 	db	low(011h)
 12585  003ABB  11                 	db	low(011h)
 12586  003ABC  7E                 	db	low(07Eh)
 12587  003ABD  00                 	db	low(0)
 12588  003ABE  7F                 	db	low(07Fh)
 12589  003ABF  49                 	db	low(049h)
 12590  003AC0  49                 	db	low(049h)
 12591  003AC1  49                 	db	low(049h)
 12592  003AC2  36                 	db	low(036h)
 12593  003AC3  00                 	db	low(0)
 12594  003AC4  3E                 	db	low(03Eh)
 12595  003AC5  41                 	db	low(041h)
 12596  003AC6  41                 	db	low(041h)
 12597  003AC7  41                 	db	low(041h)
 12598  003AC8  22                 	db	low(022h)
 12599  003AC9  00                 	db	low(0)
 12600  003ACA  7F                 	db	low(07Fh)
 12601  003ACB  41                 	db	low(041h)
 12602  003ACC  41                 	db	low(041h)
 12603  003ACD  22                 	db	low(022h)
 12604  003ACE  1C                 	db	low(01Ch)
 12605  003ACF  00                 	db	low(0)
 12606  003AD0  7F                 	db	low(07Fh)
 12607  003AD1  49                 	db	low(049h)
 12608  003AD2  49                 	db	low(049h)
 12609  003AD3  49                 	db	low(049h)
 12610  003AD4  41                 	db	low(041h)
 12611  003AD5  00                 	db	low(0)
 12612  003AD6  7F                 	db	low(07Fh)
 12613  003AD7  09                 	db	low(09h)
 12614  003AD8  09                 	db	low(09h)
 12615  003AD9  01                 	db	low(01h)
 12616  003ADA  01                 	db	low(01h)
 12617  003ADB  00                 	db	low(0)
 12618  003ADC  3E                 	db	low(03Eh)
 12619  003ADD  41                 	db	low(041h)
 12620  003ADE  41                 	db	low(041h)
 12621  003ADF  51                 	db	low(051h)
 12622  003AE0  32                 	db	low(032h)
 12623  003AE1  00                 	db	low(0)
 12624  003AE2  7F                 	db	low(07Fh)
 12625  003AE3  08                 	db	low(08h)
 12626  003AE4  08                 	db	low(08h)
 12627  003AE5  08                 	db	low(08h)
 12628  003AE6  7F                 	db	low(07Fh)
 12629  003AE7  00                 	db	low(0)
 12630  003AE8  00                 	db	low(0)
 12631  003AE9  41                 	db	low(041h)
 12632  003AEA  7F                 	db	low(07Fh)
 12633  003AEB  41                 	db	low(041h)
 12634  003AEC  00                 	db	low(0)
 12635  003AED  00                 	db	low(0)
 12636  003AEE  20                 	db	low(020h)
 12637  003AEF  40                 	db	low(040h)
 12638  003AF0  41                 	db	low(041h)
 12639  003AF1  3F                 	db	low(03Fh)
 12640  003AF2  01                 	db	low(01h)
 12641  003AF3  00                 	db	low(0)
 12642  003AF4  7F                 	db	low(07Fh)
 12643  003AF5  08                 	db	low(08h)
 12644  003AF6  14                 	db	low(014h)
 12645  003AF7  22                 	db	low(022h)
 12646  003AF8  41                 	db	low(041h)
 12647  003AF9  00                 	db	low(0)
 12648  003AFA  7F                 	db	low(07Fh)
 12649  003AFB  40                 	db	low(040h)
 12650  003AFC  40                 	db	low(040h)
 12651  003AFD  40                 	db	low(040h)
 12652  003AFE  40                 	db	low(040h)
 12653  003AFF  00                 	db	low(0)
 12654  003B00  7F                 	db	low(07Fh)
 12655  003B01  02                 	db	low(02h)
 12656  003B02  04                 	db	low(04h)
 12657  003B03  02                 	db	low(02h)
 12658  003B04  7F                 	db	low(07Fh)
 12659  003B05  00                 	db	low(0)
 12660  003B06  7F                 	db	low(07Fh)
 12661  003B07  04                 	db	low(04h)
 12662  003B08  08                 	db	low(08h)
 12663  003B09  10                 	db	low(010h)
 12664  003B0A  7F                 	db	low(07Fh)
 12665  003B0B  00                 	db	low(0)
 12666  003B0C  3E                 	db	low(03Eh)
 12667  003B0D  41                 	db	low(041h)
 12668  003B0E  41                 	db	low(041h)
 12669  003B0F  41                 	db	low(041h)
 12670  003B10  3E                 	db	low(03Eh)
 12671  003B11  00                 	db	low(0)
 12672  003B12  7F                 	db	low(07Fh)
 12673  003B13  09                 	db	low(09h)
 12674  003B14  09                 	db	low(09h)
 12675  003B15  09                 	db	low(09h)
 12676  003B16  06                 	db	low(06h)
 12677  003B17  00                 	db	low(0)
 12678  003B18  3E                 	db	low(03Eh)
 12679  003B19  41                 	db	low(041h)
 12680  003B1A  51                 	db	low(051h)
 12681  003B1B  21                 	db	low(021h)
 12682  003B1C  5E                 	db	low(05Eh)
 12683  003B1D  00                 	db	low(0)
 12684  003B1E  7F                 	db	low(07Fh)
 12685  003B1F  09                 	db	low(09h)
 12686  003B20  19                 	db	low(019h)
 12687  003B21  29                 	db	low(029h)
 12688  003B22  46                 	db	low(046h)
 12689  003B23  00                 	db	low(0)
 12690  003B24  46                 	db	low(046h)
 12691  003B25  49                 	db	low(049h)
 12692  003B26  49                 	db	low(049h)
 12693  003B27  49                 	db	low(049h)
 12694  003B28  31                 	db	low(031h)
 12695  003B29  00                 	db	low(0)
 12696  003B2A  01                 	db	low(01h)
 12697  003B2B  01                 	db	low(01h)
 12698  003B2C  7F                 	db	low(07Fh)
 12699  003B2D  01                 	db	low(01h)
 12700  003B2E  01                 	db	low(01h)
 12701  003B2F  00                 	db	low(0)
 12702  003B30  3F                 	db	low(03Fh)
 12703  003B31  40                 	db	low(040h)
 12704  003B32  40                 	db	low(040h)
 12705  003B33  40                 	db	low(040h)
 12706  003B34  3F                 	db	low(03Fh)
 12707  003B35  00                 	db	low(0)
 12708  003B36  1F                 	db	low(01Fh)
 12709  003B37  20                 	db	low(020h)
 12710  003B38  40                 	db	low(040h)
 12711  003B39  20                 	db	low(020h)
 12712  003B3A  1F                 	db	low(01Fh)
 12713  003B3B  00                 	db	low(0)
 12714  003B3C  7F                 	db	low(07Fh)
 12715  003B3D  20                 	db	low(020h)
 12716  003B3E  18                 	db	low(018h)
 12717  003B3F  20                 	db	low(020h)
 12718  003B40  7F                 	db	low(07Fh)
 12719  003B41  00                 	db	low(0)
 12720  003B42  63                 	db	low(063h)
 12721  003B43  14                 	db	low(014h)
 12722  003B44  08                 	db	low(08h)
 12723  003B45  14                 	db	low(014h)
 12724  003B46  63                 	db	low(063h)
 12725  003B47  00                 	db	low(0)
 12726  003B48  03                 	db	low(03h)
 12727  003B49  04                 	db	low(04h)
 12728  003B4A  78                 	db	low(078h)
 12729  003B4B  04                 	db	low(04h)
 12730  003B4C  03                 	db	low(03h)
 12731  003B4D  00                 	db	low(0)
 12732  003B4E  61                 	db	low(061h)
 12733  003B4F  51                 	db	low(051h)
 12734  003B50  49                 	db	low(049h)
 12735  003B51  45                 	db	low(045h)
 12736  003B52  43                 	db	low(043h)
 12737  003B53  00                 	db	low(0)
 12738  003B54  00                 	db	low(0)
 12739  003B55  00                 	db	low(0)
 12740  003B56  7F                 	db	low(07Fh)
 12741  003B57  41                 	db	low(041h)
 12742  003B58  41                 	db	low(041h)
 12743  003B59  00                 	db	low(0)
 12744  003B5A  02                 	db	low(02h)
 12745  003B5B  04                 	db	low(04h)
 12746  003B5C  08                 	db	low(08h)
 12747  003B5D  10                 	db	low(010h)
 12748  003B5E  20                 	db	low(020h)
 12749  003B5F  00                 	db	low(0)
 12750  003B60  41                 	db	low(041h)
 12751  003B61  41                 	db	low(041h)
 12752  003B62  7F                 	db	low(07Fh)
 12753  003B63  00                 	db	low(0)
 12754  003B64  00                 	db	low(0)
 12755  003B65  00                 	db	low(0)
 12756  003B66  04                 	db	low(04h)
 12757  003B67  02                 	db	low(02h)
 12758  003B68  01                 	db	low(01h)
 12759  003B69  02                 	db	low(02h)
 12760  003B6A  04                 	db	low(04h)
 12761  003B6B  00                 	db	low(0)
 12762  003B6C  40                 	db	low(040h)
 12763  003B6D  40                 	db	low(040h)
 12764  003B6E  40                 	db	low(040h)
 12765  003B6F  40                 	db	low(040h)
 12766  003B70  40                 	db	low(040h)
 12767  003B71  00                 	db	low(0)
 12768  003B72  00                 	db	low(0)
 12769  003B73  01                 	db	low(01h)
 12770  003B74  02                 	db	low(02h)
 12771  003B75  04                 	db	low(04h)
 12772  003B76  00                 	db	low(0)
 12773  003B77  00                 	db	low(0)
 12774  003B78  20                 	db	low(020h)
 12775  003B79  54                 	db	low(054h)
 12776  003B7A  54                 	db	low(054h)
 12777  003B7B  54                 	db	low(054h)
 12778  003B7C  78                 	db	low(078h)
 12779  003B7D  00                 	db	low(0)
 12780  003B7E  7F                 	db	low(07Fh)
 12781  003B7F  48                 	db	low(048h)
 12782  003B80  44                 	db	low(044h)
 12783  003B81  44                 	db	low(044h)
 12784  003B82  38                 	db	low(038h)
 12785  003B83  00                 	db	low(0)
 12786  003B84  38                 	db	low(038h)
 12787  003B85  44                 	db	low(044h)
 12788  003B86  44                 	db	low(044h)
 12789  003B87  44                 	db	low(044h)
 12790  003B88  20                 	db	low(020h)
 12791  003B89  00                 	db	low(0)
 12792  003B8A  38                 	db	low(038h)
 12793  003B8B  44                 	db	low(044h)
 12794  003B8C  44                 	db	low(044h)
 12795  003B8D  48                 	db	low(048h)
 12796  003B8E  7F                 	db	low(07Fh)
 12797  003B8F  00                 	db	low(0)
 12798  003B90  38                 	db	low(038h)
 12799  003B91  54                 	db	low(054h)
 12800  003B92  54                 	db	low(054h)
 12801  003B93  54                 	db	low(054h)
 12802  003B94  18                 	db	low(018h)
 12803  003B95  00                 	db	low(0)
 12804  003B96  08                 	db	low(08h)
 12805  003B97  7E                 	db	low(07Eh)
 12806  003B98  09                 	db	low(09h)
 12807  003B99  01                 	db	low(01h)
 12808  003B9A  02                 	db	low(02h)
 12809  003B9B  00                 	db	low(0)
 12810  003B9C  08                 	db	low(08h)
 12811  003B9D  14                 	db	low(014h)
 12812  003B9E  54                 	db	low(054h)
 12813  003B9F  54                 	db	low(054h)
 12814  003BA0  3C                 	db	low(03Ch)
 12815  003BA1  00                 	db	low(0)
 12816  003BA2  7F                 	db	low(07Fh)
 12817  003BA3  08                 	db	low(08h)
 12818  003BA4  04                 	db	low(04h)
 12819  003BA5  04                 	db	low(04h)
 12820  003BA6  78                 	db	low(078h)
 12821  003BA7  00                 	db	low(0)
 12822  003BA8  00                 	db	low(0)
 12823  003BA9  44                 	db	low(044h)
 12824  003BAA  7D                 	db	low(07Dh)
 12825  003BAB  40                 	db	low(040h)
 12826  003BAC  00                 	db	low(0)
 12827  003BAD  00                 	db	low(0)
 12828  003BAE  20                 	db	low(020h)
 12829  003BAF  40                 	db	low(040h)
 12830  003BB0  44                 	db	low(044h)
 12831  003BB1  3D                 	db	low(03Dh)
 12832  003BB2  00                 	db	low(0)
 12833  003BB3  00                 	db	low(0)
 12834  003BB4  00                 	db	low(0)
 12835  003BB5  7F                 	db	low(07Fh)
 12836  003BB6  10                 	db	low(010h)
 12837  003BB7  28                 	db	low(028h)
 12838  003BB8  44                 	db	low(044h)
 12839  003BB9  00                 	db	low(0)
 12840  003BBA  00                 	db	low(0)
 12841  003BBB  41                 	db	low(041h)
 12842  003BBC  7F                 	db	low(07Fh)
 12843  003BBD  40                 	db	low(040h)
 12844  003BBE  00                 	db	low(0)
 12845  003BBF  00                 	db	low(0)
 12846  003BC0  7C                 	db	low(07Ch)
 12847  003BC1  04                 	db	low(04h)
 12848  003BC2  18                 	db	low(018h)
 12849  003BC3  04                 	db	low(04h)
 12850  003BC4  78                 	db	low(078h)
 12851  003BC5  00                 	db	low(0)
 12852  003BC6  7C                 	db	low(07Ch)
 12853  003BC7  08                 	db	low(08h)
 12854  003BC8  04                 	db	low(04h)
 12855  003BC9  04                 	db	low(04h)
 12856  003BCA  78                 	db	low(078h)
 12857  003BCB  00                 	db	low(0)
 12858  003BCC  38                 	db	low(038h)
 12859  003BCD  44                 	db	low(044h)
 12860  003BCE  44                 	db	low(044h)
 12861  003BCF  44                 	db	low(044h)
 12862  003BD0  38                 	db	low(038h)
 12863  003BD1  00                 	db	low(0)
 12864  003BD2  7C                 	db	low(07Ch)
 12865  003BD3  14                 	db	low(014h)
 12866  003BD4  14                 	db	low(014h)
 12867  003BD5  14                 	db	low(014h)
 12868  003BD6  08                 	db	low(08h)
 12869  003BD7  00                 	db	low(0)
 12870  003BD8  08                 	db	low(08h)
 12871  003BD9  14                 	db	low(014h)
 12872  003BDA  14                 	db	low(014h)
 12873  003BDB  18                 	db	low(018h)
 12874  003BDC  7C                 	db	low(07Ch)
 12875  003BDD  00                 	db	low(0)
 12876  003BDE  7C                 	db	low(07Ch)
 12877  003BDF  08                 	db	low(08h)
 12878  003BE0  04                 	db	low(04h)
 12879  003BE1  04                 	db	low(04h)
 12880  003BE2  08                 	db	low(08h)
 12881  003BE3  00                 	db	low(0)
 12882  003BE4  48                 	db	low(048h)
 12883  003BE5  54                 	db	low(054h)
 12884  003BE6  54                 	db	low(054h)
 12885  003BE7  54                 	db	low(054h)
 12886  003BE8  20                 	db	low(020h)
 12887  003BE9  00                 	db	low(0)
 12888  003BEA  04                 	db	low(04h)
 12889  003BEB  3F                 	db	low(03Fh)
 12890  003BEC  44                 	db	low(044h)
 12891  003BED  40                 	db	low(040h)
 12892  003BEE  20                 	db	low(020h)
 12893  003BEF  00                 	db	low(0)
 12894  003BF0  3C                 	db	low(03Ch)
 12895  003BF1  40                 	db	low(040h)
 12896  003BF2  40                 	db	low(040h)
 12897  003BF3  20                 	db	low(020h)
 12898  003BF4  7C                 	db	low(07Ch)
 12899  003BF5  00                 	db	low(0)
 12900  003BF6  1C                 	db	low(01Ch)
 12901  003BF7  20                 	db	low(020h)
 12902  003BF8  40                 	db	low(040h)
 12903  003BF9  20                 	db	low(020h)
 12904  003BFA  1C                 	db	low(01Ch)
 12905  003BFB  00                 	db	low(0)
 12906  003BFC  3C                 	db	low(03Ch)
 12907  003BFD  40                 	db	low(040h)
 12908  003BFE  30                 	db	low(030h)
 12909  003BFF  40                 	db	low(040h)
 12910  003C00  3C                 	db	low(03Ch)
 12911  003C01  00                 	db	low(0)
 12912  003C02  44                 	db	low(044h)
 12913  003C03  28                 	db	low(028h)
 12914  003C04  10                 	db	low(010h)
 12915  003C05  28                 	db	low(028h)
 12916  003C06  44                 	db	low(044h)
 12917  003C07  00                 	db	low(0)
 12918  003C08  0C                 	db	low(0Ch)
 12919  003C09  50                 	db	low(050h)
 12920  003C0A  50                 	db	low(050h)
 12921  003C0B  50                 	db	low(050h)
 12922  003C0C  3C                 	db	low(03Ch)
 12923  003C0D  00                 	db	low(0)
 12924  003C0E  44                 	db	low(044h)
 12925  003C0F  64                 	db	low(064h)
 12926  003C10  54                 	db	low(054h)
 12927  003C11  4C                 	db	low(04Ch)
 12928  003C12  44                 	db	low(044h)
 12929  003C13  00                 	db	low(0)
 12930  003C14  00                 	db	low(0)
 12931  003C15  08                 	db	low(08h)
 12932  003C16  36                 	db	low(036h)
 12933  003C17  41                 	db	low(041h)
 12934  003C18  00                 	db	low(0)
 12935  003C19  00                 	db	low(0)
 12936  003C1A  00                 	db	low(0)
 12937  003C1B  00                 	db	low(0)
 12938  003C1C  7F                 	db	low(07Fh)
 12939  003C1D  00                 	db	low(0)
 12940  003C1E  00                 	db	low(0)
 12941  003C1F  00                 	db	low(0)
 12942  003C20  00                 	db	low(0)
 12943  003C21  41                 	db	low(041h)
 12944  003C22  36                 	db	low(036h)
 12945  003C23  08                 	db	low(08h)
 12946  003C24  00                 	db	low(0)
 12947  003C25  00                 	db	low(0)
 12948  003C26  08                 	db	low(08h)
 12949  003C27  08                 	db	low(08h)
 12950  003C28  2A                 	db	low(02Ah)
 12951  003C29  1C                 	db	low(01Ch)
 12952  003C2A  08                 	db	low(08h)
 12953  003C2B  00                 	db	low(0)
 12954  003C2C  08                 	db	low(08h)
 12955  003C2D  1C                 	db	low(01Ch)
 12956  003C2E  2A                 	db	low(02Ah)
 12957  003C2F  08                 	db	low(08h)
 12958  003C30  08                 	db	low(08h)
 12959  003C31  00                 	db	low(0)
 12960                           	global	_cszMonth
 12961                           	file	"main.c"
 12962                           	line	65
 12963  003C32                     _cszMonth:
 12964  003C32  4A                 	db	low(04Ah)
 12965  003C33  61                 	db	low(061h)
 12966  003C34  6E                 	db	low(06Eh)
 12967  003C35  75                 	db	low(075h)
 12968  003C36  61                 	db	low(061h)
 12969  003C37  72                 	db	low(072h)
 12970  003C38  79                 	db	low(079h)
 12971  003C39  00                 	db	low(0)
 12972  003C3A  00                 	db   0
 12973  003C3B  00                 	db   0
 12974  003C3C  46                 	db	low(046h)
 12975  003C3D  65                 	db	low(065h)
 12976  003C3E  62                 	db	low(062h)
 12977  003C3F  72                 	db	low(072h)
 12978  003C40  75                 	db	low(075h)
 12979  003C41  61                 	db	low(061h)
 12980  003C42  72                 	db	low(072h)
 12981  003C43  79                 	db	low(079h)
 12982  003C44  00                 	db	low(0)
 12983  003C45  00                 	db   0
 12984  003C46  4D                 	db	low(04Dh)
 12985  003C47  61                 	db	low(061h)
 12986  003C48  72                 	db	low(072h)
 12987  003C49  63                 	db	low(063h)
 12988  003C4A  68                 	db	low(068h)
 12989  003C4B  00                 	db	low(0)
 12990  003C4C  00                 	db   0
 12991  003C4D  00                 	db   0
 12992  003C4E  00                 	db   0
 12993  003C4F  00                 	db   0
 12994  003C50  41                 	db	low(041h)
 12995  003C51  70                 	db	low(070h)
 12996  003C52  72                 	db	low(072h)
 12997  003C53  69                 	db	low(069h)
 12998  003C54  6C                 	db	low(06Ch)
 12999  003C55  00                 	db	low(0)
 13000  003C56  00                 	db   0
 13001  003C57  00                 	db   0
 13002  003C58  00                 	db   0
 13003  003C59  00                 	db   0
 13004  003C5A  4D                 	db	low(04Dh)
 13005  003C5B  61                 	db	low(061h)
 13006  003C5C  79                 	db	low(079h)
 13007  003C5D  00                 	db	low(0)
 13008  003C5E  00                 	db   0
 13009  003C5F  00                 	db   0
 13010  003C60  00                 	db   0
 13011  003C61  00                 	db   0
 13012  003C62  00                 	db   0
 13013  003C63  00                 	db   0
 13014  003C64  4A                 	db	low(04Ah)
 13015  003C65  75                 	db	low(075h)
 13016  003C66  6E                 	db	low(06Eh)
 13017  003C67  65                 	db	low(065h)
 13018  003C68  00                 	db	low(0)
 13019  003C69  00                 	db   0
 13020  003C6A  00                 	db   0
 13021  003C6B  00                 	db   0
 13022  003C6C  00                 	db   0
 13023  003C6D  00                 	db   0
 13024  003C6E  4A                 	db	low(04Ah)
 13025  003C6F  75                 	db	low(075h)
 13026  003C70  6C                 	db	low(06Ch)
 13027  003C71  79                 	db	low(079h)
 13028  003C72  00                 	db	low(0)
 13029  003C73  00                 	db   0
 13030  003C74  00                 	db   0
 13031  003C75  00                 	db   0
 13032  003C76  00                 	db   0
 13033  003C77  00                 	db   0
 13034  003C78  41                 	db	low(041h)
 13035  003C79  75                 	db	low(075h)
 13036  003C7A  67                 	db	low(067h)
 13037  003C7B  75                 	db	low(075h)
 13038  003C7C  73                 	db	low(073h)
 13039  003C7D  74                 	db	low(074h)
 13040  003C7E  00                 	db	low(0)
 13041  003C7F  00                 	db   0
 13042  003C80  00                 	db   0
 13043  003C81  00                 	db   0
 13044  003C82  53                 	db	low(053h)
 13045  003C83  65                 	db	low(065h)
 13046  003C84  70                 	db	low(070h)
 13047  003C85  74                 	db	low(074h)
 13048  003C86  65                 	db	low(065h)
 13049  003C87  6D                 	db	low(06Dh)
 13050  003C88  62                 	db	low(062h)
 13051  003C89  65                 	db	low(065h)
 13052  003C8A  72                 	db	low(072h)
 13053  003C8B  00                 	db	low(0)
 13054  003C8C  4F                 	db	low(04Fh)
 13055  003C8D  63                 	db	low(063h)
 13056  003C8E  74                 	db	low(074h)
 13057  003C8F  6F                 	db	low(06Fh)
 13058  003C90  62                 	db	low(062h)
 13059  003C91  65                 	db	low(065h)
 13060  003C92  72                 	db	low(072h)
 13061  003C93  00                 	db	low(0)
 13062  003C94  00                 	db   0
 13063  003C95  00                 	db   0
 13064  003C96  4E                 	db	low(04Eh)
 13065  003C97  6F                 	db	low(06Fh)
 13066  003C98  76                 	db	low(076h)
 13067  003C99  65                 	db	low(065h)
 13068  003C9A  6D                 	db	low(06Dh)
 13069  003C9B  62                 	db	low(062h)
 13070  003C9C  65                 	db	low(065h)
 13071  003C9D  72                 	db	low(072h)
 13072  003C9E  00                 	db	low(0)
 13073  003C9F  00                 	db   0
 13074  003CA0  44                 	db	low(044h)
 13075  003CA1  65                 	db	low(065h)
 13076  003CA2  63                 	db	low(063h)
 13077  003CA3  65                 	db	low(065h)
 13078  003CA4  6D                 	db	low(06Dh)
 13079  003CA5  62                 	db	low(062h)
 13080  003CA6  65                 	db	low(065h)
 13081  003CA7  72                 	db	low(072h)
 13082  003CA8  00                 	db	low(0)
 13083  003CA9  00                 	db   0
 13084                           	global	_cszDay
 13085                           	line	62
 13086  003CAA                     _cszDay:
 13087  003CAA  4D                 	db	low(04Dh)
 13088  003CAB  6F                 	db	low(06Fh)
 13089  003CAC  6E                 	db	low(06Eh)
 13090  003CAD  64                 	db	low(064h)
 13091  003CAE  61                 	db	low(061h)
 13092  003CAF  79                 	db	low(079h)
 13093  003CB0  00                 	db	low(0)
 13094  003CB1  00                 	db   0
 13095  003CB2  00                 	db   0
 13096  003CB3  00                 	db   0
 13097  003CB4  00                 	db   0
 13098  003CB5  54                 	db	low(054h)
 13099  003CB6  75                 	db	low(075h)
 13100  003CB7  65                 	db	low(065h)
 13101  003CB8  73                 	db	low(073h)
 13102  003CB9  64                 	db	low(064h)
 13103  003CBA  61                 	db	low(061h)
 13104  003CBB  79                 	db	low(079h)
 13105  003CBC  00                 	db	low(0)
 13106  003CBD  00                 	db   0
 13107  003CBE  00                 	db   0
 13108  003CBF  00                 	db   0
 13109  003CC0  57                 	db	low(057h)
 13110  003CC1  65                 	db	low(065h)
 13111  003CC2  64                 	db	low(064h)
 13112  003CC3  6E                 	db	low(06Eh)
 13113  003CC4  65                 	db	low(065h)
 13114  003CC5  73                 	db	low(073h)
 13115  003CC6  64                 	db	low(064h)
 13116  003CC7  61                 	db	low(061h)
 13117  003CC8  79                 	db	low(079h)
 13118  003CC9  00                 	db	low(0)
 13119  003CCA  00                 	db   0
 13120  003CCB  54                 	db	low(054h)
 13121  003CCC  68                 	db	low(068h)
 13122  003CCD  75                 	db	low(075h)
 13123  003CCE  72                 	db	low(072h)
 13124  003CCF  73                 	db	low(073h)
 13125  003CD0  64                 	db	low(064h)
 13126  003CD1  61                 	db	low(061h)
 13127  003CD2  79                 	db	low(079h)
 13128  003CD3  00                 	db	low(0)
 13129  003CD4  00                 	db   0
 13130  003CD5  00                 	db   0
 13131  003CD6  46                 	db	low(046h)
 13132  003CD7  72                 	db	low(072h)
 13133  003CD8  69                 	db	low(069h)
 13134  003CD9  64                 	db	low(064h)
 13135  003CDA  61                 	db	low(061h)
 13136  003CDB  79                 	db	low(079h)
 13137  003CDC  00                 	db	low(0)
 13138  003CDD  00                 	db   0
 13139  003CDE  00                 	db   0
 13140  003CDF  00                 	db   0
 13141  003CE0  00                 	db   0
 13142  003CE1  53                 	db	low(053h)
 13143  003CE2  61                 	db	low(061h)
 13144  003CE3  74                 	db	low(074h)
 13145  003CE4  75                 	db	low(075h)
 13146  003CE5  72                 	db	low(072h)
 13147  003CE6  64                 	db	low(064h)
 13148  003CE7  61                 	db	low(061h)
 13149  003CE8  79                 	db	low(079h)
 13150  003CE9  00                 	db	low(0)
 13151  003CEA  00                 	db   0
 13152  003CEB  00                 	db   0
 13153  003CEC  53                 	db	low(053h)
 13154  003CED  75                 	db	low(075h)
 13155  003CEE  6E                 	db	low(06Eh)
 13156  003CEF  64                 	db	low(064h)
 13157  003CF0  61                 	db	low(061h)
 13158  003CF1  79                 	db	low(079h)
 13159  003CF2  00                 	db	low(0)
 13160  003CF3  00                 	db   0
 13161  003CF4  00                 	db   0
 13162  003CF5  00                 	db   0
 13163  003CF6  00                 	db   0
 13164                           	global	_cszTimeZone
 13165                           	line	70
 13166  003CF7                     _cszTimeZone:
 13167  003CF7  41                 	db	low(041h)
 13168  003CF8  74                 	db	low(074h)
 13169  003CF9  6C                 	db	low(06Ch)
 13170  003CFA  61                 	db	low(061h)
 13171  003CFB  6E                 	db	low(06Eh)
 13172  003CFC  74                 	db	low(074h)
 13173  003CFD  69                 	db	low(069h)
 13174  003CFE  63                 	db	low(063h)
 13175  003CFF  00                 	db	low(0)
 13176  003D00  00                 	db   0
 13177  003D01  45                 	db	low(045h)
 13178  003D02  61                 	db	low(061h)
 13179  003D03  73                 	db	low(073h)
 13180  003D04  74                 	db	low(074h)
 13181  003D05  65                 	db	low(065h)
 13182  003D06  72                 	db	low(072h)
 13183  003D07  6E                 	db	low(06Eh)
 13184  003D08  00                 	db	low(0)
 13185  003D09  00                 	db   0
 13186  003D0A  00                 	db   0
 13187  003D0B  43                 	db	low(043h)
 13188  003D0C  65                 	db	low(065h)
 13189  003D0D  6E                 	db	low(06Eh)
 13190  003D0E  74                 	db	low(074h)
 13191  003D0F  72                 	db	low(072h)
 13192  003D10  61                 	db	low(061h)
 13193  003D11  6C                 	db	low(06Ch)
 13194  003D12  00                 	db	low(0)
 13195  003D13  00                 	db   0
 13196  003D14  00                 	db   0
 13197  003D15  4D                 	db	low(04Dh)
 13198  003D16  6F                 	db	low(06Fh)
 13199  003D17  75                 	db	low(075h)
 13200  003D18  6E                 	db	low(06Eh)
 13201  003D19  74                 	db	low(074h)
 13202  003D1A  61                 	db	low(061h)
 13203  003D1B  69                 	db	low(069h)
 13204  003D1C  6E                 	db	low(06Eh)
 13205  003D1D  00                 	db	low(0)
 13206  003D1E  00                 	db   0
 13207  003D1F  50                 	db	low(050h)
 13208  003D20  61                 	db	low(061h)
 13209  003D21  63                 	db	low(063h)
 13210  003D22  69                 	db	low(069h)
 13211  003D23  66                 	db	low(066h)
 13212  003D24  69                 	db	low(069h)
 13213  003D25  63                 	db	low(063h)
 13214  003D26  00                 	db	low(0)
 13215  003D27  00                 	db   0
 13216  003D28  00                 	db   0
 13217  003D29  41                 	db	low(041h)
 13218  003D2A  6C                 	db	low(06Ch)
 13219  003D2B  61                 	db	low(061h)
 13220  003D2C  73                 	db	low(073h)
 13221  003D2D  6B                 	db	low(06Bh)
 13222  003D2E  61                 	db	low(061h)
 13223  003D2F  6E                 	db	low(06Eh)
 13224  003D30  00                 	db	low(0)
 13225  003D31  00                 	db   0
 13226  003D32  00                 	db   0
 13227  003D33  48                 	db	low(048h)
 13228  003D34  61                 	db	low(061h)
 13229  003D35  77                 	db	low(077h)
 13230  003D36  61                 	db	low(061h)
 13231  003D37  69                 	db	low(069h)
 13232  003D38  69                 	db	low(069h)
 13233  003D39  61                 	db	low(061h)
 13234  003D3A  6E                 	db	low(06Eh)
 13235  003D3B  00                 	db	low(0)
 13236  003D3C  00                 	db   0
 13237                           	global	_wEOM
 13238                           	file	"wwv.c"
 13239                           	line	42
 13240  003D3D                     _wEOM:
 13241  003D3D  0000               	dw	(0)&0ffffh
 13242  003D3F  0000               	dw	(0)&0ffffh
 13243  003D41  001F               	dw	(01Fh)&0ffffh
 13244  003D43  001F               	dw	(01Fh)&0ffffh
 13245  003D45  003B               	dw	(03Bh)&0ffffh
 13246  003D47  003C               	dw	(03Ch)&0ffffh
 13247  003D49  005A               	dw	(05Ah)&0ffffh
 13248  003D4B  005B               	dw	(05Bh)&0ffffh
 13249  003D4D  0078               	dw	(078h)&0ffffh
 13250  003D4F  0079               	dw	(079h)&0ffffh
 13251  003D51  0097               	dw	(097h)&0ffffh
 13252  003D53  0098               	dw	(098h)&0ffffh
 13253  003D55  00B5               	dw	(0B5h)&0ffffh
 13254  003D57  00B6               	dw	(0B6h)&0ffffh
 13255  003D59  00D4               	dw	(0D4h)&0ffffh
 13256  003D5B  00D5               	dw	(0D5h)&0ffffh
 13257  003D5D  00F3               	dw	(0F3h)&0ffffh
 13258  003D5F  00F4               	dw	(0F4h)&0ffffh
 13259  003D61  0111               	dw	(0111h)&0ffffh
 13260  003D63  0112               	dw	(0112h)&0ffffh
 13261  003D65  0130               	dw	(0130h)&0ffffh
 13262+ 003D67  0131               	dw	(0131h)&0ffffh
 13263+ 003D69  014E               	dw	(014Eh)&0ffffh
 13264+ 003D6B  014F               	dw	(014Fh)&0ffffh
 13265+ 003D6D  016D               	dw	(016Dh)&0ffffh
 13266+ 003D6F  016E               	dw	(016Eh)&0ffffh
 13267+                          	global	_digAM
 13268+                          	file	"bitmaps.h"
 13269+                          	line	90
 13270+ 003D71                     _digAM:
 13271+ 003D71  00                 	db	low(0)
 13272+ 003D72  00                 	db	low(0)
 13273+ 003D73  C0                 	db	low(0C0h)
 13274+ 003D74  F8                 	db	low(0F8h)
 13275+ 003D75  3F                 	db	low(03Fh)
 13276+ 003D76  07                 	db	low(07h)
 13277+ 003D77  3F                 	db	low(03Fh)
 13278+ 003D78  F8                 	db	low(0F8h)
 13279+ 003D79  C0                 	db	low(0C0h)
 13280+ 003D7A  00                 	db	low(0)
 13281+ 003D7B  00                 	db	low(0)
 13282+ 003D7C  00                 	db	low(0)
 13283+ 003D7D  FF                 	db	low(0FFh)
 13284+ 003D7E  FF                 	db	low(0FFh)
 13285+ 003D7F  0F                 	db	low(0Fh)
 13286+ 003D80  FF                 	db	low(0FFh)
 13287+ 003D81  C0                 	db	low(0C0h)
 13288+ 003D82  00                 	db	low(0)
 13289+ 003D83  C0                 	db	low(0C0h)
 13290+ 003D84  FE                 	db	low(0FEh)
 13291+ 003D85  0F                 	db	low(0Fh)
 13292+ 003D86  FF                 	db	low(0FFh)
 13293+ 003D87  FF                 	db	low(0FFh)
 13294+ 003D88  30                 	db	low(030h)
 13295+ 003D89  3E                 	db	low(03Eh)
 13296+ 003D8A  1F                 	db	low(01Fh)
 13297+ 003D8B  03                 	db	low(03h)
 13298+ 003D8C  03                 	db	low(03h)
 13299+ 003D8D  03                 	db	low(03h)
 13300+ 003D8E  03                 	db	low(03h)
 13301+ 003D8F  03                 	db	low(03h)
 13302+ 003D90  1F                 	db	low(01Fh)
 13303+ 003D91  3E                 	db	low(03Eh)
 13304+ 003D92  30                 	db	low(030h)
 13305+ 003D93  00                 	db	low(0)
 13306+ 003D94  3F                 	db	low(03Fh)
 13307+ 003D95  3F                 	db	low(03Fh)
 13308+ 003D96  00                 	db	low(0)
 13309+ 003D97  01                 	db	low(01h)
 13310+ 003D98  3F                 	db	low(03Fh)
 13311+ 003D99  38                 	db	low(038h)
 13312+ 003D9A  3F                 	db	low(03Fh)
 13313+ 003D9B  01                 	db	low(01h)
 13314+ 003D9C  00                 	db	low(0)
 13315+ 003D9D  3F                 	db	low(03Fh)
 13316+ 003D9E  3F                 	db	low(03Fh)
 13317+                          	global	_digPM
 13318+                          	line	97
 13319+ 003D9F                     _digPM:
 13320+ 003D9F  00                 	db	low(0)
 13321+ 003DA0  FF                 	db	low(0FFh)
 13322+ 003DA1  FF                 	db	low(0FFh)
 13323+ 003DA2  83                 	db	low(083h)
 13324+ 003DA3  83                 	db	low(083h)
 13325+ 003DA4  83                 	db	low(083h)
 13326+ 003DA5  C7                 	db	low(0C7h)
 13327+ 003DA6  FE                 	db	low(0FEh)
 13328+ 003DA7  7C                 	db	low(07Ch)
 13329+ 003DA8  00                 	db	low(0)
 13330+ 003DA9  00                 	db	low(0)
 13331+ 003DAA  FF                 	db	low(0FFh)
 13332+ 003DAB  FF                 	db	low(0FFh)
 13333+ 003DAC  0F                 	db	low(0Fh)
 13334+ 003DAD  FF                 	db	low(0FFh)
 13335+ 003DAE  C0                 	db	low(0C0h)
 13336+ 003DAF  00                 	db	low(0)
 13337+ 003DB0  C0                 	db	low(0C0h)
 13338+ 003DB1  FE                 	db	low(0FEh)
 13339+ 003DB2  0F                 	db	low(0Fh)
 13340+ 003DB3  FF                 	db	low(0FFh)
 13341+ 003DB4  FF                 	db	low(0FFh)
 13342+ 003DB5  00                 	db	low(0)
 13343+ 003DB6  00                 	db	low(0)
 13344+ 003DB7  3F                 	db	low(03Fh)
 13345+ 003DB8  3F                 	db	low(03Fh)
 13346+ 003DB9  01                 	db	low(01h)
 13347+ 003DBA  01                 	db	low(01h)
 13348+ 003DBB  01                 	db	low(01h)
 13349+ 003DBC  01                 	db	low(01h)
 13350+ 003DBD  00                 	db	low(0)
 13351+ 003DBE  00                 	db	low(0)
 13352+ 003DBF  00                 	db	low(0)
 13353+ 003DC0  00                 	db	low(0)
 13354+ 003DC1  3F                 	db	low(03Fh)
 13355+ 003DC2  3F                 	db	low(03Fh)
 13356+ 003DC3  00                 	db	low(0)
 13357+ 003DC4  01                 	db	low(01h)
 13358+ 003DC5  3F                 	db	low(03Fh)
 13359+ 003DC6  38                 	db	low(038h)
 13360+ 003DC7  3F                 	db	low(03Fh)
 13361+ 003DC8  01                 	db	low(01h)
 13362+ 003DC9  00                 	db	low(0)
 13363+ 003DCA  3F                 	db	low(03Fh)
 13364+ 003DCB  3F                 	db	low(03Fh)
 13365+ 003DCC  00                 	db	low(0)
 13366+                          	global	_dig0
 13367+                          	line	13
 13368+ 003DCD                     _dig0:
 13369+ 003DCD  C0                 	db	low(0C0h)
 13370+ 003DCE  F8                 	db	low(0F8h)
 13371+ 003DCF  FC                 	db	low(0FCh)
 13372+ 003DD0  FE                 	db	low(0FEh)
 13373+ 003DD1  3F                 	db	low(03Fh)
 13374+ 003DD2  0F                 	db	low(0Fh)
 13375+ 003DD3  0F                 	db	low(0Fh)
 13376+ 003DD4  0F                 	db	low(0Fh)
 13377+ 003DD5  3F                 	db	low(03Fh)
 13378+ 003DD6  FE                 	db	low(0FEh)
 13379+ 003DD7  FC                 	db	low(0FCh)
 13380+ 003DD8  F8                 	db	low(0F8h)
 13381+ 003DD9  C0                 	db	low(0C0h)
 13382+ 003DDA  FF                 	db	low(0FFh)
 13383+ 003DDB  FF                 	db	low(0FFh)
 13384+ 003DDC  FF                 	db	low(0FFh)
 13385+ 003DDD  FF                 	db	low(0FFh)
 13386+ 003DDE  00                 	db	low(0)
 13387+ 003DDF  00                 	db	low(0)
 13388+ 003DE0  00                 	db	low(0)
 13389+ 003DE1  00                 	db	low(0)
 13390+ 003DE2  00                 	db	low(0)
 13391+ 003DE3  FF                 	db	low(0FFh)
 13392+ 003DE4  FF                 	db	low(0FFh)
 13393+ 003DE5  FF                 	db	low(0FFh)
 13394+ 003DE6  FF                 	db	low(0FFh)
 13395+ 003DE7  01                 	db	low(01h)
 13396+ 003DE8  0F                 	db	low(0Fh)
 13397+ 003DE9  1F                 	db	low(01Fh)
 13398+ 003DEA  3F                 	db	low(03Fh)
 13399+ 003DEB  7E                 	db	low(07Eh)
 13400+ 003DEC  78                 	db	low(078h)
 13401+ 003DED  78                 	db	low(078h)
 13402+ 003DEE  78                 	db	low(078h)
 13403+ 003DEF  7E                 	db	low(07Eh)
 13404+ 003DF0  3F                 	db	low(03Fh)
 13405+ 003DF1  1F                 	db	low(01Fh)
 13406+ 003DF2  0F                 	db	low(0Fh)
 13407+ 003DF3  01                 	db	low(01h)
 13408+                          	global	_dig1
 13409+                          	line	19
 13410+ 003DF4                     _dig1:
 13411+ 003DF4  00                 	db	low(0)
 13412+ 003DF5  E0                 	db	low(0E0h)
 13413+ 003DF6  F0                 	db	low(0F0h)
 13414+ 003DF7  F0                 	db	low(0F0h)
 13415+ 003DF8  78                 	db	low(078h)
 13416+ 003DF9  3C                 	db	low(03Ch)
 13417+ 003DFA  FE                 	db	low(0FEh)
 13418+ 003DFB  FF                 	db	low(0FFh)
 13419+ 003DFC  FF                 	db	low(0FFh)
 13420+ 003DFD  FF                 	db	low(0FFh)
 13421+ 003DFE  00                 	db	low(0)
 13422+ 003DFF  00                 	db	low(0)
 13423+ 003E00  00                 	db	low(0)
 13424+ 003E01  00                 	db	low(0)
 13425+ 003E02  01                 	db	low(01h)
 13426+ 003E03  00                 	db	low(0)
 13427+ 003E04  00                 	db	low(0)
 13428+ 003E05  00                 	db	low(0)
 13429+ 003E06  00                 	db	low(0)
 13430+ 003E07  FF                 	db	low(0FFh)
 13431+ 003E08  FF                 	db	low(0FFh)
 13432+ 003E09  FF                 	db	low(0FFh)
 13433+ 003E0A  FF                 	db	low(0FFh)
 13434+ 003E0B  00                 	db	low(0)
 13435+ 003E0C  00                 	db	low(0)
 13436+ 003E0D  00                 	db	low(0)
 13437+ 003E0E  00                 	db	low(0)
 13438+ 003E0F  00                 	db	low(0)
 13439+ 003E10  00                 	db	low(0)
 13440+ 003E11  00                 	db	low(0)
 13441+ 003E12  00                 	db	low(0)
 13442+ 003E13  00                 	db	low(0)
 13443+ 003E14  7F                 	db	low(07Fh)
 13444+ 003E15  7F                 	db	low(07Fh)
 13445+ 003E16  7F                 	db	low(07Fh)
 13446+ 003E17  7F                 	db	low(07Fh)
 13447+ 003E18  00                 	db	low(0)
 13448+ 003E19  00                 	db	low(0)
 13449+ 003E1A  00                 	db	low(0)
 13450+                          	global	_dig2
 13451+                          	line	25
 13452+ 003E1B                     _dig2:
 13453+ 003E1B  70                 	db	low(070h)
 13454+ 003E1C  7C                 	db	low(07Ch)
 13455+ 003E1D  7E                 	db	low(07Eh)
 13456+ 003E1E  7E                 	db	low(07Eh)
 13457+ 003E1F  1F                 	db	low(01Fh)
 13458+ 003E20  0F                 	db	low(0Fh)
 13459+ 003E21  0F                 	db	low(0Fh)
 13460+ 003E22  0F                 	db	low(0Fh)
 13461+ 003E23  1F                 	db	low(01Fh)
 13462+ 003E24  FE                 	db	low(0FEh)
 13463+ 003E25  FE                 	db	low(0FEh)
 13464+ 003E26  FC                 	db	low(0FCh)
 13465+ 003E27  F0                 	db	low(0F0h)
 13466+ 003E28  00                 	db	low(0)
 13467+ 003E29  00                 	db	low(0)
 13468+ 003E2A  00                 	db	low(0)
 13469+ 003E2B  80                 	db	low(080h)
 13470+ 003E2C  C0                 	db	low(0C0h)
 13471+ 003E2D  E0                 	db	low(0E0h)
 13472+ 003E2E  F0                 	db	low(0F0h)
 13473+ 003E2F  F8                 	db	low(0F8h)
 13474+ 003E30  7E                 	db	low(07Eh)
 13475+ 003E31  3F                 	db	low(03Fh)
 13476+ 003E32  1F                 	db	low(01Fh)
 13477+ 003E33  0F                 	db	low(0Fh)
 13478+ 003E34  01                 	db	low(01h)
 13479+ 003E35  78                 	db	low(078h)
 13480+ 003E36  7C                 	db	low(07Ch)
 13481+ 003E37  7E                 	db	low(07Eh)
 13482+ 003E38  7F                 	db	low(07Fh)
 13483+ 003E39  7F                 	db	low(07Fh)
 13484+ 003E3A  77                 	db	low(077h)
 13485+ 003E3B  71                 	db	low(071h)
 13486+ 003E3C  70                 	db	low(070h)
 13487+ 003E3D  70                 	db	low(070h)
 13488+ 003E3E  70                 	db	low(070h)
 13489+ 003E3F  70                 	db	low(070h)
 13490+ 003E40  70                 	db	low(070h)
 13491+ 003E41  70                 	db	low(070h)
 13492+                          	global	_dig3
 13493+                          	line	31
 13494+ 003E42                     _dig3:
 13495+ 003E42  60                 	db	low(060h)
 13496+ 003E43  78                 	db	low(078h)
 13497+ 003E44  7E                 	db	low(07Eh)
 13498+ 003E45  7E                 	db	low(07Eh)
 13499+ 003E46  1F                 	db	low(01Fh)
 13500+ 003E47  0F                 	db	low(0Fh)
 13501+ 003E48  0F                 	db	low(0Fh)
 13502+ 003E49  0F                 	db	low(0Fh)
 13503+ 003E4A  1F                 	db	low(01Fh)
 13504+ 003E4B  FE                 	db	low(0FEh)
 13505+ 003E4C  FE                 	db	low(0FEh)
 13506+ 003E4D  FC                 	db	low(0FCh)
 13507+ 003E4E  F0                 	db	low(0F0h)
 13508+ 003E4F  00                 	db	low(0)
 13509+ 003E50  00                 	db	low(0)
 13510+ 003E51  00                 	db	low(0)
 13511+ 003E52  00                 	db	low(0)
 13512+ 003E53  00                 	db	low(0)
 13513+ 003E54  1E                 	db	low(01Eh)
 13514+ 003E55  1E                 	db	low(01Eh)
 13515+ 003E56  1E                 	db	low(01Eh)
 13516+ 003E57  3F                 	db	low(03Fh)
 13517+ 003E58  FF                 	db	low(0FFh)
 13518+ 003E59  FF                 	db	low(0FFh)
 13519+ 003E5A  F3                 	db	low(0F3h)
 13520+ 003E5B  E0                 	db	low(0E0h)
 13521+ 003E5C  03                 	db	low(03h)
 13522+ 003E5D  0F                 	db	low(0Fh)
 13523+ 003E5E  3F                 	db	low(03Fh)
 13524+ 003E5F  3F                 	db	low(03Fh)
 13525+ 003E60  7C                 	db	low(07Ch)
 13526+ 003E61  78                 	db	low(078h)
 13527+ 003E62  78                 	db	low(078h)
 13528+ 003E63  78                 	db	low(078h)
 13529+ 003E64  7C                 	db	low(07Ch)
 13530+ 003E65  3F                 	db	low(03Fh)
 13531+ 003E66  3F                 	db	low(03Fh)
 13532+ 003E67  1F                 	db	low(01Fh)
 13533+ 003E68  07                 	db	low(07h)
 13534+                          	global	_dig4
 13535+                          	line	37
 13536+ 003E69                     _dig4:
 13537+ 003E69  00                 	db	low(0)
 13538+ 003E6A  00                 	db	low(0)
 13539+ 003E6B  00                 	db	low(0)
 13540+ 003E6C  00                 	db	low(0)
 13541+ 003E6D  80                 	db	low(080h)
 13542+ 003E6E  E0                 	db	low(0E0h)
 13543+ 003E6F  F8                 	db	low(0F8h)
 13544+ 003E70  7C                 	db	low(07Ch)
 13545+ 003E71  FF                 	db	low(0FFh)
 13546+ 003E72  FF                 	db	low(0FFh)
 13547+ 003E73  FF                 	db	low(0FFh)
 13548+ 003E74  FF                 	db	low(0FFh)
 13549+ 003E75  00                 	db	low(0)
 13550+ 003E76  E0                 	db	low(0E0h)
 13551+ 003E77  F0                 	db	low(0F0h)
 13552+ 003E78  FC                 	db	low(0FCh)
 13553+ 003E79  FF                 	db	low(0FFh)
 13554+ 003E7A  CF                 	db	low(0CFh)
 13555+ 003E7B  C7                 	db	low(0C7h)
 13556+ 003E7C  C1                 	db	low(0C1h)
 13557+ 003E7D  C0                 	db	low(0C0h)
 13558+ 003E7E  FF                 	db	low(0FFh)
 13559+ 003E7F  FF                 	db	low(0FFh)
 13560+ 003E80  FF                 	db	low(0FFh)
 13561+ 003E81  FF                 	db	low(0FFh)
 13562+ 003E82  C0                 	db	low(0C0h)
 13563+ 003E83  03                 	db	low(03h)
 13564+ 003E84  03                 	db	low(03h)
 13565+ 003E85  03                 	db	low(03h)
 13566+ 003E86  03                 	db	low(03h)
 13567+ 003E87  03                 	db	low(03h)
 13568+ 003E88  03                 	db	low(03h)
 13569+ 003E89  03                 	db	low(03h)
 13570+ 003E8A  03                 	db	low(03h)
 13571+ 003E8B  7F                 	db	low(07Fh)
 13572+ 003E8C  7F                 	db	low(07Fh)
 13573+ 003E8D  7F                 	db	low(07Fh)
 13574+ 003E8E  7F                 	db	low(07Fh)
 13575+ 003E8F  03                 	db	low(03h)
 13576+                          	global	_dig5
 13577+                          	line	43
 13578+ 003E90                     _dig5:
 13579+ 003E90  00                 	db	low(0)
 13580+ 003E91  F8                 	db	low(0F8h)
 13581+ 003E92  FF                 	db	low(0FFh)
 13582+ 003E93  FF                 	db	low(0FFh)
 13583+ 003E94  FF                 	db	low(0FFh)
 13584+ 003E95  0F                 	db	low(0Fh)
 13585+ 003E96  8F                 	db	low(08Fh)
 13586+ 003E97  8F                 	db	low(08Fh)
 13587+ 003E98  8F                 	db	low(08Fh)
 13588+ 003E99  0F                 	db	low(0Fh)
 13589+ 003E9A  0F                 	db	low(0Fh)
 13590+ 003E9B  0F                 	db	low(0Fh)
 13591+ 003E9C  00                 	db	low(0)
 13592+ 003E9D  1C                 	db	low(01Ch)
 13593+ 003E9E  1F                 	db	low(01Fh)
 13594+ 003E9F  1F                 	db	low(01Fh)
 13595+ 003EA0  0F                 	db	low(0Fh)
 13596+ 003EA1  07                 	db	low(07h)
 13597+ 003EA2  07                 	db	low(07h)
 13598+ 003EA3  07                 	db	low(07h)
 13599+ 003EA4  07                 	db	low(07h)
 13600+ 003EA5  0F                 	db	low(0Fh)
 13601+ 003EA6  FF                 	db	low(0FFh)
 13602+ 003EA7  FF                 	db	low(0FFh)
 13603+ 003EA8  FE                 	db	low(0FEh)
 13604+ 003EA9  F8                 	db	low(0F8h)
 13605+ 003EAA  03                 	db	low(03h)
 13606+ 003EAB  0F                 	db	low(0Fh)
 13607+ 003EAC  3F                 	db	low(03Fh)
 13608+ 003EAD  3F                 	db	low(03Fh)
 13609+ 003EAE  7C                 	db	low(07Ch)
 13610+ 003EAF  78                 	db	low(078h)
 13611+ 003EB0  78                 	db	low(078h)
 13612+ 003EB1  78                 	db	low(078h)
 13613+ 003EB2  7C                 	db	low(07Ch)
 13614+ 003EB3  3F                 	db	low(03Fh)
 13615+ 003EB4  1F                 	db	low(01Fh)
 13616+ 003EB5  0F                 	db	low(0Fh)
 13617+ 003EB6  03                 	db	low(03h)
 13618+                          	global	_dig6
 13619+                          	line	49
 13620+ 003EB7                     _dig6:
 13621+ 003EB7  C0                 	db	low(0C0h)
 13622+ 003EB8  F0                 	db	low(0F0h)
 13623+ 003EB9  FC                 	db	low(0FCh)
 13624+ 003EBA  FE                 	db	low(0FEh)
 13625+ 003EBB  3E                 	db	low(03Eh)
 13626+ 003EBC  0F                 	db	low(0Fh)
 13627+ 003EBD  0F                 	db	low(0Fh)
 13628+ 003EBE  0F                 	db	low(0Fh)
 13629+ 003EBF  1F                 	db	low(01Fh)
 13630+ 003EC0  3F                 	db	low(03Fh)
 13631+ 003EC1  3E                 	db	low(03Eh)
 13632+ 003EC2  3C                 	db	low(03Ch)
 13633+ 003EC3  30                 	db	low(030h)
 13634+ 003EC4  FF                 	db	low(0FFh)
 13635+ 003EC5  FF                 	db	low(0FFh)
 13636+ 003EC6  FF                 	db	low(0FFh)
 13637+ 003EC7  FF                 	db	low(0FFh)
 13638+ 003EC8  1E                 	db	low(01Eh)
 13639+ 003EC9  0F                 	db	low(0Fh)
 13640+ 003ECA  0F                 	db	low(0Fh)
 13641+ 003ECB  0F                 	db	low(0Fh)
 13642+ 003ECC  1F                 	db	low(01Fh)
 13643+ 003ECD  FE                 	db	low(0FEh)
 13644+ 003ECE  FE                 	db	low(0FEh)
 13645+ 003ECF  FC                 	db	low(0FCh)
 13646+ 003ED0  F0                 	db	low(0F0h)
 13647+ 003ED1  01                 	db	low(01h)
 13648+ 003ED2  0F                 	db	low(0Fh)
 13649+ 003ED3  1F                 	db	low(01Fh)
 13650+ 003ED4  3F                 	db	low(03Fh)
 13651+ 003ED5  7C                 	db	low(07Ch)
 13652+ 003ED6  78                 	db	low(078h)
 13653+ 003ED7  78                 	db	low(078h)
 13654+ 003ED8  78                 	db	low(078h)
 13655+ 003ED9  7C                 	db	low(07Ch)
 13656+ 003EDA  3F                 	db	low(03Fh)
 13657+ 003EDB  3F                 	db	low(03Fh)
 13658+ 003EDC  1F                 	db	low(01Fh)
 13659+ 003EDD  07                 	db	low(07h)
 13660+                          	global	_dig7
 13661+                          	line	56
 13662+ 003EDE                     _dig7:
 13663+ 003EDE  0F                 	db	low(0Fh)
 13664+ 003EDF  0F                 	db	low(0Fh)
 13665+ 003EE0  0F                 	db	low(0Fh)
 13666+ 003EE1  0F                 	db	low(0Fh)
 13667+ 003EE2  0F                 	db	low(0Fh)
 13668+ 003EE3  0F                 	db	low(0Fh)
 13669+ 003EE4  8F                 	db	low(08Fh)
 13670+ 003EE5  EF                 	db	low(0EFh)
 13671+ 003EE6  FF                 	db	low(0FFh)
 13672+ 003EE7  FF                 	db	low(0FFh)
 13673+ 003EE8  7F                 	db	low(07Fh)
 13674+ 003EE9  1F                 	db	low(01Fh)
 13675+ 003EEA  0F                 	db	low(0Fh)
 13676+ 003EEB  00                 	db	low(0)
 13677+ 003EEC  00                 	db	low(0)
 13678+ 003EED  00                 	db	low(0)
 13679+ 003EEE  C0                 	db	low(0C0h)
 13680+ 003EEF  F8                 	db	low(0F8h)
 13681+ 003EF0  FE                 	db	low(0FEh)
 13682+ 003EF1  FF                 	db	low(0FFh)
 13683+ 003EF2  3F                 	db	low(03Fh)
 13684+ 003EF3  07                 	db	low(07h)
 13685+ 003EF4  01                 	db	low(01h)
 13686+ 003EF5  00                 	db	low(0)
 13687+ 003EF6  00                 	db	low(0)
 13688+ 003EF7  00                 	db	low(0)
 13689+ 003EF8  00                 	db	low(0)
 13690+ 003EF9  00                 	db	low(0)
 13691+ 003EFA  7C                 	db	low(07Ch)
 13692+ 003EFB  7F                 	db	low(07Fh)
 13693+ 003EFC  7F                 	db	low(07Fh)
 13694+ 003EFD  7F                 	db	low(07Fh)
 13695+ 003EFE  03                 	db	low(03h)
 13696+ 003EFF  00                 	db	low(0)
 13697+ 003F00  00                 	db	low(0)
 13698+ 003F01  00                 	db	low(0)
 13699+ 003F02  00                 	db	low(0)
 13700+ 003F03  00                 	db	low(0)
 13701+ 003F04  00                 	db	low(0)
 13702+                          	global	_dig8
 13703+                          	line	62
 13704+ 003F05                     _dig8:
 13705+ 003F05  F8                 	db	low(0F8h)
 13706+ 003F06  FC                 	db	low(0FCh)
 13707+ 003F07  FE                 	db	low(0FEh)
 13708+ 003F08  FE                 	db	low(0FEh)
 13709+ 003F09  1F                 	db	low(01Fh)
 13710+ 003F0A  0F                 	db	low(0Fh)
 13711+ 003F0B  0F                 	db	low(0Fh)
 13712+ 003F0C  0F                 	db	low(0Fh)
 13713+ 003F0D  1F                 	db	low(01Fh)
 13714+ 003F0E  FE                 	db	low(0FEh)
 13715+ 003F0F  FE                 	db	low(0FEh)
 13716+ 003F10  FC                 	db	low(0FCh)
 13717+ 003F11  F8                 	db	low(0F8h)
 13718+ 003F12  C0                 	db	low(0C0h)
 13719+ 003F13  F3                 	db	low(0F3h)
 13720+ 003F14  FB                 	db	low(0FBh)
 13721+ 003F15  FF                 	db	low(0FFh)
 13722+ 003F16  3F                 	db	low(03Fh)
 13723+ 003F17  1E                 	db	low(01Eh)
 13724+ 003F18  1E                 	db	low(01Eh)
 13725+ 003F19  1E                 	db	low(01Eh)
 13726+ 003F1A  3F                 	db	low(03Fh)
 13727+ 003F1B  FF                 	db	low(0FFh)
 13728+ 003F1C  FF                 	db	low(0FFh)
 13729+ 003F1D  F3                 	db	low(0F3h)
 13730+ 003F1E  C0                 	db	low(0C0h)
 13731+ 003F1F  07                 	db	low(07h)
 13732+ 003F20  1F                 	db	low(01Fh)
 13733+ 003F21  3F                 	db	low(03Fh)
 13734+ 003F22  3F                 	db	low(03Fh)
 13735+ 003F23  7C                 	db	low(07Ch)
 13736+ 003F24  78                 	db	low(078h)
 13737+ 003F25  78                 	db	low(078h)
 13738+ 003F26  78                 	db	low(078h)
 13739+ 003F27  7C                 	db	low(07Ch)
 13740+ 003F28  3F                 	db	low(03Fh)
 13741+ 003F29  3F                 	db	low(03Fh)
 13742+ 003F2A  1F                 	db	low(01Fh)
 13743+ 003F2B  07                 	db	low(07h)
 13744+                          	global	_dig9
 13745+                          	line	68
 13746+ 003F2C                     _dig9:
 13747+ 003F2C  F0                 	db	low(0F0h)
 13748+ 003F2D  FC                 	db	low(0FCh)
 13749+ 003F2E  FE                 	db	low(0FEh)
 13750+ 003F2F  FE                 	db	low(0FEh)
 13751+ 003F30  1F                 	db	low(01Fh)
 13752+ 003F31  0F                 	db	low(0Fh)
 13753+ 003F32  0F                 	db	low(0Fh)
 13754+ 003F33  0F                 	db	low(0Fh)
 13755+ 003F34  1F                 	db	low(01Fh)
 13756+ 003F35  FE                 	db	low(0FEh)
 13757+ 003F36  FC                 	db	low(0FCh)
 13758+ 003F37  F8                 	db	low(0F8h)
 13759+ 003F38  C0                 	db	low(0C0h)
 13760+ 003F39  07                 	db	low(07h)
 13761+ 003F3A  1F                 	db	low(01Fh)
 13762+ 003F3B  3F                 	db	low(03Fh)
 13763+ 003F3C  3F                 	db	low(03Fh)
 13764+ 003F3D  7C                 	db	low(07Ch)
 13765+ 003F3E  78                 	db	low(078h)
 13766+ 003F3F  78                 	db	low(078h)
 13767+ 003F40  78                 	db	low(078h)
 13768+ 003F41  3C                 	db	low(03Ch)
 13769+ 003F42  FF                 	db	low(0FFh)
 13770+ 003F43  FF                 	db	low(0FFh)
 13771+ 003F44  FF                 	db	low(0FFh)
 13772+ 003F45  FF                 	db	low(0FFh)
 13773+ 003F46  06                 	db	low(06h)
 13774+ 003F47  1E                 	db	low(01Eh)
 13775+ 003F48  3E                 	db	low(03Eh)
 13776+ 003F49  7E                 	db	low(07Eh)
 13777+ 003F4A  7C                 	db	low(07Ch)
 13778+ 003F4B  78                 	db	low(078h)
 13779+ 003F4C  78                 	db	low(078h)
 13780+ 003F4D  78                 	db	low(078h)
 13781+ 003F4E  3E                 	db	low(03Eh)
 13782+ 003F4F  3F                 	db	low(03Fh)
 13783+ 003F50  1F                 	db	low(01Fh)
 13784+ 003F51  07                 	db	low(07h)
 13785+ 003F52  01                 	db	low(01h)
 13786+                          	global	_digBlank
 13787+                          	line	75
 13788+ 003F53                     _digBlank:
 13789+ 003F53  00                 	db	low(0)
 13790+ 003F54  00                 	db	low(0)
 13791+ 003F55  00                 	db	low(0)
 13792+ 003F56  00                 	db	low(0)
 13793+ 003F57  00                 	db	low(0)
 13794+ 003F58  00                 	db	low(0)
 13795+ 003F59  00                 	db	low(0)
 13796+ 003F5A  00                 	db	low(0)
 13797+ 003F5B  00                 	db	low(0)
 13798+ 003F5C  00                 	db	low(0)
 13799+ 003F5D  00                 	db	low(0)
 13800+ 003F5E  00                 	db	low(0)
 13801+ 003F5F  00                 	db	low(0)
 13802+ 003F60  00                 	db	low(0)
 13803+ 003F61  00                 	db	low(0)
 13804+ 003F62  00                 	db	low(0)
 13805+ 003F63  00                 	db	low(0)
 13806+ 003F64  00                 	db	low(0)
 13807+ 003F65  00                 	db	low(0)
 13808+ 003F66  00                 	db	low(0)
 13809+ 003F67  00                 	db	low(0)
 13810+ 003F68  00                 	db	low(0)
 13811+ 003F69  00                 	db	low(0)
 13812+ 003F6A  00                 	db	low(0)
 13813+ 003F6B  00                 	db	low(0)
 13814+ 003F6C  00                 	db	low(0)
 13815+ 003F6D  00                 	db	low(0)
 13816+ 003F6E  00                 	db	low(0)
 13817+ 003F6F  00                 	db	low(0)
 13818+ 003F70  00                 	db	low(0)
 13819+ 003F71  00                 	db	low(0)
 13820+ 003F72  00                 	db	low(0)
 13821+ 003F73  00                 	db	low(0)
 13822+ 003F74  00                 	db	low(0)
 13823+ 003F75  00                 	db	low(0)
 13824+ 003F76  00                 	db	low(0)
 13825+ 003F77  00                 	db	low(0)
 13826+ 003F78  00                 	db	low(0)
 13827+ 003F79  00                 	db	low(0)
 13828+                          	global	_cszDT
 13829+                          	file	"main.c"
 13830+                          	line	75
 13831+ 003F7A                     _cszDT:
 13832+ 003F7A  41                 	db	low(041h)
 13833+ 003F7B  44                 	db	low(044h)
 13834+ 003F7C  54                 	db	low(054h)
 13835+ 003F7D  00                 	db	low(0)
 13836+ 003F7E  45                 	db	low(045h)
 13837+ 003F7F  44                 	db	low(044h)
 13838+ 003F80  54                 	db	low(054h)
 13839+ 003F81  00                 	db	low(0)
 13840+ 003F82  43                 	db	low(043h)
 13841+ 003F83  44                 	db	low(044h)
 13842+ 003F84  54                 	db	low(054h)
 13843+ 003F85  00                 	db	low(0)
 13844+ 003F86  4D                 	db	low(04Dh)
 13845+ 003F87  44                 	db	low(044h)
 13846+ 003F88  54                 	db	low(054h)
 13847+ 003F89  00                 	db	low(0)
 13848+ 003F8A  50                 	db	low(050h)
 13849+ 003F8B  44                 	db	low(044h)
 13850+ 003F8C  54                 	db	low(054h)
 13851+ 003F8D  00                 	db	low(0)
 13852+ 003F8E  4B                 	db	low(04Bh)
 13853+ 003F8F  44                 	db	low(044h)
 13854+ 003F90  54                 	db	low(054h)
 13855+ 003F91  00                 	db	low(0)
 13856+ 003F92  48                 	db	low(048h)
 13857+ 003F93  44                 	db	low(044h)
 13858+ 003F94  54                 	db	low(054h)
 13859+ 003F95  00                 	db	low(0)
 13860+                          	global	_cszST
 13861+                          	line	74
 13862+ 003F96                     _cszST:
 13863+ 003F96  41                 	db	low(041h)
 13864+ 003F97  53                 	db	low(053h)
 13865+ 003F98  54                 	db	low(054h)
 13866+ 003F99  00                 	db	low(0)
 13867+ 003F9A  45                 	db	low(045h)
 13868+ 003F9B  53                 	db	low(053h)
 13869+ 003F9C  54                 	db	low(054h)
 13870+ 003F9D  00                 	db	low(0)
 13871+ 003F9E  43                 	db	low(043h)
 13872+ 003F9F  53                 	db	low(053h)
 13873+ 003FA0  54                 	db	low(054h)
 13874+ 003FA1  00                 	db	low(0)
 13875+ 003FA2  4D                 	db	low(04Dh)
 13876+ 003FA3  53                 	db	low(053h)
 13877+ 003FA4  54                 	db	low(054h)
 13878+ 003FA5  00                 	db	low(0)
 13879+ 003FA6  50                 	db	low(050h)
 13880+ 003FA7  53                 	db	low(053h)
 13881+ 003FA8  54                 	db	low(054h)
 13882+ 003FA9  00                 	db	low(0)
 13883+ 003FAA  4B                 	db	low(04Bh)
 13884+ 003FAB  53                 	db	low(053h)
 13885+ 003FAC  54                 	db	low(054h)
 13886+ 003FAD  00                 	db	low(0)
 13887+ 003FAE  48                 	db	low(048h)
 13888+ 003FAF  53                 	db	low(053h)
 13889+ 003FB0  54                 	db	low(054h)
 13890+ 003FB1  00                 	db	low(0)
 13891+                          	global	_cszLastSync
 13892+                          	file	"wwv.c"
 13893+                          	line	59
 13894+ 003FB2                     _cszLastSync:
 13895+ 003FB2  4C                 	db	low(04Ch)
 13896+ 003FB3  61                 	db	low(061h)
 13897+ 003FB4  73                 	db	low(073h)
 13898+ 003FB5  74                 	db	low(074h)
 13899+ 003FB6  20                 	db	low(020h)
 13900+ 003FB7  53                 	db	low(053h)
 13901+ 003FB8  79                 	db	low(079h)
 13902+ 003FB9  6E                 	db	low(06Eh)
 13903+ 003FBA  63                 	db	low(063h)
 13904+ 003FBB  20                 	db	low(020h)
 13905+ 003FBC  54                 	db	low(054h)
 13906+ 003FBD  69                 	db	low(069h)
 13907+ 003FBE  6D                 	db	low(06Dh)
 13908+ 003FBF  65                 	db	low(065h)
 13909+ 003FC0  73                 	db	low(073h)
 13910+ 003FC1  3A                 	db	low(03Ah)
 13911+ 003FC2  20                 	db	low(020h)
 13912+ 003FC3  00                 	db	low(0)
 13913+                          	global	_cszTZChange
 13914+                          	file	"main.c"
 13915+                          	line	69
 13916+ 003FC4                     _cszTZChange:
 13917+ 003FC4  53                 	db	low(053h)
 13918+ 003FC5  65                 	db	low(065h)
 13919+ 003FC6  6C                 	db	low(06Ch)
 13920+ 003FC7  65                 	db	low(065h)
 13921+ 003FC8  63                 	db	low(063h)
 13922+ 003FC9  74                 	db	low(074h)
 13923+ 003FCA  20                 	db	low(020h)
 13924+ 003FCB  54                 	db	low(054h)
 13925+ 003FCC  69                 	db	low(069h)
 13926+ 003FCD  6D                 	db	low(06Dh)
 13927+ 003FCE  65                 	db	low(065h)
 13928+ 003FCF  20                 	db	low(020h)
 13929+ 003FD0  5A                 	db	low(05Ah)
 13930+ 003FD1  6F                 	db	low(06Fh)
 13931+ 003FD2  6E                 	db	low(06Eh)
 13932+ 003FD3  65                 	db	low(065h)
 13933+ 003FD4  3A                 	db	low(03Ah)
 13934+ 003FD5  00                 	db	low(0)
 13935+                          	global	_digColon
 13936+                          	file	"bitmaps.h"
 13937+                          	line	83
 13938+ 003FD6                     _digColon:
 13939+ 003FD6  00                 	db	low(0)
 13940+ 003FD7  78                 	db	low(078h)
 13941+ 003FD8  78                 	db	low(078h)
 13942+ 003FD9  78                 	db	low(078h)
 13943+ 003FDA  78                 	db	low(078h)
 13944+ 003FDB  00                 	db	low(0)
 13945+ 003FDC  00                 	db	low(0)
 13946+ 003FDD  00                 	db	low(0)
 13947+ 003FDE  00                 	db	low(0)
 13948+ 003FDF  00                 	db	low(0)
 13949+ 003FE0  00                 	db	low(0)
 13950+ 003FE1  00                 	db	low(0)
 13951+ 003FE2  00                 	db	low(0)
 13952+ 003FE3  0F                 	db	low(0Fh)
 13953+ 003FE4  0F                 	db	low(0Fh)
 13954+ 003FE5  0F                 	db	low(0Fh)
 13955+ 003FE6  0F                 	db	low(0Fh)
 13956+ 003FE7  00                 	db	low(0)
 13957+                          	global	_cszSync
 13958+                          	file	"wwv.c"
 13959+                          	line	58
 13960+ 003FE8                     _cszSync:
 13961+ 003FE8  53                 	db	low(053h)
 13962+ 003FE9  79                 	db	low(079h)
 13963+ 003FEA  6E                 	db	low(06Eh)
 13964+ 003FEB  63                 	db	low(063h)
 13965+ 003FEC  69                 	db	low(069h)
 13966+ 003FED  6E                 	db	low(06Eh)
 13967+ 003FEE  67                 	db	low(067h)
 13968+ 003FEF  20                 	db	low(020h)
 13969+ 003FF0  55                 	db	low(055h)
 13970+ 003FF1  70                 	db	low(070h)
 13971+ 003FF2  2E                 	db	low(02Eh)
 13972+ 003FF3  2E                 	db	low(02Eh)
 13973+ 003FF4  2E                 	db	low(02Eh)
 13974+ 003FF5  00                 	db	low(0)
 13975+                          	global	_cszBlank
 13976+                          	file	"main.c"
 13977+                          	line	73
 13978+ 003FF6                     _cszBlank:
 13979+ 003FF6  20                 	db	low(020h)
 13980+ 003FF7  20                 	db	low(020h)
 13981+ 003FF8  20                 	db	low(020h)
 13982+ 003FF9  00                 	db	low(0)
 13983+                          	global	_cszSet
 13984+                          	line	72
 13985+ 003FFA                     _cszSet:
 13986+ 003FFA  2D                 	db	low(02Dh)
 13987+ 003FFB  3E                 	db	low(03Eh)
 13988+ 003FFC  20                 	db	low(020h)
 13989+ 003FFD  00                 	db	low(0)
 13990+                          	global	_yFont6x8
 13991+                          	global	_cszMonth
 13992+                          	global	_cszDay
 13993+                          	global	_cszTimeZone
 13994+                          	global	_wEOM
 13995+                          	global	_digAM
 13996+                          	global	_digPM
 13997+                          	global	_dig0
 13998+                          	global	_dig1
 13999+                          	global	_dig2
 14000+                          	global	_dig3
 14001+                          	global	_dig4
 14002+                          	global	_dig5
 14003+                          	global	_dig6
 14004+                          	global	_dig7
 14005+                          	global	_dig8
 14006+                          	global	_dig9
 14007+                          	global	_digBlank
 14008+                          	global	_cszDT
 14009+                          	global	_cszST
 14010+                          	global	_cszLastSync
 14011+                          	global	_cszTZChange
 14012+                          	global	_digColon
 14013+                          	global	_cszSync
 14014+                          	global	_cszBlank
 14015+                          	global	_cszSet
 14016+                          	global	_g_ts
 14017+                          	global	_g_ts
 14018+ 000000                     _g_ts  equ     0
 14019+                          
 14020+                          	DABS	1,0,7	;_g_ts
 14021+                          	global	_g_wFrameCounter
 14022+                          	global	_g_wFrameCounter
 14023+ 000000                     _g_wFrameCounter  equ     11
 14024+                          
 14025+                          	DABS	1,11,2	;_g_wFrameCounter
 14026+                          	global	_g_yTimedOut
 14027+                          	global	_g_yTimedOut
 14028+ 000000                     _g_yTimedOut  equ     9
 14029+                          
 14030+                          	DABS	1,9,1	;_g_yTimedOut
 14031+                          	global	_g_yUpdate
 14032+                          	global	_g_yUpdate
 14033+ 000000                     _g_yUpdate  equ     13
 14034+                          
 14035+                          	DABS	1,13,1	;_g_yUpdate
 14036+                          	global	_s_yLastCol
 14037+                          	global	_s_yLastCol
 14038+ 000000                     _s_yLastCol  equ     10
 14039+                          
 14040+                          	DABS	1,10,1	;_s_yLastCol
 14041+                          	global	_s_yLastPage
 14042+                          	global	_s_yLastPage
 14043+ 000000                     _s_yLastPage  equ     8
 14044+                          
 14045+                          	DABS	1,8,1	;_s_yLastPage
 14046+                          	global	_s_yLastSeg
 14047+                          	global	_s_yLastSeg
 14048+ 000000                     _s_yLastSeg  equ     7
 14049+                          
 14050+                          	DABS	1,7,1	;_s_yLastSeg
 14051+                          	global	_TMR0
 14052+ 000000                     _TMR0	equ	0xFD6
 14053+                          	global	_ADCON0
 14054+ 000000                     _ADCON0	equ	0xFC2
 14055+                          	global	_ADCON1
 14056+ 000000                     _ADCON1	equ	0xFC1
 14057+                          	global	_CCP1CON
 14058+ 000000                     _CCP1CON	equ	0xFBD
 14059+                          	global	_CCP2CON
 14060+ 000000                     _CCP2CON	equ	0xFBA
 14061+                          	global	_CMCON
 14062+ 000000                     _CMCON	equ	0xFB4
 14063+                          	global	_CVRCON
 14064+ 000000                     _CVRCON	equ	0xFB5
 14065+                          	global	_INTCONbits
 14066+ 000000                     _INTCONbits	equ	0xFF2
 14067+                          	global	_LATC
 14068+ 000000                     _LATC	equ	0xF8B
 14069+                          	global	_OSCCONbits
 14070+ 000000                     _OSCCONbits	equ	0xFD3
 14071+                          	global	_PIE1bits
 14072+ 000000                     _PIE1bits	equ	0xF9D
 14073+                          	global	_PIR1bits
 14074+ 000000                     _PIR1bits	equ	0xF9E
 14075+                          	global	_PORTA
 14076+ 000000                     _PORTA	equ	0xF80
 14077+                          	global	_PORTB
 14078+ 000000                     _PORTB	equ	0xF81
 14079+                          	global	_PORTC
 14080+ 000000                     _PORTC	equ	0xF82
 14081+                          	global	_RCONbits
 14082+ 000000                     _RCONbits	equ	0xFD0
 14083+                          	global	_T0CONbits
 14084+ 000000                     _T0CONbits	equ	0xFD5
 14085+                          	global	_T1CONbits
 14086+ 000000                     _T1CONbits	equ	0xFCD
 14087+                          	global	_TMR1H
 14088+ 000000                     _TMR1H	equ	0xFCF
 14089+                          	global	_TMR1L
 14090+ 000000                     _TMR1L	equ	0xFCE
 14091+                          	global	_TRISA
 14092+ 000000                     _TRISA	equ	0xF92
 14093+                          	global	_TRISB
 14094+ 000000                     _TRISB	equ	0xF93
 14095+                          	global	_TRISC
 14096+ 000000                     _TRISC	equ	0xF94
 14097+                          	global	_LATA0
 14098+ 000000                     _LATA0	equ	0x7C48
 14099+                          	global	_LATA1
 14100+ 000000                     _LATA1	equ	0x7C49
 14101+                          	global	_LATA3
 14102+ 000000                     _LATA3	equ	0x7C4B
 14103+                          	global	_LATA4
 14104+ 000000                     _LATA4	equ	0x7C4C
 14105+                          	global	_LATA5
 14106+ 000000                     _LATA5	equ	0x7C4D
 14107+                          	global	_LATB0
 14108+ 000000                     _LATB0	equ	0x7C50
 14109+                          	global	_LATB1
 14110+ 000000                     _LATB1	equ	0x7C51
 14111+                          	global	_LATB3
 14112+ 000000                     _LATB3	equ	0x7C53
 14113+                          	global	_LATB4
 14114+ 000000                     _LATB4	equ	0x7C54
 14115+                          	global	_LATB5
 14116+ 000000                     _LATB5	equ	0x7C55
 14117+                          	global	_RA2
 14118+ 000000                     _RA2	equ	0x7C02
 14119+                          	global	_RA4
 14120+ 000000                     _RA4	equ	0x7C04
 14121+                          	global	_RB2
 14122+ 000000                     _RB2	equ	0x7C0A
 14123+                          	global	_RBPU
 14124+ 000000                     _RBPU	equ	0x7F8F
 14125+                          	global	_TRISA4
 14126+ 000000                     _TRISA4	equ	0x7C94
 14127+ 003FFE  00                 	db 0	; dummy byte at the end
 14128+                          	psect	intsave_regs,class=BIGRAM,space=1
 14129+                          	PSECT	param1,class=BANK1,space=1
 14130+                          	GLOBAL	__Lparam1
 14131+                          	FNCONF	param1,??,?
 14132+                          	GLOBAL	__Labsbss0
 14133+ 000000                     __Labsbss0	EQU	0
 14134+                          	GLOBAL	__Habsbss0
 14135+ 000000                     __Habsbss0	EQU	14
 14136+                          GLOBAL	__Lparam, __Hparam
 14137+                          GLOBAL	__Lparam1, __Hparam1
 14138+ 000000                     __Lparam	EQU	__Lparam1
 14139+ 000000                     __Hparam	EQU	__Hparam1


HI-TECH Software PICC-18 Macro Assembler V9.66 build 8870 
Symbol Table                                           Sun Mar 11 09:53:26 2012

                 _rtcSaveLastSync 2180  
                    ___awdiv@sign 0158  
             ___wmul@multiplicand 0155  
                             l400 2A70  
                             l401 3316  
                             l410 289E  
                             l402 32E2  
                             l411 2954  
                             l403 32AC  
                             l180 3736  
                             l412 28D2  
                             l404 3316  
                             l420 115A  
                             l181 3736  
                             l413 296E  
                             l405 298E  
                             l421 118C  
                             l182 3724  
                             l190 359E  
                             l414 294E  
                             l406 2884  
                             l430 134E  
                             l422 11BE  
                             l183 3718  
                             l407 298E  
                             l415 294A  
                             l431 1380  
                             l423 11F0  
                             l184 371E  
                             l192 359E  
                             l432 13B2  
                             l424 1222  
                             l185 3712  
                             l193 3562  
                             l409 2974  
                             l417 1486  
                             l433 13E4  
                             l425 1254  
                             l186 3712  
                             l434 1416  
                             l426 1286  
                             l418 1472  
                             l187 3700  
                             l195 3560  
                             l179 3608  
                             l427 12B8  
                             l419 141A  
                             l188 36F4  
                             l380 2BCC  
                             l428 12EA  
                             l620 1D1A  
                             l189 36FA  
                             l429 131C  
                             l621 1DC8  
                             l390 351C  
                             l382 2B0A  
                             l630 0AF4  
                             l374 30D2  
                             l622 1D6A  
                             l391 34FC  
                             l383 2BB2  
                             l631 0B08  
                             l375 3068  
                             l623 1DDC  
                             l615 1DDC  
                             l392 3504  
                             l624 0DD4  
                             l632 0DD4  
                             l376 30D2  
                             l616 1C50  
                             l393 2AB8  
                             l641 3110  
                             l385 2B56  
                             l633 0DA6  
                             l625 0898  
                             l394 29C6  
                             l642 30FE  
                             l378 2BCC  
                             l386 2B98  
                             l650 14EC  
                             l634 0DD4  
                             l626 0916  
                             l618 1DC8  
                             l395 2AB8  
                             l643 30FA  
                             l379 2AE2  
                             l635 1BC2  
                             l651 1584  
                             l627 09AA  
                             l619 1D1A  
                             l388 3668  
                             l644 3108  
                             l636 1A6E  
                             l660 162E  
                             l652 15EC  
                             l628 0A56  
                             l645 3788  
                             l389 36C8  
                             l397 2A94  
                             l637 3150  
                             l629 0C76  
                             l398 2A6C  
                             l638 30E6  
                             l670 2D88  
                             l662 163C  
                             l654 15F0  
                             l646 171C  
                             l399 2A68  
                             l639 3150  
                             l671 2E1A  
                             l663 1676  
                             l647 14C2  
                             l664 16E4  
                             l656 15FE  
                             l648 1506  
                             l673 2DEE  
                             l657 16FC  
                             l674 2E00  
                             l666 16CA  
                             l658 1618  
                             l659 1700  
                             l667 16BE  
                             l860 36EE  
                             l861 376A  
                             l669 2E1A  
                             l862 2732  
                             l870 2EC8  
                             l871 2EAE  
                             l863 2D5E  
                             l864 3698  
                             l872 2EC8  
                             l865 342E  
                             l873 2318  
                             l874 2258  
                             l866 2ED4  
                             l858 1FC2  
                             l875 2318  
                             l867 2E5C  
                             l859 1FC2  
                             l876 2C96  
                             l868 2EC8  
                             l869 2E84  
                             _RA2 007C02  
                             _RB2 007C0A  
                             _RA4 007C04  
                    ___awmod@sign 0157  
                             prod 000FF3  
                             wreg 000FE8  
             wwvGetWeekDay@nMonth 0143  
                   spiWrite@yByte 0137  
                 ??_glcdWriteChar 0137  
                            l1300 0F66  
                            l1061 328A  
                            l1301 0F70  
                            l1070 3784  
                            l1062 327A  
                            l1310 244E  
                            l1302 0F7A  
                            l1063 3376  
                            l1071 377C  
                            l1311 23D4  
                            l1303 0F8C  
                            l1064 332E  
                            l1312 240E  
                            l1320 34A0  
                            l1056 3774  
                            l1065 3376  
                            l1057 32A6  
                            l1313 2448  
                            l1321 3488  
                            l1305 1000  
                            l1058 325E  
                            l1314 245E  
                            l1306 2492  
                            l1330 2F12  
                            l1322 34AE  
                            l1067 3364  
                            l1059 329C  
                            l1307 248E  
                            l1331 2EFA  
                            l1251 3638  
                            l1068 3350  
                            l1420 25EC  
                            l1316 246C  
                            l1308 238A  
                            l1332 2F20  
                            l1324 34CA  
                            l1260 029A  
                            l1252 0866  
                            l1069 3352  
                            l1421 24D4  
                            l1341 217E  
                            l1325 2F88  
                            l1253 0276  
                            l1430 25A8  
                            l1422 24FC  
                            l1342 2016  
                            l1350 3236  
                            l1334 2F48  
                            l1326 2EF6  
                            l1318 3750  
                            l1270 0418  
                            l1254 025E  
                            l1431 25E0  
                            l1423 25BE  
                            l1351 31DA  
                            l1327 2F82  
                            l1335 2F6A  
                            l1319 34D0  
                            l1343 1990  
                            l1271 0458  
                            l1263 030A  
                            l1255 0284  
                            l1424 2546  
                            l1432 2864  
                            l1440 2836  
                            l1352 31D2  
                            l1360 347E  
                            l1336 35D4  
                            l1344 1782  
                            l1280 054E  
                            l1272 0472  
                            l1264 0324  
                            l1425 2534  
                            l1441 27E2  
                            l1433 2774  
                            l1353 31F2  
                            l1337 35BC  
                            l1329 2F70  
                            l1345 1826  
                            l1281 0562  
                            l1273 048C  
                            l1265 0358  
                            l1257 02C6  
                            l1426 2558  
                            l1442 2820  
                            l1434 2794  
                            l1354 31F6  
                            l1338 35A4  
                            l1346 33D4  
                            l1290 07E2  
                            l1282 0576  
                            l1274 04BA  
                            l1266 0384  
                            l1258 0284  
                            l1443 2858  
                            l1435 2836  
                            l1339 35CA  
                            l1291 1154  
                            l1347 33B0  
                            l1283 05A8  
                            l1275 04E6  
                            l1267 039E  
                            l1259 02CA  
                            l1428 25BE  
                            l1436 27D0  
                            l1356 3232  
                            l1292 0ECE  
                            l1348 338C  
                            l1284 0608  
                            l1276 0500  
                            l1268 03D2  
                            l1429 2558  
                            l1437 27BE  
                            l1357 3482  
                            l1293 0EC0  
                            l1349 33D0  
                            l1285 0620  
                            l1277 0540  
                            l1269 03FE  
                            l1438 27E2  
                            l1358 3440  
                            l1294 0EBC  
                            l1286 067E  
                            l1278 058E  
                            l1359 343C  
                            l1295 0ECA  
                            l1287 0714  
                            l1279 057C  
                            l1296 0EE0  
                            l1288 078C  
                            l1297 0F74  
                            l1289 07D2  
                            l1298 0F6A  
                            l1299 0F5E  
                            l1693 31C4  
                            l1695 31B8  
                            l1696 3160  
                            l1697 318A  
              rtc24to12Hour@yHour 0134  
                            _LATC 000F8B  
                            u4000 046C  
                            u4001 0468  
                            u4010 0486  
                            u4011 0482  
                            u4100 070E  
                            u4020 04B4  
                            u4101 070A  
                            u4021 04B0  
                            u4110 077C  
                            u4030 04E0  
                            u4111 0778  
                            u4031 04DC  
                            u4200 1A4A  
                            u4120 07BE  
                            u4040 04FA  
                            u4201 1A46  
                            u4121 07BA  
                            u4041 04F6  
                            u4210 0E22  
                            u4130 33D0  
                            u4050 053A  
                            u4211 0E1E  
                            u4131 33CC  
                            u4051 0536  
                            u4300 2E1A  
                            u4220 0E94  
                            u4140 1E60  
                            u4060 05A2  
                            u4301 2E16  
                            u4221 0E90  
                            u4141 1E5C  
                            u4061 059E  
                            u4310 349A  
                            u4230 0EB6  
                            u4150 1758  
                            u4070 0602  
                            u4311 3496  
                            u4231 0EB2  
                            u4151 1754  
                            u4071 05FE  
                            u4400 35CA  
                            u4320 34AE  
                            u4240 0EF6  
                            u4160 17FC  
                            u4080 061A  
                            u3600 1DD6  
                            u4401 35C6  
                            u4321 34AA  
                            u4241 0EF2  
                            u4161 17F8  
                            u4081 0616  
                            u3601 1DD2  
                            u4410 2ADE  
                            u4330 34C4  
                            u4250 0F1C  
                            u4170 2E3C  
                            u4090 0678  
                            u3610 3064  
                            u4411 2ADA  
                            u4331 34C0  
                            u4251 0F18  
                            u4171 2E38  
                            u4091 0674  
                            u3611 3060  
                            u4500 23B4  
                            u4420 2B06  
                            u4340 2F0C  
                            u4260 0F46  
                            u4180 2E70  
                            u3700 0AE8  
                            u3620 30D2  
                            u3540 1C7C  
                            u4501 23B0  
                            u4421 2B02  
                            u4341 2F08  
                            u4261 0F42  
                            u4181 2E6C  
                            u3701 0AE4  
                            u3621 30CE  
                            u3541 1C78  
                            u4510 23CE  
                            u4430 2B52  
                            u4350 2F20  
                            u4270 1000  
                            u4190 2E9A  
                            u3710 0B86  
                            u3630 087C  
                            u3550 1CE8  
                            u4511 23CA  
                            u4431 2B4E  
                            u4351 2F1C  
                            u4271 0FFC  
                            u4191 2E96  
                            u3711 0B82  
                            u3631 0878  
                            u3551 1CE4  
                            u4600 32D0  
                            u4520 23EE  
                            u4440 2B98  
                            u4360 2F42  
                            u4280 2D84  
                            u3800 163C  
                            u3720 0C8A  
                            u3640 08BE  
                            u3560 1CFC  
                            u4521 23EA  
                            u4441 2B94  
                            u4361 2F3E  
                            u4281 2D80  
                            u3801 1638  
                            u3721 0C86  
                            u3641 08B8  
                            u3561 1CF8  
                            u4610 3306  
                            u4530 2408  
                            u4450 2BB2  
                            u4370 2F5A  
                            u4290 2DD8  
                            u3810 1672  
                            u3730 0D74  
                            u3650 08EC  
                            u3570 1D16  
                            u4531 2404  
                            u4451 2BAE  
                            u4371 2F56  
                            u4291 2DD4  
                            u3811 166E  
                            u3731 0D70  
                            u3651 08E6  
                            u3571 1D12  
                            u4700 298E  
                            u4620 3316  
                            u4540 2428  
                            u4460 2BCC  
                            u4380 2F82  
                            u3900 02C2  
                            u3820 1696  
                            u3740 14BE  
                            u3660 090E  
                            u3580 1D2A  
                            u4701 298A  
                            u4621 3312  
                            u4541 2424  
                            u4461 2BC8  
                            u4381 2F7E  
                            u3901 02BE  
                            u3821 1692  
                            u3741 14BA  
                            u3661 0908  
                            u3581 1D26  
                            u4710 326E  
                            u4630 3150  
                            u4550 2442  
                            u4470 2194  
                            u4390 35B6  
                            u3910 0304  
                            u3830 16AE  
                            u3750 14E2  
                            u3670 092A  
                            u3646 08C0  
                            u3590 1D54  
                            u4711 326A  
                            u4631 314C  
                            u4607 32CA  
                            u4551 243E  
                            u4471 2190  
                            u4391 35B2  
                            u3911 0300  
                            u3831 16AA  
                            u3751 14DE  
                            u3671 0926  
                            u3591 1D50  
                            u4800 284A  
                            u4720 329C  
                            u4640 34EA  
                            u4560 246C  
                            u4480 347E  
                            u3920 031E  
                            u3840 16E4  
                            u3760 1506  
                            u3680 09BE  
                            u3656 08EE  
                            u4801 2846  
                            u4721 3298  
                            u4641 34E6  
                            u4617 3300  
                            u4561 2468  
                            u4481 347A  
                            u3921 031A  
                            u3841 16E0  
                            u3761 1502  
                            u3681 09BA  
                            u4810 24B6  
                            u4730 3172  
                            u4650 1FE2  
                            u4570 2488  
                            u4490 2398  
                            u3930 0352  
                            u3850 16F8  
                            u3770 1580  
                            u3690 0A6A  
                            u3666 0910  
                            u4811 24B2  
                            u4731 316E  
                            u4651 1FDE  
                            u4571 2484  
                            u4491 2394  
                            u3931 034E  
                            u3851 16F4  
                            u3771 157C  
                            u3691 0A66  
                            u4900 2A3A  
                            u4820 24E6  
                            u4740 31B8  
                            u4660 2896  
                            u4580 31F2  
                            u3940 037E  
                            u3860 0270  
                            u3780 15EC  
                            u4901 2A36  
                            u4821 24E2  
                            u4741 31B4  
                            u4661 2892  
                            u4581 31EE  
                            u3941 037A  
                            u3861 026C  
                            u3781 15E8  
                            u4910 2A4E  
                            u4830 2520  
                            u4750 2756  
                            u4670 2918  
                            u4590 3232  
                            u3950 0398  
                            u3870 0284  
                            u3790 15FE  
                            u4911 2A4A  
                            u4831 251C  
                            u4751 2752  
                            u4671 2914  
                            u4591 322E  
                            u3951 0394  
                            u3871 0280  
                            u3791 15FA  
                            u4920 2A64  
                            u4840 2558  
                            u4760 2786  
                            u4680 2926  
                            u3960 03CC  
                            u3880 0294  
                            u4921 2A60  
                            u4841 2554  
                            u4761 2782  
                            u4681 2922  
                            u3961 03C8  
                            u3881 0290  
                            u4930 2AB8  
                            u4850 258A  
                            u4770 27AA  
                            u4690 296E  
                            u3970 03F8  
                            u3890 02AE  
                            u4931 2AB4  
                            u4851 2586  
                            u4771 27A6  
                            u4691 296A  
                            u3971 03F4  
                            u3891 02AA  
                            u4860 25D2  
                            u4780 27E2  
                            u3980 0412  
                            u4861 25CE  
                            u4781 27DE  
                            u3981 040E  
                            u4950 359E  
                            u4870 334A  
                            u4790 2808  
                            u3990 0452  
                            u4951 359A  
                            u4871 3346  
                            u4791 2804  
                            u3991 044E  
                            u4880 3376  
                            u4945 3536  
                            u4881 3372  
                            u4946 3540  
                            u4890 29C2  
                            u4891 29BE  
                            _RBPU 007F8F  
                            _TMR0 000FD6  
                            _wEOM 3D3D  
                            _dig0 3DCD  
                            _dig1 3DF4  
                            _dig2 3E1B  
                            _dig3 3E42  
                            _dig4 3E69  
                            _dig5 3E90  
                            _dig6 3EB7  
                            _dig7 3EDE  
                            _dig8 3F05  
                            _dig9 3F2C  
                            _g_ts 000000  
          ??_glbaseWaitForNonBusy 014A  
                            _main 1BC4  
         ?_glbaseEnableController 014B  
                            fsr0h 000FEA  
                            fsr1h 000FE2  
                            indf0 000FEF  
                            fsr0l 000FE9  
                            fsr2h 000FDA  
                            indf1 000FE7  
                            fsr1l 000FE1  
                            fsr2l 000FD9  
                      _DelayShort 3786  
                            pclat 000FFA  
                            prodh 000FF4  
                            prodl 000FF3  
                            start 0018  
                  spiWrite@yShift 0138  
             __end_of_DisplayTime 0DD6  
                           ?_main 0100  
               glcdClearScreen@yX 0131  
               glcdClearScreen@yY 0130  
                 __end_of___awdiv 25EE  
                rtcSetClock@pTime 0112  
                 __end_of___awmod 2866  
         __end_of_glcdClearScreen 2BCE  
                           _CMCON 000FB4  
                 ___awdiv@divisor 0155  
                           _LATA0 007C48  
                           _LATA1 007C49  
                           _LATB0 007C50  
                           _LATB1 007C51  
                           _LATA3 007C4B  
                           _LATA4 007C4C  
                           _LATB3 007C53  
                           _LATA5 007C4D  
                           _LATB4 007C54  
                           _LATB5 007C55  
               wwvGetBit@y25Count 013B  
                           i2l675 2FF6  
                           i2l676 2FF6  
                           i2l677 2FF4  
                           i2l678 2FF6  
                 ___awdiv@counter 0157  
                           _TMR1H 000FCF  
                           _TMR1L 000FCE  
                           _PORTA 000F80  
                           _PORTB 000F81  
                           _PORTC 000F82  
                           _TRISA 000F92  
                           _TRISB 000F93  
                           _TRISC 000F94  
                           _digAM 3D71  
                           _digPM 3D9F  
               _wwvMakeTimeStruct 0DD6  
                           _cszDT 3F7A  
                           _cszST 3F96  
                    ?_rtcBCDToDec 0143  
                   wwvGetTime@yTZ 0111  
              ?_wwvMakeTimeStruct 0130  
                 __end_of_rtcInit 1FC4  
                 __end_of_spiInit 3776  
             wwvMakeTimeStruct@pt 0130  
                 __end_of_spiRead 32A8  
                           tablat 000FF5  
  __end_of_glbaseEnableController 3738  
                           status 000FD8  
         __end_of_rtcSaveLastSync 231A  
                 __end_of_wwvInit 363A  
             ??_wwvMakeTimeStruct 013A  
                 ButtonDown@yZone 0108  
                     ButtonDown@y 0109  
                    __end_of_main 1DE4  
                      _ButtonDown 1488  
      __end_of_wwvStartFrameTimer 3752  
               wwvGetBit@yHighMax 0135  
               wwvGetBit@yHighMin 0136  
               ?_wwvRead8BitFrame 0130  
                 glcdDrawImage@yH 0135  
                 glcdDrawImage@yW 0136  
                 glcdDrawImage@py 0137  
                          ??_main 0100  
                MakeDateString@sz 013A  
      glbaseDisableController@yCS 014B  
                   __activetblptr 000002  
              glcdDrawBitmap@pBMP 013A  
              ??_wwvRead8BitFrame 0132  
                    ?_rtcDecToBCD 0143  
       __end_of_wwvMakeTimeStruct 1156  
               ??_glcdWriteString 0136  
               wwvGetBit@ySyncMax 013A  
               wwvGetBit@ySyncMin 0139  
                          _ADCON0 000FC2  
                          _ADCON1 000FC1  
                ___awdiv@dividend 0153  
                    ?_rtcGetClock 0108  
                          _CVRCON 000FB5  
              glbaseWriteData@yCS 0148  
                          i2u4960 2FC6  
                          i2u4961 2FC2  
                          i2u4970 2FEC  
                          i2u4971 2FE8  
                          _TRISA4 007C94  
                     ?_DelayShort 014B  
           __end_of_spiChipSelect 3786  
                __end_of_glcdInit 30D4  
                          __Ldata 000000  
                    _wwvGetAnyBit 35A0  
                     _DisplayTime 0868  
                    ?_rtcSetClock 0112  
                          ___wmul 3152  
                       ??___awdiv 0157  
                       ??___awmod 0157  
                          _cszDay 3CAA  
                          _cszSet 3FFA  
                          _memcpy 3378  
                ___awdiv@quotient 0159  
                 ___awmod@divisor 0155  
                 ___awmod@counter 0158  
                  wwvGetTime@yDST 0119  
                  wwvGetWeekDay@r 0149  
                          _strcat 31C6  
                          main@tt 0100  
                          _strcpy 3430  
                  wwvGetTime@yMin 0117  
                ?_glcdClearScreen 0130  
             MakeDateString@yChar 0138  
            wwvMakeTimeStruct@wDD 013A  
            wwvMakeTimeStruct@yTZ 0139  
                    ?_rtcWriteRam 0135  
                    __mediumconst 39F2  
                __end_of_spiWrite 3378  
                          tblptrh 000FF7  
                          tblptrl 000FF6  
                       ??_rtcInit 0108  
                          tblptru 000FF8  
                       ??_spiInit 0112  
                       ??_spiRead 0137  
      wwvMakeTimeStruct@nEndMonth 013C  
                       ??_wwvInit 0108  
                      __accesstop 0080  
             rtcWriteRam@yAddress 0135  
           __end_of_DrawTZSetting 2E1C  
                   _rtc24to12Hour 2E1C  
                ?_rtcSaveLastSync 0130  
                rtc24to12Hour@pPM 0135  
                rtc24to12Hour@yHr 0137  
                 _g_wFrameCounter 00000B  
                     ?_ButtonDown 0108  
               __end_of_GlobalInt 3030  
           glcdDrawBitmap@yHeight 013D  
           __end_of_glcdDrawImage 1488  
               ??_glbaseWriteData 0149  
     glcdMakeLastSyncString@yChar 0136  
     glcdMakeLastSyncString@yDate 0133  
     glcdMakeLastSyncString@yHour 0134  
         _glbaseDisableController 36F0  
               MakeDateString@ptt 0134  
               __end_of_Vdelay_ms 3152  
                  ?_rtc24to12Hour 0134  
              rtcReadRam@yAddress 0135  
         glbaseWaitForNonBusy@yCS 0149  
                         ?___wmul 0153  
                       l500000373 0B96  
                         _CCP1CON 000FBD  
                         _CCP2CON 000FBA  
                         ?_memcpy 0108  
             glcdClearScreen@ySeg 0132  
                      _glcdSetCol 369A  
                      _glcdMoveTo 34D2  
                         ?_strcat 0143  
                         ?_strcpy 0143  
                      _glbaseInit 35D6  
                       ?_glcdInit 0108  
               rtcSaveLastSync@pt 0130  
           __end_of_glcdWriteChar 2ABA  
                         __Hparam 016A  
               ??_spiChipDeselect 0137  
                         __Lparam 0100  
                       ?_spiWrite 0137  
                         ___awdiv 2494  
                         ___awmod 2734  
                 _glcdWriteString 32A8  
            DisplayTime@yUpdateHr 010D  
                         __ramtop 0300  
                   _wwvGetWeekDay 1FC4  
                       _T0CONbits 000FD5  
                       _T1CONbits 000FCD  
                     rtcReadRam@y 0136  
                         _cszSync 3FE8  
                   _wwvGetSyncBit 3484  
                      _s_yLastCol 00000A  
       ??_glbaseDisableController 014C  
                ___awmod@dividend 0153  
                      _s_yLastSeg 000007  
                         _rtcInit 1DE4  
                         _spiInit 376C  
                         _spiRead 3238  
        ??_glcdMakeLastSyncString 0136  
                      ??_glcdInit 0108  
              _wwvStartFrameTimer 3738  
                  DrawTZSetting@y 010D  
                 wwvGetTime@wDays 011C  
                 wwvGetTime@yLeap 0113  
                 wwvGetTime@yHour 011A  
           wwvRead8BitFrame@yCode 0132  
                         _wwvInit 360A  
                 ??_rtc24to12Hour 0137  
                         memcpy@d 010E  
                         memcpy@n 010C  
                         memcpy@s 0110  
           wwvMakeTimeStruct@yDST 0138  
                   __Lmediumconst 39F2  
                         int_func 0008  
             ?_wwvStartFrameTimer 0130  
           wwvMakeTimeStruct@yMin 0132  
                    ??_DelayShort 014B  
           glbaseWriteData@yDFlag 0147  
                rtcGetClock@pTime 0108  
                      _rtcReadRam 36CA  
                    ?_DisplayTime 0108  
                      ??_spiWrite 0138  
                 glcdSetPage@ySeg 0144  
              rtcBumpLastSync@yHr 0131  
                     ?_glcdSetCol 0143  
                  ?_wwvGetWeekDay 0143  
                     ?_glcdMoveTo 0134  
            ??_wwvStartFrameTimer 0130  
                  ?_wwvGetSyncBit 0130  
                     ?_glbaseInit 010B  
             rtcSaveLastSync@ySet 0132  
               __end_of_wwvGetBit 2494  
               ??_rtcBumpLastSync 0130  
                   ??_glcdSetPage 0145  
              __end_of_DelayShort 378A  
                  _MakeDateString 1992  
              wwvGetWeekDay@nDate 0145  
                  _glcdDrawBitmap 2866  
              wwvGetWeekDay@nYear 0147  
               rtc24to12Hour@yBin 0138  
         __end_of_glcdWriteString 3318  
 __end_of_glbaseDisableController 3714  
                 _glbaseWriteData 351E  
                    ??_ButtonDown 0108  
                 DisplayTime@yAll 010A  
                  __end_of___wmul 31C6  
                      _wwvGetTime 003A  
                  __end_of_memcpy 33D6  
                       _GlobalInt 2F8A  
          glcdDrawBitmap@yBaseCol 013E  
                    wwvGetTime@pt 0108  
                    wwvGetTime@sz 011E  
          glcdDrawBitmap@yBaseSeg 013F  
          __end_of_MakeDateString 1BC4  
                  __end_of_strcat 3238  
                  __end_of_strcpy 3484  
        ??_glbaseEnableController 014C  
                       __Habsbss0 00000E  
          __end_of_glcdDrawBitmap 2990  
                wwvGetBit@yLowMax 0137  
                wwvGetBit@yLowMin 0138  
                       __Labsbss0 000000  
             __end_of_glcdSetPage 366A  
              __end_of_ButtonDown 171E  
                     ?_rtcReadRam 0135  
                       _Vdelay_ms 30D4  
               glcdDrawImage@yNum 0134  
                        ??___wmul 0157  
    glcdMakeLastSyncString@yMonth 0132  
                 ??_wwvGetWeekDay 0149  
                        ??_memcpy 010E  
              MakeDateString@yPos 0139  
                 ??_wwvGetSyncBit 0130  
                        ??_strcat 0147  
                      ?_GlobalInt 015C  
                        ??_strcpy 0147  
       glbaseEnableController@yCS 014B  
                 ?_MakeDateString 0134  
                   ??_rtcBCDToDec 0144  
                 _spiChipDeselect 3776  
            glcdDrawBitmap@yXAxis 0140  
            glcdDrawBitmap@yYAxis 0141  
                 ?_glcdDrawBitmap 013A  
            glcdDrawBitmap@yWidth 013C  
                _wwvRead8BitFrame 2ED6  
         __end_of_glbaseWriteData 3562  
      glcdMakeLastSyncString@yMin 0135  
      glcdMakeLastSyncString@yPos 0137  
                 _wwvGetTime$1280 010A  
                 _wwvGetTime$1281 010B  
                 _wwvGetTime$1282 010C  
                 _wwvGetTime$1283 010D  
                 _wwvGetTime$1284 010E  
                 _wwvGetTime$1285 010F  
                ?_glcdWriteString 0134  
                      ?_Vdelay_ms 010C  
         MakeDateString@pszBuffer 0136  
                   _spiChipSelect 377E  
          _glcdMakeLastSyncString 171E  
                       _g_yUpdate 00000D  
                        ?___awdiv 0153  
                        ?___awmod 0153  
                     _g_yTimedOut 000009  
                 Vdelay_ms@wDelay 010C  
                 Vdelay_ms@wCount 010E  
                     ?_wwvGetTime 0108  
    __end_of_glbaseWaitForNonBusy 35A0  
                     __smallconst 0300  
                   ??_rtcDecToBCD 0144  
                        ?_rtcInit 0108  
                     _glcdSetPage 363A  
                        ?_spiInit 0112  
                        ?_spiRead 0137  
                   ??_rtcGetClock 010A  
                        ?_wwvInit 0108  
                  ___wmul@product 0157  
                  glcdSetCol@yCol 0143  
                  glcdSetCol@ySeg 0144  
             __end_of_rtcBCDToDec 369A  
                   _DrawTZSetting 2D60  
                        _PIE1bits 000F9D  
               ??_glcdClearScreen 0130  
                  ?_spiChipSelect 0137  
            glbaseWriteData@yData 0146  
                        _PIR1bits 000F9E  
                   ?_wwvGetAnyBit 0130  
                   ??_rtcSetClock 0114  
                        _RCONbits 000FD0  
                       glcdInit@y 0108  
                 _rtcBumpLastSync 2BCE  
                     _cszTZChange 3FC4  
                 rtcDecToBCD@yNum 0143  
                    ??_glcdSetCol 0145  
                    ??_glcdMoveTo 0136  
                     ??_GlobalInt 015C  
               ___wmul@multiplier 0153  
                DrawTZSetting@yTZ 010C  
                    ??_glbaseInit 010B  
         __end_of_spiChipDeselect 377E  
                   spiRead@yShift 0138  
                   _glcdDrawImage 1156  
                   ??_rtcWriteRam 0137  
                     _cszLastSync 3FB2  
               ??_rtcSaveLastSync 0133  
                  DisplayTime@yPM 010B  
                  DisplayTime@yTZ 0110  
                  DisplayTime@yHr 010C  
                  DisplayTime@ptt 0108  
         wwvRead8BitFrame@pResult 0130  
                       _wwvGetBit 231A  
               wwvGetTime@yYears1 0114  
               wwvGetTime@yYears2 0115  
                     wwvGetTime@y 0112  
             __end_of_rtcDecToBCD 3430  
                     _cszTimeZone 3CF7  
                rtcWriteRam@yData 0136  
           __end_of_rtc24to12Hour 2ED6  
                ?_glbaseWriteData 0146  
                  ?_DrawTZSetting 010C  
   glcdMakeLastSyncString@pBuffer 0130  
              __end_of_glcdSetCol 36CA  
                        __Hparam1 016A  
              __end_of_glcdMoveTo 351E  
             __end_of_rtcGetClock 2D60  
                        __Lparam1 0100  
                  ??_wwvGetAnyBit 0130  
                     ??_Vdelay_ms 010E  
          _glbaseEnableController 3714  
              __end_of_glbaseInit 360A  
                    __Lsmallconst 0300  
          glcdWriteString@pString 0134  
        ?_glbaseDisableController 014B  
             __end_of_rtcSetClock 2734  
         wwvMakeTimeStruct@yYears 0136  
                        __config1 00F0FF  
                        __config2 00FEF8  
                        __config3 00FDFF  
                        __config4 00FFFB  
                        __config5 00FFFF  
                  ?_glcdDrawImage 0134  
           DisplayTime@yUpdateMin 010E  
           DisplayTime@yUpdateSec 010F  
                        _digBlank 3F53  
                        _digColon 3FD6  
                      strcat@from 0145  
                  Vdelay_ms@_dcnt 0110  
                        _glcdInit 3030  
                     _rtcBCDToDec 366A  
                      ?_wwvGetBit 0135  
                        _cszBlank 3FF6  
                        _yFont6x8 39F2  
             __end_of_rtcWriteRam 376C  
                        _cszMonth 3C32  
                      strcpy@from 0145  
                   _glcdWriteChar 2990  
                       rtcInit@tt 0109  
                 ??_spiChipSelect 0137  
           rtcBumpLastSync@yMonth 0133  
         __end_of_rtcBumpLastSync 2C98  
                     _s_yLastPage 000008  
            _glbaseWaitForNonBusy 3562  
                    ??_rtcReadRam 0136  
                        _spiWrite 3318  
                    spiRead@yData 0137  
                ??_MakeDateString 0138  
        __end_of_wwvRead8BitFrame 2F8A  
                wwvGetTime@yDays1 0116  
                wwvGetTime@yDays2 0110  
                   DisplayTime@sz 0112  
                wwvGetTime@yLower 011B  
                wwvGetTime@yUpper 0118  
                ?_spiChipDeselect 0137  
                      _INTCONbits 000FF2  
                ??_glcdDrawBitmap 013E  
                     _rtcDecToBCD 33D6  
                        memcpy@d1 0108  
                        memcpy@s1 010A  
               wwvRead8BitFrame@y 0133  
              __end_of_rtcReadRam 36F0  
          wwvMakeTimeStruct@wDays 0134  
          wwvMakeTimeStruct@yLeap 0137  
          wwvMakeTimeStruct@yHour 0133  
                     _rtcGetClock 2C98  
                  ?_glcdWriteChar 0136  
                        intlevel2 378A  
                 ??_DrawTZSetting 010D  
         ?_glcdMakeLastSyncString 0130  
           ?_glbaseWaitForNonBusy 0149  
            rtcBumpLastSync@yDate 0130  
                        rtcInit@y 0108  
                      _OSCCONbits 000FD3  
                  glcdWriteChar@i 0139  
                     _rtcSetClock 25EE  
                    glcdMoveTo@yX 0134  
                    glcdMoveTo@yY 0135  
              glcdWriteChar@pChar 0137  
                    DisplayTime@y 0111  
              glcdWriteChar@yChar 0136  
                 ??_glcdDrawImage 0135  
                glcdSetPage@yPage 0143  
           __end_of_wwvGetWeekDay 2180  
                    ??_wwvGetTime 010A  
                        strcat@cp 0147  
           __end_of_wwvGetSyncBit 34D2  
                        strcat@to 0143  
                        strcpy@cp 0147  
                        strcpy@to 0143  
                     _rtcWriteRam 3752  
             rtcBumpLastSync@yMin 0132  
                    ?_glcdSetPage 0143  
            __end_of_wwvGetAnyBit 35D6  
     glbaseWaitForNonBusy@yStatus 014A  
                 _glcdClearScreen 2ABA  
                     ??_wwvGetBit 0135  
  __end_of_glcdMakeLastSyncString 1992  
                ?_rtcBumpLastSync 0130  
                 rtcBCDToDec@yBin 0144  
                 rtcBCDToDec@yNum 0143  
              __end_of_wwvGetTime 0868  
                   ??_DisplayTime 010B  
